ÅacompositeCallbackenabledcreateRenderObjectupdateRenderObject_cancelCallback_enabledpainttextvaluebuildTextSpan	selectionclearclearComposing _isSelectionWithinComposingRangeemptycopycutpaste	selectAllonContentInsertedallowedMimeTypesiOSBlinkingCaretKeyFramestimemaxDuration
_keyFramesdxisDone_lastKeyFrameIndexx
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyleundoController
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactor
textScalercursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedgroupIdonTapOutsideonTapUpOutsideinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledstylusHandwritingEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuilderspellCheckConfigurationmagnifierConfigurationdefaultStylusHandwritingEnabled_userSelectionEnabledgetEditableButtonItems_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_cursorBlinkOpacityController$_backingCursorBlinkOpacityController_iosBlinkCursorSimulation_cursorVisibilityNotifier_editableKeyclipboardStatus_liveTextInputStatus_textInputConnection_hasInputConnection_selectionOverlay_scrollNotificationObserver_dataWhenToolbarShowScheduled&_listeningToScrollNotificationObserver_webContextMenuEnabled_scrollableKey_internalScrollController_scrollController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_spellCheckConfiguration_stylespellCheckEnabledspellCheckResults_spellCheckResultsReceived_processTextService_processTextActions_shouldCreateInputConnection_floatingCursorResetTime_floatingCursorResetController_lastOrientation_stylusHandwritingEnabled_appLifecycleListener_justResumedwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabledlookUpEnabledsearchWebEnabledshareEnabledliveTextInputEnabled_onChangedClipboardStatus_onChangedLiveTextInputStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection_allowPaste	pasteText
_pasteTextlookUpSelectionsearchWebForSelectionshareSelection_startLiveTextInputfindSuggestionSpanAtCursorIndex_inferSpellCheckConfigurationbuttonItemsForToolbarOptionsgetGlyphHeightscontextMenuAnchorscontextMenuButtonItems _textProcessingActionButtonItems	initState_initProcessTextActions_tickersEnableddidChangeDependenciesdidUpdateWidget"_disposeScrollNotificationObserverdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValue_checkNeedsAdjustAffinityperformActionperformPrivateCommandinsertContent_startCaretCenter_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededdidChangeInputControlconnectionClosed_nextFocusChangeIsInternal_flagInternalFocus_unflagInternalFocusrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded_platformSupportsFadeOnScroll!_isInternalScrollableNotification(_scrollableNotificationIsFromSameSubtree _handleContextMenuOnParentScroll_calculateDeviceRect_showToolbarOnScreenScheduled_handleContextMenuOnScroll_selectionInViewport_createSelectionOverlay_handleSelectionChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_performSpellCheck_formatAndSetValue_bringIntoViewBySelectionState_onCursorColorTick_showBlinkingCursorcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_startCursorBlink_onCursorTick_stopCursorBlink_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_adjustedSelectionWhenFocused_compositeCallback_updateSizeAndTransform#_schedulePeriodicPostFrameCallbacks_scribbleCacheKey_updateSelectionRects_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar showSpellCheckSuggestionsToolbarshowMagnifierhideMagnifier_placeholderLocationinsertTextPlaceholderremoveTextPlaceholderperformSelector
autofillId_viewIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_moveBeyondTextBoundary_moveToTextBoundary_characterBoundary_nextWordBoundary
_linebreak_paragraphBoundary_documentBoundary_makeOverridable_transposeCharacters_transposeCharactersAction_replaceText_replaceTextAction_scrollToDocumentBoundary_scroll_extendSelectionByPage_updateSelection_updateSelectionAction_verticalSelectionUpdateAction_hideToolbarIfVisible_defaultOnTapOutside_actionsbuild
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsettextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorstructStyleplaceholdersizecomparechildeditableKeyupdateSelectionRects_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectbounds_text_breaksSurrogatePairgetLeadingTextBoundaryAtgetTrailingTextBoundaryAtstategetTextBoundary_applyTextBoundary_hideToolbarIfTextChangedinvokeisActionEnabledignoreNonCollapsedSelectionisExpandextentAtIndexapplyTextBoundaryNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesupdateSelectionChangedCallbackAppPrivateCommandCallbackEditableTextContextMenuBuilder_ApplyTextBoundary_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_WebClipboardStatusNotifier_EditableTextTapOutsideActionÉ•	TextStyleCharacterRangeStringCharactersKeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelectionvoidStringMapdynamic"SelectableRegionContextMenuBuilderSelectableRegionWidgetBuildContextTextPositionboolTextBoundaryDurationmillisecondsintListSingleChildRenderObjectWidgetCompositionCallbackoverrideRenderObjectupdateRenderObjectcompositeCallbackenabledRenderProxyBoxVoidCallbackcallmarkNeedsPaintPaintingContextOffsetaddCompositionCallbackpaintTextInputFormatterdispose	TextFieldValueNotifierisValid	fromValueemptytext	composingisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangevalueTextSpanwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterlengthendstartFlutterError
DeprecatedreadOnlycontentInsertionConfiguration
isNotEmptyValueChangeddouble
Simulation_iOSBlinkingCaretKeyFrameslasttimei	TextInputCupertinoTextFieldTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsDefaultTextEditingShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntent
WidgetsAppLogicalKeyboardKeykeyASystemChannelskeyEvent	FocusNode	textInputTextInputClient!DoNothingAndStopPropagationIntent#TextSelectionGestureDetectorBuilderScaffold
ScrollableScrollNotificationObserverTextSelectionOverlaySemanticsServiceannounceStatefulWidget	multiline
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneBoxHeightStyletightBoxWidthStyleall
BrightnesslightDragStartBehaviorCliphardEdgeTextMagnifierConfigurationdisabledTextSelectionHandleControls	selectAllpastecopycutmisspelledTextStyleautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterableTextHeightBehaviorUndoHistoryControllerforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalityRenderEditablelocaleLocaleMediaQueryDatatextScaleFactor
MediaQuery
TextScalerColorCupertinoThemeDataprimaryColorCupertinoColorsinactiveGrayFloatingCursorDragStateTextFormFieldExpandedSizedBoxDefaultSelectionStyleTextSelectionThemeDataselectionColorTextSelectionControlsbuildToolbar	ThemeDataplatformaddListener
ListenableperformPrivateCommandTextFieldTapRegionObjectEditableTextTapOutsideIntentunfocusPointerDownEvent	TapRegionTapRegionCallbackPointerUpEventTapRegionUpCallbackSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadius
EdgeInsetsScrollController
controllerScrollPhysicsphysicsScrollBehaviorScribbleClientScribeselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressInputDecorationhintTextRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationonContentInsertedallowedMimeTypesshowToolbarbuildGestureDetectorContextMenuControllercontextMenuAnchorscontextMenuButtonItems"TextSelectionToolbarLayoutDelegateselectionControlsAdaptiveTextSelectionToolbargetAdaptiveButtonsContextMenuButtonItemBrowserContextMenuSpellCheckServiceDefaultSpellCheckServiceSpellCheckConfigurationgetSelectableButtonItemsbuttonItemsClipboardStatusonPasteclipboardStatusunknowndefaultTargetPlatformTargetPlatformandroidaddAllonCut	onPressedtypeContextMenuButtonTypeonCopyonShareshareonSelectAllonLookUplookUponSearchWeb	searchWebonLiveTextInputaddliveTextInputisEmptyfirstkIsWebiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypefuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueEnumPropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimerAnimationControllervsynciOSBlinkingCaret	GlobalKeyClipboardStatusNotifierLiveTextLiveTextInputStatusNotifierTextInputConnectionattachedScrollNotificationObserverStateRectwidgetscrollController	LayerLinkAutofillGroupStateautofillClientvisibleForTestingspellCheckEnabledSpellCheckResultssuggestionSpansProcessTextServiceDefaultProcessTextServiceProcessTextActionOrientationscribbleEnabledstylusHandwritingEnabledAppLifecycleListener	focusNodehasFocusmincursorColoralphawithOpacitytoolbarOptionsobscureTextisCollapsed	pasteableenableInteractiveSelectiontrimLiveTextInputStatussetStatecurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmounted
debugLabelFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplacedinvokeMethodstartLiveTextInputSuggestionSpanSpellCheckSuggestionsToolbarrangefloorspellCheckServiceWidgetsBindingplatformDispatchernativeSpellCheckServiceDefinedreportErrorFlutterErrorDetails	exceptionlibrarystack
StackTracecurrentTextSelectionToolbarAnchorsgetSelectionRect
InlineSpantoPlainTextstartGlyphHeightendGlyphHeight
charactersgetRectForComposingRangeheightlastSecondaryTapDownPositionprimaryAnchorTextSelectionPointgetEndpointsForSelectionfromSelection	renderBoxselectionEndpointsgetEditableButtonItemsSelectableRegionStatelabelactionprocessTextActionid	protected	initState
showCursorspellCheckConfigurationonResumeclearqueryTextActionsdidChangeDependencies
boldTextOfcontext
fontWeight
FontWeightboldAutofillGroupmaybeOf
unregisterregister	autofocushasSize
FocusScopeof
TickerModeViewviewIdupdateConfigtextInputConfigurationorientationOfremoveListenerdidUpdateWidgetcontextMenuBuilderonSelectionHandleTappeddragStartBehaviormagnifierConfigurationtoolbarIsVisiblehandlesVisibleshowHandlesshowSelectionHandles
autofillIdupdateKeepAlivesetStyle
fontFamilyfontSizetextDirection	textAligncanPastecancelremoveObserverFocusManagersetEditingStateaffinityscribbleInProgressscribble
forcePresskeyboardbrieflyShowPasswordresetCharTickswithAnimationnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandcontainsmimeTypeRawFloatingCursorPointstateStartisAnimatingstopstartLocationshouldResetOrigincurrentTextPositionstartCaretCentergetLocalRectForCaretcenter$calculateBoundedFloatingCursorOffsetsetFloatingCursorUpdatecenteredPointrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTodurationcurveCurves
decelerate
centerLeftisCompletedfromPosition
lerpDoubledxdyresetLerpValuepragmaonEditingCompleteErrorDescriptionclearComposing	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclampDoublerightleft
fromCenterbottomtopminScrollExtentmaxScrollExtentshiftautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeTextInputControlhideconnectionClosedReceivedrequestFocusScrollableStatefindAncestorStateOfTypeScrollNotificationScrollStartNotificationScrollEndNotificationsizeOfFlutterViewpadding
viewInsetsdevicePixelRatiofromLTWHupdateForScrollspellCheckToolbarIsVisibleTextBoxgetBoxesForSelectionmapboxtoRectreduceresultexpandToIncludeselectionBoundshideToolbarselectionStartInViewportselectionEndInViewportMatrixUtilstransformRectgetTransformTohasNaNoverlapsRenderAbstractViewportpaintBoundsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegate	doubleTapdrag	longPresstaponSelectionChangedCurvefastOutSlowInfindRenderObject
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeshowOnScreeninflateRectjumpToLocalizationsmaybeLocaleOffetchSpellCheckSuggestionsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangeddebugDeterministicCursorfloatingCursorOnisActivecursorOpacityAnimatesanimateWithwhenCompleteperiodiczero(stopCurrentVerticalRunIfSelectionChangesaddObserverLayerElementdebugIsActiveMatrix4setEditableSizeAndTransformScrollDirectionuserScrollDirectionidle
textScalerlineartextScalerOf
inlineSpantextHeightBehaviorDefaultTextHeightBehaviorstructStyle
strutStyleplaceholderRenderComparisonforcelayoutcompareindexSelectionRectincludeSemanticsLabelsmoveNextbounds	directionsetSelectionRectssetComposingRectsetCaretRectdevicePixelRatioOfhideHandles#spellCheckSuggestionsToolbarBuilder showSpellCheckSuggestionsToolbarmagnifierIsVisibleupdateMagnifiershowMagnifierhideMagnifierintentForMacOSSelectorprimaryFocushashCodeTextInputConfigurationtoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCuthandlePastegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtTextAffinityupstream
downstreamCharacterBoundarywordBoundariesmoveByWordBoundaryLineBoundaryParagraphBoundaryDocumentBoundarydefaultActionTransposeCharactersIntentatmoveBack
expandNextcurrentCharactersstringBeforestringAfterstringBeforeLengthCallbackActiononInvokecurrentTextEditingValuereplacementRangereplacementTextcauseScrollToDocumentBoundaryIntentforwardScrollIntentScrollIncrementTypepageScrollPositioncurrentStateScrollActiongetDirectionalIncrementpixelsExtendSelectionByPageIntentAxisDirectiondownupnewSelectionDirectionalCaretMovementIntentDismissIntentonTapOutsidepointerDownEventTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntentignoreNonCollapsedSelection'ExtendSelectionToNextWordBoundaryIntent,ExtendSelectionToNextParagraphBoundaryIntent ExtendSelectionToLineBreakIntent-ExtendSelectionVerticallyToAdjacentLineIntent-ExtendSelectionVerticallyToAdjacentPageIntent;ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntent ExpandSelectionToLineBreakIntentisExpand'ExpandSelectionToDocumentBoundaryIntentextentAtIndexintentdebugCheckHasMediaQuerybuildchildactionsBuilderbuildergroupIdeventonTapUpOutsidekReleaseModeMouseRegioncursormouseCursorUndoHistoryonTriggeredshouldChangeUndoStackoldValueundoStackModifierundoControllerFocusincludeSemanticsNotificationListeneronNotificationnotificationkeyexcludeFromSemanticsaxisDirectionscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticseditableKeyupdateSelectionRectsSizeChangedLayoutNotifierbackgroundCursorColor	forceLineminLinesexpandsmisspelledSelectionColortextWidthBasisobscuringCharacterrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatepromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetreplaceRange	substringshrink&buildTextSpanWithSpellCheckSuggestionsbuildTextSpanMultiChildRenderObjectWidget
WidgetSpanextractFromInlineSpansetPromptRectRange	immutable	identical	compareTotoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfrom	intersectHitTestResulthitTestInViewpathanyHitTestEntryentrytarget	RenderBoxTextPainterParagraphBuilder	noScalingPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholder	alignmentpoprunes
CharactersisHighSurrogate
codeUnitAtisLowSurrogateDirectionalTextEditingIntentContextAction_selectionOverlayselectionOverlay_value_characterBoundaryrenderEditablegetLineAtOffsettextEditingValuecollapseSelectioncontinuesAtWrapexpandToextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveByOffsetmovePreviouscutSelectioncopySelection
hasStringskindPointerDeviceKindtouchmousestylusinvertedStylustrackpadUnimplementedErrorSingleChildRenderObjectWidgetRenderProxyBoxValueNotifier
SimulationStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpanTextBoundaryContextActionClipboardStatusNotifierÁôú˚ ¿±JsÿaÃÉLàÇâ?KeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelection àWpackage:flutter/services.dart 0  Ç3   
dart:async  ÇH   ÇZÇ]mathÇ]	dart:mathÇzÇà 	TextStyle Çd   ÇtÇwuiÇwdart:uiÇ∑Ç‹CharacterRangeStringCharacters Çå   "package:characters/characters.dart  Çﬂ   package:flutter/foundation.dart  É	   package:flutter/gestures.dart  É1   package:flutter/rendering.dart  ÉZ   package:flutter/scheduler.dart  ÉÉ   package:flutter/services.dart  É¨   actions.dart  É√   app_lifecycle_listener.dart  ÉÈ   autofill.dart  Ñ   automatic_keep_alive.dart  Ñ%   
basic.dart  Ñ:   binding.dart  ÑQ   constants.dart  Ñj   context_menu_button_item.dart  Ñí   
debug.dart  Ñß   default_selection_style.dart  ÑŒ   #default_text_editing_shortcuts.dart  Ñ¸   focus_manager.dart  Ö   focus_scope.dart  Ö4   focus_traversal.dart  ÖS   framework.dart  Öl   localizations.dart  Öâ   magnifier.dart  Ö¢   media_query.dart  ÖΩ   notification_listener.dart  Ö‚   scroll_configuration.dart  Ü   scroll_controller.dart  Ü'   scroll_notification.dart  ÜJ   !scroll_notification_observer.dart  Üv   scroll_physics.dart  Üî   scroll_position.dart  Ü≥   scrollable.dart  ÜÕ   scrollable_helpers.dart  ÜÔ   shortcuts.dart  á   !size_changed_layout_notifier.dart  á4   spell_check.dart  áO   tap_region.dart  ái   	text.dart  á}   text_editing_intents.dart  á°   text_selection.dart  áø   #text_selection_toolbar_anchors.dart  áÌ   ticker_provider.dart  à   undo_history.dart  à(   	view.dart  à<   widget_span.dart¿”/ ¿˜8ôj <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅTÅpÅìÅ¡ÅÍÇ(Ç1Ç2ÇGÇcÇäÇãÇﬁÉÉ0ÉYÉÇÉ™É´É¬ÉËÑ Ñ$Ñ9ÑPÑiÑëÑ¶ÑÕÑ˚ÖÖ3ÖRÖkÖàÖ°ÖºÖ·ÜÜ&ÜIÜuÜìÜ≤ÜÃÜÓáá3áNáhá|á†áæáÏàà'à;àVàWà~àáà®à«à‡à˘ââ*âAâBâZâxâïâñâÊää.äxäyä∆ã#ã$ãpãâãçãõãüãÌåå1åÅåÇåœç
ç`çaç®ç˜é"éhéié¥é€èèè[è_è®èÈè¯êêê&ê5êEêUêXêYêúëë0ëFëGëSëçë–ë‘ë’ë·í<íqí™íÎìììììPìïìñì≈ìÊìÁîî î?îXîmîåî™î‘îÏîÚîˆî˜ïï=ïPïùï£ï≈ï…ïÀïÃï˘ï˝ñ<ñãñ⁄ó(ó5ó9óÖó∆ó òòhò¨ò∞ò˛ôGôóôÂö.özö≈õõIõMõõõÂõ˛úúPúöúûú≤ú˛ùIùmùqùÕù›ù·ùÔùÛûDûkûµûÁüïü€†-†3†Ä†é†î†⁄°*°{° ¢¢/¢5¢É¢°¢ß¢Ω££X£y££›£Ô§§j§k§≈§À••/•j•x• ¶¶k¶ï¶û¶Ã¶Õ¶˚ßßßkßßß≠ß¯®J®ì®À®—©©m©∫™
™N™k™á™ú™ÿ™˙´´´´´;´G´å´›¨/¨W¨^¨z¨~¨¨≥¨π≠
≠J≠e≠à≠û≠ø≠∆ÆÆnÆæØ
ØeØfØãØºØ¬Ø√ØË∞7∞v∞ã∞ü∞ª∞˚±R±ë±ö±°±•±¶±ÿ±ﬁ≤.≤L≤~≤≤–≥≥k≥©≥Ø≥Ï¥3¥Ä¥ß¥≠¥ˇµµ<µäµÕµ”µˆ∂R∂†∂§∂•∂≈∂À∑∑H∑N∑ü∑Ì∏>∏|∏ç∏‡∏‰∏Âπππkπ∂πƒπ ∫∫i∫∫∫¯ªªJªNªOªíª’º2º6º8º9ºgºkºπΩΩΩΩrΩ≈Ω—Ωﬁææ<æ>æUæéæîæ◊æÊøøHøLøeø|øíø™ø∆øÃøÕ¿ @¿ @D¿ @E¿ @s¿ @y¿ @í¿ @•¿ @¶¿ @”¿ @Ÿ¿ A+¿ A1¿ AJ¿ A\¿ A]¿ Aå¿ Aí¿ AÊ¿ AÏ¿ B¿ B¿ B¿ BN¿ BT¿ Bm¿ BÖ¿ Bá¿ Bà¿ B÷¿ B⁄¿ C)¿ Cv¿ Cô¿ Cù¿ C´¿ CØ¿ C‚¿ D¿ DT¿ DZ¿ D©¿ Dº¿ D¬¿ D˛¿ EG¿ Ei¿ Eé¿ EÕ¿ E˘¿ E˙¿ FM¿ Fs¿ Fy¿ FÀ¿ F—¿ FÁ¿ FÌ¿ G:¿ GM¿ GS¿ Gª¿ GÕ¿ G”¿ G„¿ GÈ¿ H3¿ Ht¿ Hu¿ H∆¿ I¿ I<¿ IB¿ Ií¿ IΩ¿ I√¿ J¿ J^¿ Jt¿ Jz¿ J§¿ J™¿ J¿¿ K¿ K¿ K|¿ Ké¿ Kî¿ K§¿ K™¿ KÙ¿ L	¿ L0¿ L2¿ L3¿ Lu¿ Lá¿ L±¿ L‹¿ M$¿ M>¿ MZ¿ M|¿ Mú¿ Mæ¿ M€¿ M¯¿ N¿ N:¿ N\¿ Nw¿ N|¿ N}¿ Næ¿ N”¿ NÈ¿ NÎ¿ NÏ¿ O#¿ OÜ¿ O…¿ OÓ¿ P!¿ P3¿ Pp¿ P≠¿ P«¿ P”¿ P›¿ PÚ¿ Q0¿ Q1¿ QM¿ QN¿ Qr¿ Qs¿ Q¿ Qû¿ Qü¿ Q´¿ Qﬁ¿ Qﬂ¿ R+¿ RI¿ RJ¿ RV¿ Rp¿ Rö¿ Rõ¿ RÍ¿ S4¿ SX¿ Sm¿ SÖ¿ Sª¿ T¿ T'¿ T>¿ Tc¿ Tp¿ Tò¿ T±¿ T∑¿ T∏¿ U¿ UO¿ Ux¿ U¨¿ UÊ¿ V¿ V¿ V¿ V3¿ V9¿ V:¿ V`¿ Vë¿ Vï¿ Vó¿ Vò¿ V∂¿ V∫¿ W
¿ WR¿ W`¿ Wd¿ WÆ¿ W˘¿ X3¿ X7¿ XR¿ XV¿ X¶¿ X˜¿ YA¿ YE¿ Yä¿ Yé¿ Yﬁ¿ Z)¿ Z-¿ Zp¿ Zt¿ Zâ¿ Zç¿ Zÿ¿ ['¿ [F¿ [J¿ [ò¿ [ﬂ¿ \*¿ \x¿ \≈¿ ]¿ ]^¿ ]≠¿ ]”¿ ]◊¿ ^¿ ^¿ ^#¿ ^t¿ ^ê¿ ^î¿ ^‡¿ _-¿ _X¿ _\¿ _ù¿ _°¿ _Ó¿ `0¿ `4¿ `}¿ `Ã¿ a¿ a¿ a#¿ aq¿ a¡¿ aÂ¿ aÈ¿ b#¿ b'¿ bs¿ b¿¿ c¿ cU¿ cù¿ cÈ¿ c˜¿ c˚¿ dK¿ dí¿ d·¿ e¿ e¿ eN¿ eR¿ f?¿ fÍ¿ gï¿ hp¿ if¿ ij¿ i¡¿ i≈¿ jØ¿ kô¿ lö¿ mô¿ nﬁ¿ o›¿ q¿ r3¿ rˇ¿ s¿ s0¿ s4¿ t¿ u¿ u∆¿ vu¿ wº¿ xe¿ y,¿ yÛ¿ z†¿ z›¿ z·¿ z˜¿ z˚¿ {b¿ {…¿ |d¿ }/¿ }›¿ ~C¿ ~˙¿ ~˛¿ ¿ "¿ r¿ ø¿ Ä¿ Ä]¿ Ä≠¿ Ä¡¿ Ä≈¿ Å¿ Å@¿ ÅD¿ Åî¿ Å‚¿ Ç/¿ Çz¿ Ç ¿ ÇÚ¿ Çˆ¿ ÉC¿ Éå¿ É“¿ Ñ ¿ Ño¿ Ñø¿ Ñ˝¿ Ö¿ ÖQ¿ Ö°¿ ÖÔ¿ Ü>¿ Üb¿ Üu¿ Üy¿ Üò¿ Üú¿ ÜÎ¿ á8¿ ác¿ ág¿ á∑¿ à¿ àT¿ à¿ àÉ¿ à¬¿ àÌ¿ àÒ¿ â@¿ âã¿ âè¿ â÷¿ ä#¿ äV¿ äÄ¿ äì¿ äó¿ ä∑¿ äª¿ ã
¿ ãP¿ ã†¿ ãÔ¿ å¿ å#¿ å^¿ åë¿ åï¿ å–¿ å‘¿ ç¿ ç_¿ ç¿ çÉ¿ ç…¿ é¿ éa¿ é´¿ éˆ¿ è>¿ èB¿ èN¿ èp¿ èê¿ è›¿ èÂ¿ èÎ¿ èÛ¿ è˜¿ ê
¿ ê¿ ê¿ ê ¿ êo¿ ê≠¿ êŸ¿ ë¿ ë	¿ ëW¿ ëß¿ ëÁ¿ ëÌ¿ í<¿ íç¿ í ¿ ì¿ ì¿ ìj¿ ìû¿ ìØ¿ ìæ¿ ì‹¿ ì˘¿ î¿ î7¿ îU¿ îr¿ îò¿ îæ¿ î·¿ î˙¿ ï¿ ï5¿ ï^¿ ïÑ¿ ïú¿ ï≠¿ ïæ¿ ïﬂ¿ ñN¿ ñä¿ ñê¿ ñ™¿ ñø¿ ñ÷¿ ñÈ¿ ó¿ ó¿ ó;¿ ól¿ óà¿ óû¿ ó≈¿ óﬁ¿ ó˙¿ ò¿ ò5¿ òl¿ òÄ¿ òú¿ ò≤¿ ò–¿ òÌ¿ ô¿ ô0¿ ôG¿ ô`¿ ôè¿ ô•¿ ôŒ¿ ôÍ¿ ö¿ ö¿ ö@¿ öW¿ ö~¿ ö∑¿ öÓ¿ õ#¿ õS¿ õâ¿ õØ¿ õ ¿ õ‚¿ ú¿ ú¿ úD¿ ú¿ úÖ¿ ú©¿ ú‘¿ úÌ¿ ù¿ ù,¿ ùE¿ ùV¿ ùá¿ ù√¿ ù…¿ ùÍ¿ û/¿ û^¿ ûÜ¿ û£¿ û≈¿ ü¿ ü%¿ üT¿ üm¿ üœ¿ üË¿ †J¿ †{¿ †ä¿ †◊¿ °¿ °¿ °$¿ °a¿ °¶¿ °∞¿ ¢¿ ¢e¿ ¢}¿ ¢”¿ ¢˘¿ £¿ £<¿ £_¿ £º¿ £·¿ §¿ §I¿ §ö¿ §Ω¿ §Ù¿ •C¿ •y¿ •¨¿ •’¿ •˝¿ ¶+¿ ¶U¿ ¶u¿ ¶Ñ¿ ¶∞¿ ß¿ ßF¿ ß∞¿ ß∫¿ ß€¿ ßÒ¿ ®R¿ ®k¿ ®Ñ¿ ®´¿ ®Ì¿ ©@¿ ©Q¿ ©s¿ ©†¿ ©°¿ ©«¿ ©Ò¿ ©Ú¿ ™)¿ ™F¿ ™G¿ ™â¿ ™À¿ ™—¿ ™¯¿ ™˛¿ ´1¿ ´F¿ ´i¿ ´j¿ ´•¿ ´Ë¿ ´Ó¿ ¨7¿ ¨É¿ ¨”¿ ¨Ê¿ ¨Ï¿ ≠¿ ≠¿ ≠4¿ ≠5¿ ≠_¿ ≠è¿ ≠ê¿ ≠À¿ ≠Ú¿ ≠Û¿ Æ+¿ ÆR¿ ÆX¿ Æî¿ Æﬂ¿ ÆÂ¿ Æ˛¿ Ø¿ Ø*¿ Ø+¿ Øy¿ Ø¿ ØÕ¿ Ø˛¿ ∞¿ ∞¿ ∞"¿ ∞2¿ ∞8¿ ∞Å¿ ∞ô¿ ∞ö¿ ∞¬¿ ∞»¿ ±¿ ±g¿ ±¥¿ ±‹¿ ≤¿ ≤¿ ≤-¿ ≤3¿ ≤¿ ≤œ¿ ≤ˆ¿ ≤¸¿ ≥¿ ≥¿ ≥V¿ ≥y¿ ≥z¿ ≥¥¿ ≥“¿ ≥ÿ¿ ¥*¿ ¥?¿ ¥E¿ ¥U¿ ¥[¿ ¥¥¿ ¥Õ¿ ¥Œ¿ µ	¿ µ1¿ µ7¿ µO¿ µd¿ µ~¿ µ¿ µ∆¿ µÔ¿ µ¿ ∂7¿ ∂`¿ ∂a¿ ∂™¿ ∂ ¿ ∂À¿ ∂˛¿ ∑¿ ∑¿ ∑T¿ ∑Z¿ ∑¢¿ ∑—¿ ∑“¿ ∏¿ ∏@¿ ∏F¿ ∏ç¿ ∏–¿ π¿ π_¿ π™¿ π∞¿ π¸¿ ∫E¿ ∫ë¿ ∫†¿ ∫¶¿ ∫Ò¿ ª4¿ ª:¿ ª£¿ ª˜¿ º¿ º¿ ºg¿ º∑¿ º˘¿ Ω¿ Ω6¿ Ω|¿ ΩÇ¿ Ω∂¿ Ω∫¿ Ωª¿ Ω‹¿ Ω›¿ æ¿ æI¿ æO¿ æt¿ æâ¿ æ¶¿ æß¿ æ‰¿ ø
¿ ø¿ øU¿ ø|¿ øÇ¿ ø–¿ ¿¿ ¿k¿ ¿¥¿ ¡¿ ¡¿ ¡¿ ¡R¿ ¡g¿ ¡ç¿ ¡é¿ ¡–¿ ¬¿ ¬1¿ ¬7¿ ¬Å¿ ¬∂¿ ¬º¿ ¬È¿ ¬Ô¿ ¬ˇ¿ √¿ √W¿ √]¿ √r¿ √°¿ √¢¿ √‚¿ ƒ¿ ƒ ¿ ƒg¿ ƒπ¿ ƒø¿ ƒ˜¿ ≈¿ ≈¿ ≈O¿ ≈ï¿ ≈±¿ ≈∑¿ ≈Ô¿ ≈ı¿ ∆F¿ ∆e¿ ∆k¿ ∆º¿ ∆˝¿ «¿ «!¿ «@¿ «≠¿ «Á¿ «Î¿ »¿ »¿ »D¿ »d¿ »e¿ »ñ¿ »±¿ »≤¿ »¿ »ˆ¿ …7¿ …á¿ …‡¿ …Ó¿ …Ù¿  1¿  7¿  |¿  ®¿  ©¿  ˙¿ À%¿ À+¿ Àp¿ Àv¿ ÀÜ¿ Àå¿ À€¿ ÀÔ¿ Ã¿ Ã¿ ÃM¿ Ãõ¿ Ã°¿ ÃÒ¿ Õ$¿ Õ*¿ Õt¿ Õê¿ Õñ¿ Õ‰¿ Œ+¿ Œ|¿ Œ§¿ Œ™¿ Œ˚¿ œL¿ œù¿ œŸ¿ œﬂ¿ –.¿ –{¿ –´¿ –±¿ –˝¿ —¿ —#¿ —-¿ —3¿ —Ç¿ —“¿ “¿ “!¿ “G¿ “Q¿ “W¿ “¢¿ “„¿ “Ò¿ ”¿ ”¿ ”$¿ ”s¿ ”†¿ ”Æ¿ ”ﬁ¿ ”Ë¿ ”Ó¿ ”˛¿ ‘¿ ‘I¿ ‘^¿ ‘Ø¿ ‘ƒ¿ ‘€¿ ‘‹¿ ’¿ ’d¿ ’j¿ ’∫¿ ’Ì¿ ’Û¿ ÷E¿ ÷ó¿ ÷ù¿ ÷Û¿ ÷˘¿ ◊J¿ ◊ï¿ ◊ß¿ ◊≠¿ ◊˛¿ ÿM¿ ÿm¿ ÿs¿ ÿÕ¿ Ÿ¿ Ÿ8¿ Ÿ>¿ Ÿâ¿ Ÿ≠¿ Ÿª¿ Ÿÿ¿ Ÿ‚¿ ŸË¿ ⁄6¿ ⁄á¿ ⁄†¿ ⁄Æ¿ ⁄›¿ ⁄Á¿ ⁄Ì¿ €¿ €¿ €¿ €!¿ €n¿ €π¿ €’¿ €Í¿ ‹;¿ ‹P¿ ‹g¿ ‹h¿ ‹ü¿ ‹‰¿ ‹Í¿ ›1¿ ›m¿ ›s¿ ›ø¿ ›„¿ ›È¿ ﬁ¿ ﬁ¿ ﬁY¿ ﬁ†¿ ﬁ¶¿ ﬁŸ¿ ﬁÁ¿ ﬁ˝¿ ﬂ6¿ ﬂ>¿ ﬂH¿ ﬂ]¿ ﬂs¿ ﬂt¿ ﬂ≠¿ ﬂ˙¿ ‡	¿ ‡¿ ‡_¿ ‡Ø¿ ‡µ¿ ‡Œ¿ ‡„¿ ·6¿ ·N¿ ·f¿ ·g¿ ·õ¿ ·°¿ ·Ô¿ ‚¿ ‚¿ ‚U¿ ‚•¿ ‚¿ „¿ „¿ „Q¿ „í¿ „ò¿ „Ë¿ ‰:¿ ‰}¿ ‰ ¿ Â¿ Â"¿ Â(¿ Â8¿ Â>¿ Âè¿ Â€¿ ÂÓ¿ Ê>¿ Êç¿ Ê√¿ Êı¿ Êˆ¿ Á2¿ Áj¿ Áp¿ Á∞¿ Á€¿ Á¿ Ë¿ Ë¿ ËT¿ Ë~¿ Ë¿ Ë∏¿ Ë˘¿ È/¿ È5¿ Èz¿ È¡¿ Í¿ Í(¿ Í.¿ Ís¿ Í∏¿ Í„¿ ÍÈ¿ Î9¿ Îâ¿ Îÿ¿ Îﬁ¿ ÎÙ¿ ÏB¿ Ïâ¿ Ïè¿ ÏÓ¿ Ì ¿ Ì¿ Ì¿ ÌQ¿ Ìä¿ Ì≠¿ Ì¸¿ ÓH¿ Óì¿ Ó¡¿ Ó«¿ Ô
¿ ÔO¿ Ôó¿ ÔÁ¿ 6¿ ]¿ r¿ x¿ à¿ é¿ Œ¿ Ò¿ ÒW¿ Òó¿ ÒÂ¿ Ú(¿ ÚQ¿ ÚR¿ Úì¿ ÚÊ¿ Û¿ Û¿ ÛX¿ ÛÄ¿ ÛÜ¿ Û’¿ Ù%¿ ÙA¿ ÙG¿ Ùó¿ ÙÊ¿ ı1¿ ıe¿ ık¿ ıΩ¿ ı“¿ ı˚¿ ı¸¿ ˆ7¿ ˆá¿ ˆî¿ ˆö¿ ˆ‰¿ ˜2¿ ˜x¿ ˜~¿ ˜è¿ ˜ﬁ¿ ˜‰¿ ˜Ú¿ ¯8¿ ¯B¿ ¯H¿ ¯ñ¿ ¯‡¿ ˘1¿ ˘V¿ ˘k¿ ˘ñ¿ ˘ó¿ ˘⁄¿ ˙!¿ ˙'¿ ˙r¿ ˙Ç¿ ˙à¿ ˙◊¿ ˚¿ ˚¿ ˚$¿ ˚ÿ¿ ¸(¿ ¸X¿ ¸Ê¿ ˝6¿ ˝d¿ ˝y¿ ˝±¿ ˝≤¿ ˝Ù¿ ˛C¿ ˛T¿ ˛i¿ ˛ü¿ ˛†¿ ˛Ë¿ ˇ¿ ˇ¿ ˇO¿ ˇõ¿ ˇ°¿ ˇÌ¿ ¿ !¿ 1¿ 7¿ Ñ¿ œ¿ ‰¿ ¸¿ ˝¿9¿à¿¥¿∫¿¿P¿ü¿¿A¿ë¿’¿€¿,¿w¿√¿¿a¿}¿É¿‘¿¿k¿´¿¿¿∆¿‹¿(¿x¿µ¿ª¿¿6¿<¿ï¿ß¿≠¿Ω¿√¿	 ¿	;¿	Ö¿	ö¿	√¿	ƒ¿
¿
O¿
{¿
Å¿
–¿¿g¿ß¿º¿¬¿“¿ÿ¿¿Q¿~¿¿æ¿¯¿˛¿L¿ù¿Ë¿9¿j¿p¿Ä¿Ü¿‘¿¿,¿_¿`¿¨¿∫¿¿¿¿¿_¿Ø¿˛¿¿<¿=¿Ü¿…¿œ¿¿f¿¨¿≤¿¿R¿¢¿ ¿–¿¿T¿Z¿É¿â¿ô¿ü¿Á¿:¿[¿Ä¿Å¿º¿‡¿Ê¿˝¿¿K¿ò¿‰¿4¿T¿i¿Ö¿Ü¿¬¿Â¿Î¿>¿S¿q¿r¿Æ¿Â¿Î¿¿,¿J¿K¿ê¿›¿˝¿¿S¿w¿å¿∞¿±¿Ó¿¿¿R¿u¿v¿¿¿∆¿¿5¿6¿Ä¿Ü¿ƒ¿Ú¿Û¿¿¿R¿X¿~¿•¿¶¿„¿2¿V¿\¿≠¿˝¿B¿é¿ﬂ¿Â¿ ¿ "¿ D¿ E¿ è¿ ”¿ È¿ Ô¿!4¿!r¿!±¿!∑¿!˙¿"@¿"i¿"o¿"á¿"ú¿"≈¿"∆¿#¿#b¿#z¿#Ä¿#–¿#Ù¿#˙¿$;¿$k¿$l¿$®¿$’¿$÷¿%¿%_¿%e¿%†¿%¶¿%…¿%ﬁ¿&
¿&¿&H¿&é¿&î¿&ﬁ¿&‰¿'¿'¿'¿'j¿'µ¿'Ã¿'Ú¿'Û¿(2¿(v¿(|¿(õ¿(°¿(π¿(Œ¿(›¿)¿)F¿)J¿)h¿)i¿)±¿* ¿*"¿*(¿*b¿*h¿*ß¿*ı¿+
¿+¿+Z¿+§¿+»¿+Œ¿+ﬁ¿+‰¿,/¿,]¿,≠¿,‘¿,’¿-¿-A¿-G¿-¿-®¿-Ω¿-¯¿-˘¿.6¿.à¿.ö¿.†¿.Ô¿/>¿/Å¿/œ¿0 ¿0¿0T¿0}¿0É¿0§¿0™¿0Õ¿0”¿1 ¿1T¿1Z¿1x¿1˙¿2L¿2°¿2˜¿3G¿3Ñ¿3ä¿3≠¿3≥¿4¿4T¿4†¿4¡¿4«¿5¿5¿5b¿5¨¿5≤¿5ˇ¿6O¿6õ¿6È¿77¿7á¿7ç¿7€¿8(¿8v¿8∆¿9¿9(¿9.¿9y¿9»¿:¿:¿:a¿:≤¿; ¿;¿;R¿;m¿;s¿;¡¿<¿<]¿<´¿<Ò¿=_¿=e¿=z¿=æ¿=Á¿=Ë¿>7¿>=¿>Ñ¿>»¿>¿>Ò¿?'¿?-¿?P¿?k¿?l¿?Æ¿?ƒ¿? ¿@¿@Z¿@`¿@´¿@˜¿@˝¿AE¿Aä¿Aƒ¿A ¿A⁄¿A‡¿B-¿B?¿B^¿B_¿Bù¿BË¿BÓ¿C;¿C¿CÖ¿C ¿D¿D]¿Du¿Dä¿Dê¿D⁄¿E)¿E7¿E_¿E`¿Eµ¿E·¿E‚¿F/¿F~¿Få¿Fí¿F·¿G4¿Gd¿Gj¿Gº¿H¿HC¿HI¿H_¿He¿H≤¿H≈¿HÀ¿I3¿IE¿IK¿Iê¿I÷¿J$¿JK¿JQ¿Jû¿JÓ¿K¿K!¿Kg¿Kh¿K™¿KÓ¿KÙ¿LD¿Lè¿L‹¿M+¿M1¿Mr¿Mx¿Mπ¿N¿NS¿NY¿N™¿N€¿N·¿O-¿OT¿OZ¿O©¿OÙ¿O˙¿PJ¿P|¿PÇ¿P“¿Q¿QG¿Qä¿Qê¿Q¶¿Qˆ¿R=¿RC¿Rß¿Rπ¿Rø¿R’¿S%¿SB¿SH¿S¨¿Sæ¿Sƒ¿S‘¿T&¿Tr¿TÖ¿T”¿U¿U/¿U~¿U≈¿U⁄¿V¿V¿V^¿V§¿V™¿V˘¿W5¿W;¿WÖ¿W’¿X¿X ¿Xs¿Xà¿X¬¿X√¿Y¿Y¿Y$¿YS¿Yé¿Yè¿Y«¿Z¿Z¿Zc¿Zd¿Z∞¿ZÔ¿Zı¿[E¿[]¿[c¿[s¿[y¿[Ω¿[˚¿\I¿\ã¿\‹¿]¿]E¿]ò¿]·¿^¿^T¿^}¿^•¿^œ¿^˝¿_(¿_V¿_Ä¿_≤¿_π¿`¿`¿`<¿`Ö¿`‘¿a!¿a1¿a2¿ay¿a÷¿a◊¿b¿bs¿bè¿bÂ¿c¿cZ¿cì¿cÎ¿d¿dl¿dä¿d‰¿e¿ee¿eü¿e˜¿f¿f¿f¿f3¿fV¿fr¿fë¿f∑¿fÏ¿f˜¿g ¿g¿g¿g$¿g(¿g)¿gr¿gû¿gÃ¿gË¿gÔ¿h)¿ht¿hz¿h{¿h±¿h≤¿i¿iV¿i®¿i¸¿j¿jT¿j•¿j‹¿jÔ¿k¿k7¿kZ¿k∞¿kÎ¿lG¿lÉ¿læ¿m¿mO¿mâ¿m ¿n¿nT¿n•¿n¯¿o,¿o¿o“¿p¿pH¿pô¿p÷¿q/¿qg¿q°¿q„¿r>¿rí¿r—¿s¿sT¿sa¿sb¿s∞¿s÷¿s˜¿t¿t(¿tM¿tp¿tï¿t¶¿tÆ¿t¥¿tµ¿tŒ¿tÙ¿t˙¿t˚¿uM¿uã¿u—¿v¿vF¿v¿v∫¿vÙ¿w+¿w`¿w¶¿wÎ¿x2¿xx¿x∂¿xÛ¿y1¿yi¿y•¿yÁ¿z¿zV¿zä¿zŒ¿z˛¿{1¿{^¿{ê¿{¬¿{˝¿|4¿|h¿|ñ¿| ¿|˛¿}3¿}h¿}ö¿}œ¿~	¿~;¿~j¿~™¿~Ú¿=¿s¿π¿ˇ¿ÄE¿Äã¿Ä–¿Å¿ÅZ¿Åò¿Å“¿Ç¿ÇY¿Çô¿Ç‹¿É¿É`¿É•¿ÉÁ¿Ñ>¿Ñ{¿Ñß¿ÑŸ¿Ñ‡¿Ñ·¿Ö$¿Ö(¿Ö)¿Ö5¿Öo¿Öp¿Ö|¿Ö¡¿ÖÏ¿ÜF¿Üí¿ÜÚ¿áL¿á´¿áø¿á‰¿áˇ¿à¿àp¿ày¿àÄ¿àî¿àπ¿à‘¿àÌ¿âE¿âN¿âU¿âi¿â∆¿âÕ¿â¯¿äQ¿ä∂¿ã¿ãp¿ã∏¿å¿å[¿å∑¿åÀ¿ç'¿ç.¿çB¿ço¿çã¿ç•¿ç¡¿ç ¿ç—¿çÂ¿éC¿éJ¿é^¿éø¿é∆¿é⁄¿è	¿è'¿èC¿è_¿èh¿èo¿èÉ¿è‹¿è„¿è˜¿ê¿ê<¿ê^¿êï¿êû¿ê•¿êπ¿ê⁄¿ë¿ë*¿ëF¿ëO¿ëV¿ëj¿ëã¿ë±¿ë’¿ëÒ¿ë˙¿í¿í¿íG¿ía¿íy¿íï¿íû¿í•¿íπ¿íÌ¿ì¿ì1¿ìM¿ìV¿ì]¿ìq¿ìö¿ìº¿î	¿î¿îQ¿ît¿î©¿î≤¿îπ¿îΩ¿îø¿î¿¿î·¿ï¿ï¿ïS¿ïs¿ï£¿ï¬¿ï⁄¿ï˙¿ñ¿ñK¿ñ†¿ñ…¿ñÕ¿ñŒ¿ó¿óo¿óp¿ó√¿óÒ¿óÚ¿ò!¿òS¿ò`¿òµ¿ô
¿ô[¿ô£¿ôÕ¿ôÙ¿ôı¿ö+¿ö1¿öA¿öë¿öÕ¿õ¿õ¿õ0¿õ{¿õ|¿õß¿õÁ¿ú:¿úq¿úr¿úΩ¿úæ¿úÓ¿ù¿ùI¿ùû¿ùü¿ù“¿û	¿û>¿û?¿û]¿û^¿ûã¿ûó¿û€¿û‹¿ü,¿ü-¿üf¿ü¿üÄ¿ü«¿üÕ¿†¿†N¿†T¿†d¿†≤¿†«¿°¿°¿°H¿°N¿°ü¿°µ¿¢¿¢¿¢@¿¢F¿¢ç¿¢‹¿£,¿£T¿£U¿£~¿£ô¿£º¿£Ò¿£Ú¿§I¿§ó¿§ò¿§·¿•.¿•/¿•~¿•å¿•í¿•‡¿¶-¿¶3¿¶~¿¶»¿¶Œ¿¶Ì¿ß¿ß4¿ßn¿ßµ¿ß∂¿®¿®>¿®é¿®è¿®∆¿®«¿®Ë¿®È¿©¿©_¿©k¿©é¿©≥¿©π¿©Â¿©È¿©Í¿™#¿™@¿™A¿™M¿™Ñ¿™Ö¿™†¿™Œ¿™ˆ¿´!¿´(¿´e¿´i¿´j¿´v¿´é¿´“¿¨%¿¨+¿¨ä¿¨é¿¨è¿¨õ¿¨¥¿¨¯¿≠8¿≠>¿≠â¿≠ç¿≠é¿≠ö¿≠¥¿≠¯¿Æ6¿Æ<¿Æë¿Æï¿Æñ¿Æ¢¿Æ¿¿Ø¿Ø4¿Øk¿Øò¿Øû¿Øü¿Ø¯¿∞¿∞¿∞¿∞8¿∞Y¿∞o¿∞é¿∞È¿±¿±/¿±P¿±s¿±¶¿±›¿≤.¿≤4¿≤8¿≤9¿≤E¿≤`¿≤ó¿≤´¿≤±¿≤”¿≥¿≥Y¿≥]¿≥^¿≥j¿≥à¿≥ø¿≥”¿≥Ÿ¿≥⁄¿≥¸¿¥/¿¥Ç¿¥Ü¿¥á¿¥ì¿¥≠¿¥“¿¥ı¿µ¿µ:¿µq¿µ»¿µÈ¿∂¿∂-¿∂P¿∂f¿∂l¿∂p¿∂q¿∂}¿∂ü¿∂Ë¿∑¿∑#¿∑S¿∑W¿∑X¿∑}¿∑è¿∑Ÿ¿∑·¿∑Â¿∑Ê¿∏¿∏!¿∏o¿∏w¿∏{¿∏|¿∏ª¿π¿π+¿πa¿πg¿πà¿πå¿πç¿π∫¿π∆¿π˙¿∫:¿∫q¿∫¿∫Ö¿∫¥¿∫¸¿ª.¿ªf¿ªÄ¿ªÅ¿ª®¿ª…¿ªÏ¿º¿º4¿ºE¿ºj¿ºè¿º’¿º˚¿Ω¿ΩD¿Ωû¿Ω≠¿Ωÿ¿ΩÂ¿ΩÌ¿ΩÛ¿æ¿æ¿æ¿æB¿æN¿æÅ¿æ≤¿æ¿¿æ∆¿ø¿ø5¿øV¿ød¿øj¿ø≤¿øˇ¿¿1¿¿{¿¿∂¿¿Õ¿¡	¿¡¿¡P¿¡e¿¡k¿¡â¿¡ç¿¡é¿¡ß¿¡Í¿¡Ó¿¡Ô¿¬¿¬¿¬\¿¬t¿¬Ç¿¬à¿¬∏¿¬Û¿√B¿√Z¿√h¿√n¿√ë¿√ï¿√ñ¿√‘¿√Ï¿√˙¿ƒ ¿ƒ¿ƒN¿ƒe¿ƒ•¿≈ ¿≈R¿≈ò¿≈ü¿≈†¿≈¸¿∆.¿∆x¿∆≥¿∆ ¿«¿«¿«M¿«b¿«h¿«l¿«m¿«ë¿«ù¿«Õ¿«˛¿»H¿»_¿»m¿»s¿»ì¿»¥¿…¿…¿…'¿….¿…/¿…a¿…à¿…≠¿…Œ¿…Û¿ ¿ '¿ J¿ o¿ à¿ ê¿ ∑¿ ‹¿À¿À$¿ÀI¿ÀÖ¿À®¿À…¿À⁄¿À‚¿ÀË¿ÀÏ¿ÀÌ¿Ã¿ÃE¿ÃK¿Ã}¿ÃÉ¿Ã¡¿Õ¿Õ&¿Õ'¿Õ}¿Õ´¿Õπ¿Õø¿Œ¿Œ
¿Œ¿Œ?¿Œu¿Œ{¿Œ≠¿Œ≥¿ŒÔ¿œ¿œb¿œÉ¿œ°¿œØ¿œµ¿œ∂¿–¿–'¿–s¿–y¿–}¿–~¿–∫¿–Ó¿–Ù¿—2¿—8¿—t¿—ù¿—‡¿“¿“¿“-¿“3¿“4¿“ä¿“•¿“Ì¿“Û¿“˜¿“¯¿”2¿”S¿”a¿”g¿”Ü¿”´¿”±¿”„¿”¯¿”˛¿‘¿‘¿‘P¿‘e¿‘k¿‘{¿‘Å¿‘…¿’¿’M¿’í¿’π¿÷¿÷R¿÷Å¿÷î¿÷ö¿÷õ¿÷¿◊¿◊8¿◊N¿◊O¿◊u¿◊Æ¿◊¯¿ÿ>¿ÿ?¿ÿç¿ÿ∑¿ÿÎ¿Ÿ¿Ÿ¿Ÿ?¿ŸG¿ŸM¿Ÿ^¿Ÿb¿Ÿc¿Ÿ´¿Ÿ±¿Ÿı¿⁄(¿⁄h¿⁄î¿⁄ö¿⁄Ì¿€¿€z¿€©¿€Œ¿‹!¿‹n¿‹ª¿›¿›9¿›K¿›ù¿›¡¿›‚¿ﬁ	¿ﬁZ¿ﬁ§¿ﬁ¿ﬂ@¿ﬂy¿ﬂä¿ﬂ≥¿ﬂ‹¿ﬂÎ¿ﬂ¯¿‡¿‡¿‡#¿‡Z¿‡`¿‡a¿‡Ñ¿‡Œ¿‡’¿‡Ÿ¿‡⁄¿·%¿·4¿·q¿·™¿·Æ¿‚¿‚O¿‚Å¿‚î¿‚ö¿‚æ¿‚Í¿„	¿„#¿„\¿„i¿„î¿„ü¿„Õ¿„Ï¿‰¿‰@¿‰M¿‰y¿‰Ñ¿‰¥¿‰”¿‰Ì¿Â#¿Â0¿Â]¿Âh¿Â†¿Âø¿ÂŸ¿Ê¿Ê¿ÊM¿ÊX¿Ê_¿Êc¿Êd¿Ê¥¿Êœ¿Ê’¿ÊÂ¿ÊÎ¿Á9¿ÁN¿Áó¿Á◊¿Áÿ¿Ë¿Ëg¿Ë∑¿Ëˇ¿ÈN¿Èñ¿Èø¿ÈÒ¿Í!¿ÍT¿Í£¿Í≤¿Í¿Î,¿Î5¿Î;¿Î<¿ÎÅ¿Îÿ¿Ï&¿ÏÉ¿Ïä¿Ïﬂ¿Ì+¿ÌÉ¿Ìä¿Ìó¿ÌÒ¿ÓG¿ÓN¿ÓR¿ÓS¿Óç¿ÓÀ¿Ó‡¿ÓÊ¿Óˆ¿Ó¸¿ÔK¿Ôz¿Ô±¿Ô¿¿_¿h¿n¿o¿Œ¿È¿Ò)¿Òâ¿Òø¿Ò‡¿Ú
¿Ú0¿ÚR¿ÚY¿Ú]¿Ú^¿Ú™¿ÚÊ¿ÚÏ¿Ú¸¿Û¿ÛP¿Ûò¿ÛÈ¿Ù+¿Ùz¿Ùê¿Ù·¿ı¿ıJ¿ıñ¿ıÊ¿ˆ!¿ˆN¿ˆ}¿ˆ±¿˜¿˜h¿˜√¿¯&¿¯â¿¯¢¿¯√¿˘¿˘0¿˘ê¿˘≠¿˘“¿˙!¿˙=¿˙I¿˙{¿˙¿˙Ä¿˙≈¿˚¿˚T¿˚°¿˚ª¿˚¡¿˚¬¿¸¿¸¿¸:¿¸Y¿¸y¿¸Œ¿¸˘¿˝R¿˝m¿˝ã¿˝¨¿˝Ω¿˛¿˛`¿˛ö¿˛‰¿˛˚¿ˇ¿ˇ*¿ˇ8¿ˇE¿ˇP¿ˇY¿ˇ_¿ˇw¿ˇ{¿ˇ|¿ˇí¿ˇì¿ˇ†¿ˇ¨¿ˇ¡¿ˇÿ¿ ¿ Z¿ ô¿ –¿	¿g¿æ¿›¿·¿‚¿3¿X¿â¿™¿¯¿¸¿˝¿M¿o¿é¿è¿ú¿®¿…¿Ï¿Ì¿˙¿!¿p¿å¿ç¿ﬁ¿¿G¿w¿∏¿æ¿ø¿Ì¿	¿D¿u¿ï¿”¿›¿¿¿¿X¿í¿¡¿Î¿¿)¿f¿Ç¿ä¿ê¿ë¿µ¿‘¿		¿	+¿	à¿	ê¿	ñ¿	ó¿	Œ¿
	¿
¿
¿
¿
i¿
∞¿
‘¿
˙¿¿¿9¿_¿ò¿¥¿º¿˘¿¿¿¿¿Q¿ù¿‰¿4¿d¿π¿
¿\¿b¿f¿g¿t¿Ä¿±¿◊¿¿S¿î¿ø¿≈¿∆¿Î¿1¿x¿À¿¿d¿Æ¿ˆ¿¿O¿É¿…¿Ï¿¿&¿I¿w¿É¿è¿ó¿Á¿¿¿[¿\¿ô¿ˆ¿7¿=¿>¿q¿∞¿È¿¿¿	¿2¿Y¿ã¿ﬂ¿¿a¿Å¿ª¿¡¿¬¿Î¿¿{¿É¿â¿ä¿©¿‚¿?¿G¿M¿N¿y¿ ¿È¿¯¿!¿r¿ê¿±¿Ÿ¿¿'¿P¿y¿†¿´¿≥¿π¿∫¿Ô¿¿¿8¿x¿ì¿‘¿¿3¿9¿=¿>¿l¿†¿œ¿$¿N¿T¿X¿Y¿f¿r¿Ö¿Ø¿‚¿$¿S¿~¿£¿≈¿·¿˙¿ /¿ `¿ Ç¿ †¿ ⁄¿!¿!U¿!z¿!π¿!ÿ¿"¿"&¿"f¿"ê¿"•¿"Û¿"˜¿"¯¿#¿#¿#i¿#o¿#ª¿#ˇ¿$P¿$s¿$y¿$ƒ¿$˜¿%-¿%.¿%:¿%t¿%u¿%Å¿%µ¿&¿&R¿&õ¿&ú¿&Í¿'¿'4¿'B¿'H¿'I¿'u¿'ì¿'Â¿'Ó¿'Ù¿'ı¿(¿(a¿({¿(∂¿(º¿(Í¿(Î¿)¿)R¿)å¿)Œ¿)‹¿)‚¿)„¿*/¿*X¿*{¿*∫¿*Í¿+¿+e¿+ó¿+¶¿+÷¿+ﬁ¿,¿,"¿,I¿,ò¿,ﬁ¿-8¿-T¿-\¿-Ç¿-É¿-™¿-À¿-Î¿.7¿.n¿.o¿.“¿/,¿/m¿/s¿/t¿/´¿/˚¿0*¿0E¿0K¿0L¿0õ¿0È¿16¿1T¿1â¿1ç¿1é¿1…¿2¿2<¿2É¿2æ¿2˝¿3¿3¿3¿3=¿3S¿3w¿3¬¿4
¿4¿4;¿4t¿4~¿4ü¿4æ¿4ﬂ¿5¿5'¿5H¿5¿5™¿5‘¿5ı¿6¿68¿6`¿6´¿6Ù¿7,¿72¿76¿77¿7C¿7å¿7¿¿7ƒ¿7≈¿7—¿8	¿8¿8w¿8~¿8…¿8Õ¿8Œ¿9¿95¿96¿9á¿9î¿9∑¿9∏¿:¿: ¿:!¿:W¿:u¿:v¿:«¿;¿;]¿;∂¿;∑¿;√¿;ˇ¿<G¿<x¿<ì¿<Ω¿<¯¿=*¿=R¿=\¿=ì¿=ƒ¿=˜¿>H¿>j¿>ï¿>ñ¿>Ω¿>Ì¿?¿?\¿?á¿?¨¿?ˆ¿@¿@+¿@Y¿@ì¿@Õ¿@⁄¿A8¿AB¿AC¿Aq¿A√¿A˘¿B)¿B4¿Be¿B≈¿B¿C:¿Cù¿Cû¿D¿DA¿Dñ¿D°¿E¿E)¿EL¿Ei¿E°¿EË¿F¿FT¿Fe¿Fï¿Fª¿F»¿F“¿Fÿ¿F‹¿F›¿G¿G$¿Gà¿Gø¿GÁ¿H¿H#¿H?¿HH¿Hë¿H€¿I&¿Ip¿Iê¿Ië¿I·¿J0¿J¿JŒ¿K¿K¿K_¿K•¿KÌ¿L/¿Lb¿L·¿M¿M<¿Mh¿Ms¿M{¿Mõ¿Mª¿M‹¿M˝¿N
¿NP¿N∞¿O¿O¿O9¿Oa¿O¿Oõ¿Oæ¿O«¿OÕ¿O—¿O“¿Oˇ¿PP¿Põ¿P«¿P”¿P¯¿Q¿Q=¿Q\¿Q~¿Qò¿Q∏¿R¿R¿R&¿R.¿R;¿Ry¿R…¿S
¿S4¿SO¿Si¿Sé¿S∫¿Sﬂ¿T¿T)¿TN¿T}¿T¢¿T»¿Tˆ¿U¿UF¿Uk¿Uï¿Uæ¿UÏ¿Uˆ¿U˛¿V¿V¿VG¿Vf¿Vt¿Vz¿V{¿Væ¿V»¿VË¿W	¿W)¿WF¿Wf¿W~¿Wú¿WÍ¿Wı¿W˛¿X¿X¿XS¿X§¿XÒ¿Y¿YZ¿Ya¿Y≤¿Z¿ZP¿Z^¿Zw¿Zõ¿Z°¿Z•¿Z¶¿Z¡¿Z¬¿[¿[S¿[Y¿[®¿[˘¿\¿\/¿\I¿\M¿\N¿\û¿\Î¿\Ò¿]>¿]J¿]b¿]|¿]à¿]§¿]Û¿]˙¿^#¿^'¿^(¿^U¿^å¿^ö¿^†¿^–¿_
¿_¿_¿_U¿_à¿_å¿_ç¿_«¿_Ó¿`¿`¿`¿`K¿`|¿`}¿` ¿a¿ah¿a|¿aÅ¿aÕ¿b¿bl¿b}¿b≥¿bÒ¿c<¿cB¿cC¿cv¿cô¿c∂¿c∑¿c–¿cÈ¿d¿dF¿d~¿dÕ¿e¿eb¿eâ¿eñ¿e‰¿f5¿fk¿fú¿fπ¿f‘¿g¿g(¿g)¿gB¿gw¿g∏¿h¿h>¿hD¿hE¿hì¿h¶¿h”¿i¿i8¿ij¿iq¿ir¿i∫¿j¿j¿j¿jl¿j{¿jò¿jÌ¿jÓ¿k¿kJ¿kj¿kì¿k°¿kß¿k«¿k˘¿k˙¿lI¿lé¿l§¿l≠¿l˙¿mG¿mò¿mπ¿m÷¿n¿ns¿nÃ¿nÌ¿o¿o6¿oJ¿os¿oò¿o¡¿oÍ¿p¿p¿pA¿pS¿po¿pæ¿pÈ¿q¿q"¿qW¿qd¿qà¿qé¿qí¿qì¿qº¿q€¿r ¿r#¿rR¿rr¿rë¿ró¿rõ¿rú¿rÀ¿s¿s)¿sF¿sm¿só¿sù¿s°¿s¢¿sŒ¿sÙ¿t¿t)¿t/¿tW¿tä¿té¿tè¿t⁄¿tﬂ¿u,¿uy¿u®¿uŒ¿u˜¿v8¿vF¿vL¿vo¿vê¿vΩ¿væ¿w!¿wO¿wï¿wÊ¿x¿x¿x#¿x2¿xD¿xk¿xé¿xµ¿x‹¿y¿y	¿y*¿yY¿y]¿y^¿yj¿y≈¿yÒ¿z¿z%¿z+¿z/¿z0¿z<¿zX¿zw¿zØ¿z“¿{¿{#¿{)¿{-¿{.¿{r¿{æ¿{“¿{˝¿{˛¿|K¿|`¿|~¿|•¿|‚¿|Ê¿|Á¿}¿}/¿}o¿}s¿}t¿}≠¿}≥¿~¿~O¿~ù¿~Ï¿¿&¿;¿Y¿f¿Ç¿ô¿Ä¿Ä¿Ä¿Ä¿Ä@¿Äe¿Ä|¿Äß¿Ä∂¿Ä‹¿Ä˛¿Å¿Å¿Å¿Å¿Å_¿Åô¿Å∑¿Å”¿ÅÔ¿Ç¿Ç¿Ç¿Çh¿Çï¿Çﬁ¿É$¿É(¿É)¿É~¿É•¿Éπ¿Éø¿ÉÎ¿ÑD¿Ñõ¿Ñ∫¿ÑÛ¿Ö;¿Öj¿Ö~¿ÖÑ¿Ö©¿Öÿ¿Ü¿ÜY¿Ün¿Üv¿Üß¿Ü≠¿Üø¿Ü√¿Üƒ¿á¿áW¿áµ¿á√¿á…¿áÂ¿à6¿àÖ¿àî¿àÏ¿â¿âH¿âÑ¿â¬¿ä¿ä5¿ä;¿ä?¿ä@¿ä`¿äò¿ä ¿äÓ¿ãQ¿ãw¿ã¡¿ãÍ¿å¿åC¿åJ¿åd¿åï¿å≈¿å‰¿ç¿ç¿ç¿ç¿ç>¿çÉ¿ç•¿ç≥¿çπ¿ç„¿é¿é¿é#¿ée¿éÇ¿éâ¿é◊¿è$¿ès¿èß¿è⁄¿ê¿ê¿ê%¿êI¿êp¿ê°¿ê€¿ê˙¿ë
¿ë¿ët¿ëó¿ëÿ¿í%¿íD¿íz¿íœ¿ì(¿ìP¿ìà¿ìª¿ìÀ¿ì”¿î¿î\¿îä¿î∏¿î»¿î–¿î—¿î¸¿ï¿ï¿ï@¿ïÑ¿ï≥¿ïÀ¿ï›¿ïÁ¿ñ¿ñO¿ñå¿ñ≈¿ó¿ó4¿ón¿óy¿óÆ¿ó˚¿ó¸¿ò&¿òU¿ò©¿ò¬¿òÚ¿ò¸¿ô2¿ô8¿ô<¿ô=¿ôq¿ôœ¿ôı¿öB¿öz¿öì¿öú¿öœ¿öˇ¿õR¿õh¿õp¿õ¿¿õ∆¿õ◊¿õ€¿õ‹¿ú¿úi¿ú±¿úŸ¿úÒ¿ù¿ù&¿ùQ¿ùÑ¿ù≥¿ù◊¿û
¿û)¿û\¿ûõ¿ûµ¿ûÙ¿ü	¿ü2¿ül¿ü}¿ü∫¿ü¡¿ü¬¿üﬂ¿ü„¿ü‰¿†¿†i¿†∏¿°¿°)¿°_¿°ß¿°µ¿°ª¿°º¿°È¿°Í¿¢.¿¢r¿¢∂¿¢Ù¿£"¿£7¿£H¿£t¿£õ¿£»¿£Ù¿§¿§E¿§o¿§ä¿§µ¿§ª¿•¿•0¿•P¿•]¿•Ñ¿•ª¿• ¿•ı¿•˝¿¶D¿¶l¿¶r¿¶ø¿¶Ê¿ß¿ß(¿ßa¿ßÇ¿ß¢¿ßø¿ßﬂ¿ß˜¿®¿®i¿®t¿®}¿®É¿®Ñ¿®‘¿©¿©:¿©U¿©[¿©_¿©`¿©•¿©Ù¿™6¿™7¿™c¿™d¿™ß¿™Œ¿™‹¿™‚¿´
¿´L¿´w¿´ƒ¿¨¿¨<¿¨ä¿¨Æ¿¨È¿≠¿≠$¿≠,¿≠-¿≠q¿≠r¿≠¿¿≠˙¿Æ4¿Æn¿Æí¿ÆÊ¿ØG¿Øú¿Ø…¿Øﬂ¿ØÍ¿∞,¿∞â¿∞ë¿∞í¿∞Ó¿∞Ô¿±S¿±°¿±¢¿±¡¿≤¿≤&¿≤P¿≤_¿≤º¿≥¿≥W¿≥}¿≥£¿≥œ¿≥‡¿≥˘¿¥5¿¥f¿¥ô¿¥£¿¥´¿¥¨¿¥«¿¥Ï¿µ¿µ8¿µ_¿µj¿µè¿µ«¿µÙ¿∂¿∂&¿∂5¿∂l¿∂ø¿∂«¿∂ı¿∂˘¿∂˙¿∑¿∑¿∑+¿∑G¿∑[¿∑i¿∑o¿∑°¿∑€¿∏¿∏M¿∏É¿∏æ¿π¿πg¿π°¿π©¿πØ¿π‚¿πÊ¿πÁ¿∫$¿∫.¿∫í¿∫ì¿∫°¿∫…¿ª¿ª(¿ª)¿ªã¿ª—¿ª“¿ªÛ¿ºP¿º`¿ºh¿ºi¿º©¿º÷¿º˜¿Ω¿Ω4¿ΩT¿Ωl¿Ωä¿Ωœ¿Ω⁄¿Ω„¿ΩÈ¿ΩÌ¿ΩÓ¿æ¿æ6¿æR¿æv¿æò¿æü¿æÕ¿ø¿øf¿øØ¿ø∞¿øÿ¿¿,¿¿}¿¿å¿¿€¿¡+¿¡z¿¡ ¿¬¿¬¿¬ ¿¬\¿¬q¿¬º¿¬¸¿√¿√ ¿√!¿√x¿√¢¿√¨¿√œ¿√Ò¿ƒ¿ƒ2¿ƒL¿ƒl¿ƒ∂¿ƒ√¿ƒŒ¿ƒ÷¿ƒ‹¿ƒ›¿≈$¿≈%¿≈r¿≈≥¿≈…¿≈›¿∆.¿∆y¿∆Ã¿∆‹¿∆¯¿«¿«M¿«ä¿«¬¿»¿»¿»D¿»l¿»x¿»•¿»»¿»Í¿…	¿…+¿…E¿…e¿…ß¿…¥¿…ø¿…«¿…Õ¿…·¿…Â¿…Ê¿ ¿ -¿ M¿ o¿ u¿ ö¿ π¿ ⁄¿À9¿Àg¿Àq¿Àí¿Àµ¿Àÿ¿À˚¿Ã.¿Ãr¿Ã†¿ÃÔ¿Õ¿Õ+¿Õ5¿Õ;¿Õ?¿Õ@¿Õ^¿Õå¿Õ¥¿Õﬂ¿ÕÊ¿Œ9¿Œ_¿Œ|¿Œÿ¿Œ‹¿Œ›¿Œˇ¿œ¿œ8¿œS¿œl¿œî¿œï¿œ‚¿–¿–+¿–y¿–z¿–»¿—¿—7¿—L¿—ã¿—å¿—ƒ¿—Ÿ¿“¿“¿“E¿“e¿“f¿“É¿“è¿“ª¿”¿”¿”)¿”7¿”=¿”Y¿”g¿”m¿”â¿”∏¿”È¿”˜¿”˝¿‘%¿‘I¿‘{¿‘£¿‘∞¿‘˝¿’¿’ ¿’&¿’*¿’+¿’D¿’p¿’ï¿’ﬁ¿÷¿÷"¿÷Q¿÷j¿÷r¿÷x¿÷y¿÷°¿÷ø¿◊¿◊%¿◊A¿◊X¿◊Ñ¿◊∏¿◊‚¿◊Î¿◊¯¿ÿ;¿ÿä¿ÿ•¿ÿ±¿ÿπ¿Ÿ¿Ÿ¿Ÿ!¿Ÿ"¿ŸZ¿Ÿü¿ŸÈ¿⁄@¿⁄\¿⁄u¿⁄è¿⁄∑¿⁄Ω¿⁄¡¿⁄¬¿⁄Ì¿€¿€'¿€N¿€i¿€o¿€s¿€t¿€ö¿€Ã¿‹ ¿‹r¿‹ó¿‹È¿›-¿›s¿›¥¿›∫¿›„¿ﬁ
¿ﬁ:¿ﬁä¿ﬁ´¿ﬁΩ¿ﬁÙ¿ﬁ¸¿ﬂK¿ﬂO¿ﬂP¿ﬂo¿ﬂö¿ﬂ¡¿ﬂÒ¿‡¿‡T¿‡Ö¿‡∆¿‡‰¿·¿·%¿·t¿·ö¿·”¿·€¿·Ë¿‚¿‚0¿‚X¿‚b¿‚h¿‚¿‚É¿‚Ñ¿‚∑¿‚’¿„¿„h¿„æ¿„≈¿„Ê¿‰	¿‰*¿‰C¿‰j¿‰Å¿‰õ¿‰∂¿‰˝¿Â'¿Ây¿Â•¿Â˘¿Ê@¿ÊF¿Ê\¿Ê`¿Êa¿Êä¿Ê…¿Á¿Á5¿Áq¿Á¿ÁÖ¿Áö¿Á ¿ÁÈ¿ÁÌ¿ÁÓ¿Ë¿ËJ¿Ëm¿Ëò¿Ë€¿È#¿È'¿È(¿Èk¿Èã¿Èô¿Èü¿Èº¿È‡¿Í ¿Í4¿Í_¿Íî¿Íõ¿Íü¿Í†¿Í»¿Í…¿Í˛¿ÎS¿Îa¿Îg¿Îh¿Îƒ¿Î˜¿Ï¿Ï¿Ï¿ÏD¿Ï¶¿Ï‹¿Ì.¿Ìf¿Ìm¿Ìn¿Ì´¿Ì…¿ÌÏ¿Ó¿Ó8¿Óõ¿Ó∏¿Óﬁ¿Ô¿Ô(¿Ô/¿Ô0¿ÔX¿Ôf¿Ôå¿Ôﬁ¿¿(¿.¿S¿T¿ç¿®¿ı¿Ò¿ÒX¿Òù¿Ò≈¿Ú¿ÚY¿Ú¶¿ÚØ¿Ú∞¿ÚÔ¿Û¿ÛE¿Ûî¿Ûœ¿Û¸¿Ù¿Ù¿Ù`¿Ùç¿Ù∫¿ÙÁ¿ı7¿ıL¿ı∞¿ıΩ¿ı«¿ıœ¿ıÚ¿ı¯¿ˆ,¿ˆ0¿ˆ1¿ˆ|¿ˆÅ¿ˆ–¿˜¿˜H¿˜M¿˜r¿˜ö¿˜—¿˜Ê¿¯9¿¯¿¯†¿¯Ï¿˘E¿˘K¿˘Ü¿˘ä¿˘ã¿˘“¿˘◊¿˙$¿˙q¿˙∞¿˙µ¿˚¿˚P¿˚†¿˚“¿˚◊¿¸ ¿¸$¿¸c¿¸ñ¿¸§¿¸™¿¸˛¿˝S¿˝Ü¿˝ä¿˝ã¿˝Â¿˝Ê¿˛¿˛¿˛l¿˛ü¿˛Ã¿ˇ¿ˇ¿ˇ#¿ˇV¿ˇW¿ˇ°¿ˇ¢¿ˇÆ¿ ¿ L¿ ö¿ ª¿¿'¿^¿d¿e¿µ¿¿M¿r¿ö¿∏¿·¿¿"¿0¿6¿7¿t¿x¿y¿Ö¿≥¿˝¿I¿J¿}¿∑¿ª¿º¿¿¿Z¿û¿™¿¡¿¿b¿≤¿˝¿>¿`¿t¿z¿{¿†¿¥¿∫¿È¿˝¿¿'¿E¿k¿∫¿¿	¿	N¿	£¿	Ù¿
F¿
L¿
]¿
a¿
b¿
n¿
û¿
‰¿¿%¿P¿q¿∞¿‰¿¿¿¿¿D¿v¿Ÿ¿¿&¿3¿H¿N¿R¿S¿°¿»¿Ù¿@¿é¿ª¿Ù¿¿4¿O¿t¿õ¿˜¿B¿ë¿•¿´¿¨¿∏¿¿D¿à¿ù¿§¿•¿ˆ¿Q¿Y¿j¿n¿o¿¥¿‹¿‚¿)¿P¿V¿¶¿Œ¿¸¿!¿/¿5¿6¿g¿°¿Æ¿Ê¿Ï¿¿Ò¿¿6¿[¿i¿o¿p¿°¿À¿—¿’¿÷¿"¿-¿2¿}¿√¿‰¿Â¿Ò¿¿A¿O¿U¿V¿Ü¿î¿ö¿õ¿≠¿ ¿¿¿¿¿:¿~¿å¿í¿ì¿•¿∆¿Œ¿“¿”¿ﬂ¿¿N¿O¿i¿´¿œ¿ˇ¿¿¿¿¿¿S¿T¿d¿e¿q¿ß¿˛¿6¿T¿y¿•¿—¿¿¿I¿J¿q¿î¿´¿—¿Ú¿¿@¿o¿û¿—¿¿$¿H¿Ç¿™¿—¿¿;¿o¿∫¿“¿ 	¿ *¿ r¿ y¿ }¿ ~¿ ä¿ –¿ —¿ ˝¿!#¿!$¿!0¿!j¿!|¿!ø¿!«¿!À¿!Ã¿"¿"6¿"O¿"î¿"≤¿#¿#¿#<¿#t¿#~¿#é¿#í¿#ì¿#÷¿#¸¿$¿$Z¿$w¿$ ¿$Ÿ¿$˛¿%5¿%?¿%O¿%S¿%T¿%ô¿%ø¿%ÿ¿&¿&<¿&ñ¿&◊¿&Ê¿'¿'A¿'K¿'[¿'_¿'`¿'≤¿'˛¿(¿(C¿(\¿(n¿(ç¿(ì¿(≥¿(Õ¿(›¿)7¿)ê¿)Ë¿*<¿*â¿*µ¿*π¿*∫¿+¿+;¿+@¿+ç¿+‹¿,*¿,t¿,◊¿,˜¿-¿-1¿-S¿-Ä¿-¶¿-÷¿-‡¿.0¿.m¿.ª¿.Â¿/K¿/Å¿/•¿/ ¿/–¿0¿0P¿0ú¿0Ì¿14¿1~¿1«¿1⁄¿1Ú¿2O¿2z¿2Ñ¿2›¿2·¿2‚¿34¿35¿3\¿3π¿3ﬂ¿4B¿4a¿4∞¿4˜¿5<¿5=¿5á¿5Ÿ¿5›¿5ﬁ¿6&¿6A¿6G¿6ê¿6±¿6∑¿6¯¿78¿7f¿7è¿7ª¿7…¿7œ¿7–¿7ı¿8+¿8g¿8Ω¿8Œ¿8Ì¿8˙¿9¿9!¿99¿9?¿9v¿9w¿9ó¿9Ø¿9Ω¿9‰¿:¿:G¿:l¿:ò¿:Á¿:Ú¿:˚¿;!¿;(¿;,¿;-¿;y¿; ¿;À¿;˚¿<)¿<x¿<ó¿<µ¿<º¿<Ù¿<ı¿=@¿=ç¿=‹¿=˜¿>¿>;¿>A¿>E¿>F¿>•¿>¡¿>∆¿>«¿?¿?7¿?Å¿?õ¿?⁄¿?Á¿@¿@!¿@%¿@&¿@k¿@Å¿@ß¿@⁄¿@Ë¿@Ó¿@Ô¿A/¿AO¿Aâ¿Aó¿Aù¿Aû¿AÔ¿B3¿BÅ¿Bè¿Bï¿Bñ¿BÍ¿C=¿Ci¿Cå¿C¨¿CÃ¿C”¿C˝¿D¿D¿D<¿D@¿DA¿Dê¿D¨¿D¿E¿E¿E$¿E%¿EL¿E¶¿E˙¿F=¿FK¿F_¿F™¿F“¿F€¿F‚¿G"¿G<¿G}¿Gç¿Gï¿G¿HC¿Hi¿H£¿H‹¿I@¿Ií¿Iü¿Iœ¿Iﬂ¿IÁ¿JB¿Jh¿Jù¿JÀ¿K/¿KÅ¿Ká¿Kà¿K±¿K—¿L¿L(¿L/¿L3¿L4¿Ll¿Lx¿L«¿MT¿M[¿Mg¿M¥¿NA¿NH¿NI¿Nx¿Nò¿NÁ¿N˚¿O¿O¿O¿OK¿Oî¿Oï¿OÁ¿P
¿P\¿P]¿Pï¿PÕ¿PÁ¿P˙¿Q ¿Q,¿Q0¿Q1¿Qy¿Q¿Q“¿R¿R2¿RA¿Rõ¿R¢¿R¶¿Rß¿RÒ¿SA¿Sl¿Sü¿S‚¿T5¿T6¿TD¿Tq¿T‘¿T€¿U¿UJ¿UX¿Us¿Uî¿Uù¿U§¿U”¿V,¿V3¿V4¿VQ¿Vâ¿VÕ¿V€¿V˜¿W¿WD¿WM¿WT¿Wá¿W‹¿W„¿X"¿Xm¿X{¿Xñ¿X∑¿X‚¿XÎ¿XÚ¿Y6¿YÜ¿Yî¿Y∞¿Y—¿Y¸¿Z¿Z¿ZD¿Zà¿Zñ¿Z™¿Z«¿ZÚ¿Z˚¿[¿[g¿[Ã¿\¿\~¿\å¿\®¿\…¿\Ù¿\˝¿]¿]C¿]é¿]ú¿]∑¿]ÿ¿^¿^¿^¿^a¿^ª¿^…¿^‰¿_¿_0¿_9¿_@¿_v¿_—¿_ÿ¿`¿`¿`4¿`l¿`∞¿`æ¿`“¿`Ô¿a¿a2¿a;¿aB¿aÅ¿aÃ¿a⁄¿aı¿b¿b=¿bU¿br¿b{¿bÇ¿bÉ¿bï¿bÿ¿c#¿cJ¿cq¿c∏¿c¡¿c»¿c…¿d¿dk¿dp¿dq¿d~¿dä¿d±¿dﬂ¿e¿e ¿ef¿e»¿e˛¿fP¿fà¿fè¿fê¿f±¿fﬁ¿g¿g¿g3¿gK¿gw¿gû¿g≈¿g·¿g˝¿h,¿há¿h•¿h⁄¿i¿i<¿iÉ¿iπ¿iÂ¿j¿jv¿jã¿jÓ¿k%¿kI¿k_¿k`¿kå¿kØ¿k≈¿k∆¿k˚¿l*¿l[¿lé¿lø¿lÚ¿mB¿mê¿m∏¿m“¿n¿nd¿nƒ¿nÂ¿o¿o¿o¿oX¿oö¿oØ¿oÔ¿pE¿pù¿pÙ¿q/¿qz¿qø¿q‡¿qı¿r$¿rY¿ry¿r™¿r◊¿s¿sb¿s¨¿sÓ¿t ¿tF¿t_¿tà¿tµ¿tÈ¿uI¿uÄ¿u∑¿u¸¿v9¿vî¿vÏ¿w+¿wS¿wà¿wº¿w„¿x8¿xë¿xÕ¿y¿y0¿yr¿y≤¿yˆ¿z/¿zj¿zÆ¿zÎ¿{&¿{`¿{¶¿{…¿|¿|?¿|v¿|«¿}¿}U¿}à¿}«¿~ ¿~k¿~¨¿~Î¿$¿c¿¢¿ﬂ¿Ä"¿ÄV¿Äµ¿Å¿Å^¿Å£¿ÅË¿Ç)¿Çl¿Çß¿Çﬂ¿É$¿Éx¿É√¿Ñ¿Ñ[¿Ñè¿ÑÍ¿Ö/¿Öv¿ÖΩ¿Ü¿Üj¿Üø¿á¿át¿áµ¿á˛¿àL¿à•¿àÏ¿â¿â4¿âU¿ât¿âë¿â¨¿â≈¿â‹¿âÒ¿ä¿ä¿ä$¿ä1¿ä<¿äE¿äL¿äP¿äQ¿äÖ¿äã¿ä–¿ã¿ã9¿ãW¿ãx¿ãÆ¿ã¯¿å<¿å\¿å|¿åò¿å°¿å»¿ç¿çO¿çp¿ç ¿é ¿éO¿éY¿éa¿éì¿éô¿éÏ¿è<¿èç¿èß¿ê¿êq¿êã¿ê´¿ê◊¿ë¿ë¿ë'¿ë6¿ëP¿ë®¿ë≥¿ëª¿ë“¿ëÈ¿í	¿íR¿ím¿í≥¿íæ¿í«¿íÕ¿ì¿ì1¿ìÑ¿ì÷¿î$¿î¿îÄ¿îﬁ¿îﬂ¿ï¿ï$¿ïG¿ïW¿ïé¿ï™¿ï≥¿ïπ¿ï∫¿ïÒ¿ñ¿ñ5¿ñJ¿ñn¿ñu¿ñy¿ñ{¿ñ|¿ñ≥¿ñ¡¿ñ–¿ñÓ¿ó¿ó/¿óU¿ók¿óã¿ó©¿ó∆¿ó‚¿óˇ¿ò!¿ò=¿òY¿òl¿òá¿òú¿òµ¿ò”¿ò¿ô¿ô"¿ôH¿ôg¿ôÅ¿ô™¿ô…¿ô‡¿ô˜¿ö¿ö?¿öx¿öØ¿ö€¿õ¿õ(¿õB¿õ\¿õ|¿õŒ¿õœ¿õÓ¿ú¿ú*¿úR¿úx¿úû¿ú∆¿úﬁ¿úı¿ù¿ù#¿ù:¿ùP¿ùp¿ùè¿ùÆ¿ùÀ¿ù¿û¿û+¿ûE¿ûu¿ûú¿ûª¿û‡¿û¸¿ü¿ü8¿üU¿üx¿ü®¿ü÷¿üˇ¿†4¿†U¿†y¿†ô¿†¥¿†µ¿†¡¿†˝¿°¿°0¿°P¿°Ç¿°∞¿°‰¿¢¿¢¿¢8¿¢R¿¢l¿¢Ü¿¢û¿¢º¿¢‚¿£ ¿£¿£@¿£~¿£†¿£∂¿£„¿§¿§1¿§_¿§Ö¿§•¿§«¿§È¿•¿•=¿•o¿•ü¿•›¿¶¿¶;¿¶c¿¶ã¿¶≠¿¶¥¿¶∏¿¶π¿¶≈¿ß¿ß%¿ß?¿ßa¿ßï¿ß≈¿ß˚¿®¿®9¿®U¿®q¿®ç¿®©¿®√¿®„¿©¿©+¿©I¿©o¿©Ø¿©”¿©Î¿™¿™J¿™r¿™¢¿™ƒ¿™Ê¿´
¿´.¿´R¿´Ü¿´∏¿´¯¿¨.¿¨Z¿¨é¿¨∏¿¨‹¿≠	¿≠¿≠¿≠¿≠¿≠5¿≠Q¿≠o¿≠å¿≠≠¿≠À¿≠Ò¿Æ¿Æ*¿ÆI¿Æa¿Æg¿Æh¿ÆÖ¿Æ™¿Æ…¿Æ˘¿Ø¿Ø1¿ØJ¿Ø]¿Ø|¿Ø}¿Ø≥¿Ø’¿Ø˛¿∞¿∞!¿∞I¿∞y¿∞£¿∞·¿±)¿±K¿±w¿±£¿±ø¿≤¿≤¿≤ ¿≤!¿≤S¿≤p¿≤â¿≤¶¿≤≈¿≤Ì¿≥¿≥¿≥¿≥%¿≥B¿≥a¿≥å¿≥¢¿≥£¿≥Ø¿≥ı¿≥˜¿≥¯¿¥T¿¥Æ¿¥Ø¿¥ª¿¥–¿¥Á¿µ¿µC¿µI¿µM¿µN¿µZ¿µë¿µ∑¿µÁ¿∂)¿∂/¿∂0¿∂`¿∂û¿∂§¿∂®¿∂©¿∂µ¿∂»¿∑¿∑¿∑¿∑¿∑F¿∑ñ¿∑ó¿∑¿¿∑„¿∑‰¿∑¿∏&¿∏'¿∏3¿∏[¿∏Ä¿∏€¿∏˛¿π¿π¿π¿π4¿π^¿πã¿πü¿π•¿πŒ¿π‚¿πË¿∫¿∫(¿∫.¿∫n¿∫†¿ª¿ªU¿ªY¿ªZ¿ªf¿ªz¿ªø¿ªÛ¿º¿º¿ºI¿ºo¿ºÄ¿ºº¿º√¿º«¿º»¿º‘¿º˚¿Ω¿Ω¿Ω¿Ω¿ΩK¿Ωï¿Ωñ¿ΩÛ¿æ¿æ¿æ¿æ!¿æD¿æv¿æ£¿æ™¿æÃ¿æı¿ø	¿øO¿øU¿øï¿ø©¿øæ¿øƒ¿ø»¿ø ¿øÀ¿¿¿¿¿¿a¿¿¨¿¿¯¿¡;¿¡å¿¡€¿¡Ê¿¡Í¿¬:¿¬Q¿¬U¿¬c¿¬g¿¬¨¿¬›¿√.¿√f¿√ñ¿√æ¿√ø¿√’¿√÷¿ƒ'¿ƒS¿ƒú¿ƒÊ¿≈&¿≈*¿≈+¿≈7¿≈g¿≈ê¿≈£¿≈©¿≈¬¿≈“¿≈ÿ¿≈¸¿∆¿∆¿∆:¿∆Q¿∆W¿∆X¿∆ù¿∆°¿∆¢¿∆Æ¿∆ﬂ¿«¿«'¿«-¿«E¿«U¿«[¿«É¿«û¿«§¿«¡¿«ÿ¿«ﬁ¿«ﬂ¿»,¿»0¿»2¿»3¿»Ñ¿»ﬂ¿…/¿…0¿…Q¿…Ç¿…±¿…≤¿…Ô¿ G¿ U¿ [¿ °¿ ¿À¿À-¿À4¿À^¿À´¿ÀÔ¿Ã¿Ã6¿Ã<¿Ã@¿ÃA¿ÃM¿ÃÉ¿Ãø¿Ã›¿Ã¿Ãˆ¿Õ¿Õ]¿Õ°¿Õ√¿Œ¿Œ6¿Œõ¿ŒÍ¿ŒÛ¿œ8¿œN¿œZ¿œi¿œë¿œö¿œŒ¿–¿–¿–¿–t¿–u¿–®¿–∫¿–”¿—$¿—O¿—®¿—ƒ¿—À¿“¿“"¿“,¿“A¿“g¿“n¿“†¿“ÿ¿“‹¿“›¿“È¿”A¿”C¿”D¿”è¿”Æ¿”Ã¿”‹¿”ˆ¿‘¿‘C¿‘^¿‘~¿‘Ñ¿‘Ö¿‘¶¿‘–¿‘Á¿’¿’4¿’b¿’c¿’é¿’è¿’Ÿ¿’Ò¿÷'¿÷R¿÷î¿÷ª¿÷¬¿÷‡¿◊¿◊r¿◊v¿◊w¿◊Ω¿◊◊¿ÿ¿ÿ<¿ÿÄ¿ÿá¿ÿß¿ÿƒ¿Ÿ¿Ÿ"¿Ÿ#¿Ÿ/¿Ÿe¿Ÿ°¿Ÿ¿¿Ÿ¡¿⁄ ¿⁄w¿⁄î¿⁄¶¿⁄≈¿⁄›¿€:¿€d¿€o¿€x¿€~¿€¿€´¿€˙¿‹1¿‹S¿‹ê¿‹∆¿›¿›d¿›l¿›r¿›s¿›ï¿›©¿›¡¿›˝¿ﬁ;¿ﬁq¿ﬁ£¿ﬁπ¿ﬁ“¿ﬁŸ¿ﬂ ¿ﬂU¿ﬂâ¿ﬂ†¿ﬂÙ¿‡!¿‡"¿‡H¿‡m¿‡ß¿‡Ï¿‡˚¿·¿·x¿·ì¿·£¿·¯¿·ˇ¿‚¿‚¿‚¿‚N¿‚P¿‚Q¿‚¶¿‚≈¿‚˘¿‚˙¿„¿„¿„N¿„n¿„o¿„£¿„⁄¿„˙¿‰&¿‰4¿‰:¿‰f¿‰¥¿‰ÿ¿‰¸¿Â$¿Âf¿Â™¿Â…¿ÂÏ¿Ê¿Ê¿Ê¿Ê¿Ê¿ÊR¿Ê~¿Ê¿Êﬁ¿Á.¿ÁR¿Á`¿Áf¿Ág¿Áô¿Áº¿Áÿ¿Áﬁ¿Áﬂ¿Ë¿Ë/¿Ëê¿Ëë¿Ë≠¿ËÌ¿È¿Èd¿Èr¿Èè¿È≥¿È‹¿Èˇ¿Í¿Í3¿ÍP¿ÍÜ¿Í≥¿Í⁄¿ÍÙ¿Î(¿Î[¿Î\¿Îp¿ÎÄ¿Î“¿ÎŸ¿Ï¿Ï4¿ÏX¿Ï^¿Ïb¿Ïc¿Ïo¿Ï≠¿ÏØ¿Ï∞¿ÏÙ¿Ì¿Ì¿Ì6¿Ì7¿ÌC¿Ìã¿Ì¶¿Ì∂¿Ì”¿ÌÈ¿Ó7¿ÓM¿ÓV¿Ó]¿Óa¿Ób¿Ón¿Ó´¿Ó≠¿ÓÆ¿Ó˙¿Ô¿Ô¿Ô@¿ÔA¿ÔM¿Ôñ¿Ô∫¿Ô‚¿ÔÔ¿¿¿"¿#¿/¿î¿ñ¿ó¿’¿ˆ¿˙¿ÒE¿Òk¿ÒØ¿Òª¿Ò¿ÒÒ¿Ò˝¿Ú¿Ú8¿Ú<¿Ú>¿Ú?¿Úô¿Úº¿ÚΩ¿Ú…¿Û¿Û`¿ÛÖ¿Û®¿Û«¿ÛÍ¿Ù:¿Ùä¿Ù∫¿ÙÂ¿Ùˇ¿ı)¿ı7¿ıb¿ıé¿ı¬¿ıÔ¿ˆ¿ˆE¿ˆô¿ˆ£¿ˆƒ¿ˆÂ¿˜¿˜,¿˜2¿˜6¿˜8   ÅÇ/// @docImport 'package:flutter/cupertino.dart';
/// @docImport 'package:flutter/material.dart';
///
/// @docImport 'app.dart';
/// @docImport 'context_menu_controller.dart';
/// @docImport 'form.dart';
/// @docImport 'restoration.dart';
/// @docImport 'restoration_properties.dart';
/// @docImport 'selectable_region.dart';
/// @docImport 'text_selection_toolbar_layout_delegate.dart';0Ç2   ÇGÇ^Ç] ÇcÇxÇwÇzÇàÇã  Ç∑Ç‹Çﬁ   É   É0   ÉY   ÉÇ   É´   É¬   ÉË   Ñ    Ñ$   Ñ9   ÑP   Ñi   Ñë   Ñ¶   ÑÕ   Ñ˚   Ö   Ö3   ÖR   Ök   Öà   Ö°   Öº   Ö·   Ü   Ü&   ÜI   Üu   Üì   Ü≤   ÜÃ   ÜÓ   á   á3   áN   áh   á|   á†   áæ   áÏ   à   à'   à;   àWàÇâ? êYÇªê_ê_  êûbê§ ê§ê∏  ê∫ê…ê»  ê€êÍêÈ  êÚê˘ê¯   ë+ëë  ë2ë=ë=   ëIÄäëbëb  ëuëÉëÇ  ëIëJë◊Å;ëËëË  ë˚í	í  í'í-í,  ë◊ëÿ ìÇ¥ìì  ìRBìR ìRìl  ìmìsìr  ìÖìãìä   ìò+ì≤ì≤  ì«ì’ì’  î	îî îìÈìÚìÚ    î"Ä”î&î&  î.î4î3   î˘Äœï
ï
  ïï!ï   ï)ï4ï3  î˘î˙ ïÃ¶küõüõâ»/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] and [selection] properties need to be changed, set the
/// controller's [value] instead. Setting [text] will clear the selection
/// and composing range.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
///
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://docs.flutter.dev/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ü›Ñå£Ò £Ò§ ÉÁ/// Creates a controller for an editable text field, with no initial selection.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.
///
/// The initial selection is `TextSelection.collapsed(offset: -1)`.
/// This indicates that there is no selection at all ([TextSelection.isValid]
/// is false in this case). When a text field is built with a controller whose
/// selection is not valid, the text field will update the selection when it
/// is focused (the selection will be an empty selection positioned at the
/// end of the text).
///
/// Consider using [TextEditingController.fromValue] to initialize both the
/// text and the selection.
///
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// initial selection is empty (collapsed) and positioned at the beginning
/// of the text (offset is 0).
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.1.dart **
/// {@end-tool}§§§  §§"§g§0§I§(§#§+§2§B§C§K§[§f§`§\§b§mÇ^•1•F•G•P•GÄª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].•Q•d•c  &•p•v•»¶õ•™•é•Ü•Ä•â•ë•í•ó•ò•°•¢•≠•≤•≥•“•Ë•È•Ó¶"¶#¶4¶%¶*¶+¶5¶s¶§¶©¶…¶∞¶™¶≥¶√¶ƒ ¶œLßß+/// The current string the user is editing.   ßÉÂ™T™TÉ/// Updates the current [text] to the given `newText`, and removes existing
/// selection and composing range held by the controller.
///
/// This setter is typically only used in tests, as it resets the cursor
/// position and the composing state. For production code, **consider using the
/// [value] setter to update the [text] value instead**, and specify a
/// reasonable selection range within the new [text].
///
/// Setting this notifies all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases. This property can
/// be set from a listener added to this [TextEditingController]. ™Y™a™`   ´Åu´´  ´´0´/  ´´	±®Ä’≤`≤`Äù/// The currently selected range within [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   ≤ÅÑ"µµÇv/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is outside the composing range, the composing range is
/// cleared. µµ-µ,   ¨ÅÖ#≠U≠UÄ¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. ≠i≠Ä≠  ≠å≠ò≠ó  ≠¢≠±≠∞   ∂ßÇ<∏É∏ÉÅƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ∏ÁÇf∫ˇ∫ˇÅ˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ªQÄ‰ªôªô@/// Check that the [selection] is inside of the composing range. ª∫ª…ª»    º9ÜMæDæDÅó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. æWÅtøT øTøb {/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.øiøoøn  øÄøÜøÖ  øñøúøõ  øÆø¥ø≥  
æŸæ⁄æ‰øJæÍøøuøãø£øøøœs¿ @*¿ @*</// An instance of [ToolbarOptions] with no options enabled.¿ @2¿ @@¿ @A¿ @G\¿ @ü¿ @üF/// Whether to show copy option in toolbar.
///
/// Defaults to false. ¿ @®Ä≤¿ AW¿ AWÄô/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. ¿ A_Ä∏¿ B¿ BÄù/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. ¿ Bg¿ Bz¿ BzL/// Whether to show select all option in toolbar.
///
/// Defaults to false.   Ω—Ω“Ω‹æ<Ω‡æ¿ Bàâ©¿ CË¿ CËÅY/// Configures the ability to insert media content through the soft keyboard.
///
/// The configuration provides a handler for any rich content inserted through
/// the system input method, and also provides the ability to limit the mime
/// types of the inserted content.
///
/// See also:
///
/// * [EditableText.contentInsertionConfiguration] ¿ D
ÅÓ¿ EI ¿ EI¿ Ef Å0/// Creates a content insertion configuration with the specified options.
///
/// A handler for inserted content, in the form of [onContentInserted], must
/// be supplied.
///
/// The allowable mime types of inserted content may also
/// be provided via [allowedMimeTypes], which cannot be an empty list.¿ Em¿ E|¿ E{  ¿ Eí9¿ Eò¿ Eó  ¿ E™¿ E‘¿ E⁄¿ Eˆ¿ E€¿ EÎ¿ EÏ¿ E¸Çv¿ Ha¿ HaÇ/// Called when a user inserts content through the virtual / on-screen keyboard,
/// currently only used on Android.
///
/// [KeyboardInsertedContent] holds the data representing the inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard> ¿ HwÉ∑¿ L¿ LÉe/// {@template flutter.widgets.contentInsertionConfiguration.allowedMimeTypes}
/// Used when a user inserts image-based content through the device keyboard,
/// currently only used on Android.
///
/// The passed list of strings will determine which MIME types are allowed to
/// be inserted via the device keyboard.
///
/// The default mime types are given by [kDefaultContentInsertionMimeTypes].
/// These are all the mime types that are able to be handled and inserted
/// from keyboards.
///
/// This field cannot be an empty list.
///
/// {@tool dartpad}
/// This example shows how to limit image insertion to specific file types.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard>
/// {@endtemplate}    ¿ LuÇu¿ L{¿ L{  ¿ Lâ'¿ Lè ¿ Lè¿ Lò  ¿ Lô	¿ Lü¿ Lû  ¿ L§
¿ L™¿ L©   ¿ LﬁÅú¿ L˚¿ L˚ <¿ M"¿ Ny¿ M¿ M!¿ M¿ M(¿ M1¿ M6¿ M2¿ M5¿ MB¿ MK¿ MR¿ ML¿ MQ¿ M^¿ Mg¿ Mt¿ Mh¿ Mp¿ MÄ¿ Mâ¿ Mî¿ Mä¿ Më¿ M†¿ M©¿ M∂¿ M™¿ M≤¿ M¬¿ MÀ¿ M”¿ MÃ¿ M“¿ Mﬂ¿ MË¿ M¿ MÈ¿ MÔ¿ M¸¿ N¿ N¿ N¿ N¿ N¿ N'¿ N2¿ N(¿ N/¿ N>¿ NG¿ NT¿ NH¿ NP¿ N`¿ Ni¿ Nn¿ Nj¿ Nm¿ N¿¿ NÕ¿ NÕ  ¿ N’¿ N‚¿ N‚     ¿ NÏá™¿ NÚ¿ NÚ  ¿ O%`¿ O%¿ O@¿ OA¿ OQ¿ OA  	¿ OV¿ OZ¿ O[¿ O\¿ OÉ¿ O]¿ Of¿ Og¿ OÇ¿ OàÅß¿ Oà¿ O£¿ O§¿ O•¿ O§ ¿ O¶¿ O¨¿ O´  ¿ O∑¿ OΩ¿ Oº  ¿ Oœ¿ O’¿ OÎ¿ O÷¿ O‡¿ O·¿ OÙ¿ O˙¿ P¿ P¿ O˚¿ P¿ P¿ P
¿ P¿ P¿ P'¿ P-¿ P˚¿ Q-¿ P.¿ P¯¿ P˘¿ P˙¿ P˝¿ Q3¿ Q@¿ Q@  ¿ QP ¿ Qf¿ Qf  ¿ R-¿ R1¿ R1 ¿ RF ¿ Qu(¿ Qà¿ Qà  ¿ Qã¿ Qì¿ Qí  ¿ Qu¿ Qv¿ Q°<¿ Q≤¿ Q≤  ¿ Qπ¿ Q¡¿ Q¿  ¿ Q°¿ Q¢¿ RLÑH¿ R_¿ R_  ¿ Ra¿ Ri¿ Rh  ¿ RL¿ RM ¿ Vò¿>&¿ ê≥¿ ê≥∫/// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement.
///
/// The [EditableText] widget is a low-level widget that is intended as a
/// building block for custom widget sets. For a complete user experience,
/// consider using a [TextField] or [CupertinoTextField].
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts],
/// typically declared in [DefaultTextEditingShortcuts], also use these
/// [Intent]s and [Action]s to perform the text editing operations they are
/// bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                        | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location. |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`)  | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                        | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent page | Moves the caret to the closest position on the previous/next adjacent page. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent page |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Text Editing [Shortcuts]
///
/// It's also possible to directly remap keyboard shortcuts to new [Intent]s by
/// inserting a [Shortcuts] widget above this in the widget tree. When using
/// [WidgetsApp], the large set of default text editing keyboard shortcuts are
/// declared near the top of the widget tree in [DefaultTextEditingShortcuts],
/// and any [Shortcuts] widget between it and this [EditableText] will override
/// those defaults.
///
/// {@template flutter.widgets.editableText.shortcutsAndTextInput}
/// ### Interactions Between [Shortcuts] and Text Input
///
/// Shortcuts prevent text input fields from receiving their keystrokes as text
/// input. For example, placing a [Shortcuts] widget in the widget tree above
/// a text input field and creating a shortcut for [LogicalKeyboardKey.keyA]
/// will prevent the field from receiving that key as text input. In other
/// words, typing key "A" into the field will trigger the shortcut and will not
/// insert a letter "a" into the field.
///
/// This happens because of the way that key strokes are handled in Flutter.
/// When a keystroke is received in Flutter's engine, it first gives the
/// framework the opportunity to handle it as a raw key event through
/// [SystemChannels.keyEvent]. This is what [Shortcuts] listens to indirectly
/// through its [FocusNode]. If it is not handled, then it will proceed to try
/// handling it as text input through [SystemChannels.textInput], which is what
/// [EditableTextState] listens to through [TextInputClient].
///
/// This behavior, where a shortcut prevents text input into some field, can be
/// overridden by using another [Shortcuts] widget lower in the widget tree and
/// mapping the desired key stroke(s) to [DoNothingAndStopPropagationIntent].
/// The key event will be reported as unhandled by the framework and will then
/// be sent as text input as usual.
/// {@endtemplate}
///
/// ## Gesture Events Handling
///
/// When [rendererIgnoresPointer] is false (the default), this widget provides
/// rudimentary, platform-agnostic gesture handling for user actions such as
/// tapping, long-pressing, and scrolling.
///
/// To provide more complete gesture handling, including double-click to select
/// a word, drag selection, and platform-specific handling of gestures such as
/// long presses, consider setting [rendererIgnoresPointer] to true and using
/// [TextSelectionGestureDetectorBuilder].
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// ## Scrolling Considerations
///
/// If this [EditableText] is not a descendant of [Scaffold] and is being used
/// within a [Scrollable] or nested [Scrollable]s, consider placing a
/// [ScrollNotificationObserver] above the root [Scrollable] that contains this
/// [EditableText] to ensure proper scroll coordination for [EditableText] and
/// its components like [TextSelectionOverlay].
///
/// {@template flutter.widgets.editableText.accessibility}
/// ## Troubleshooting Common Accessibility Issues
///
/// ### Customizing User Input Accessibility Announcements
///
/// To customize user input accessibility announcements triggered by text
/// changes, use [SemanticsService.announce] to make the desired
/// accessibility announcement.
///
/// On iOS, the on-screen keyboard may announce the most recent input
/// incorrectly when a [TextInputFormatter] inserts a thousands separator to
/// a currency value text field. The following example demonstrates how to
/// suppress the default accessibility announcements by always announcing
/// the content of the text field as a US currency value (the `\$` inserts
/// a dollar sign, the `$newText` interpolates the `newText` variable):
///
/// ```dart
/// onChanged: (String newText) {
///   if (newText.isNotEmpty) {
///     SemanticsService.announce('\$$newText', Directionality.of(context));
///   }
/// }
/// ```
///
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ ê€òƒ¿ ì† ¿ ì†¿ ì¨ Ç™/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.J¿ ì≥	¿ ì∫¿ ìπ  ¿ ì¬¿ ì—¿ ì–  ¿ ì‡¿ ìÔ¿ ìÓ  ¿ ì˝¿ î¿ î  ¿ î¿ î¿ î  ¿ î;¿ îA¿ î@  ¿ îY¿ î_¿ î^  ¿ îv ¿ îà¿ îá  ¿ îú ¿ îÆ¿ î≠  ¿ î¬¿ î»¿ î«  ¿ îÂ¿ îÙ¿ îÛ  ¿ î˛¿ ï¿ ï
  ¿ ï¿ ï)¿ ï(  ¿ ï9#¿ ïH¿ ïG  ¿ ïb ¿ ïh¿ ïg  ¿ ïà¿ ïé¿ ïç  ¿ ï†¿ ï¶¿ ï•  ¿ ï±Ä˜¿ ñö¿ ñô  ¿ ñÆ¿ ñ¥¿ ñ≥  ¿ ñ√¿ ñ…¿ ñ»  ¿ ñ⁄¿ ñ‡¿ ñﬂ  ¿ ñÌ¿ ñÛ¿ ñÚ  ¿ ó¿ ó¿ ó  ¿ ó"¿ ó(¿ ó'  ¿ ó?+¿ óE¿ óD  ¿ óp¿ óv¿ óu  ¿ óå¿ óì¿ óí  ¿ ó¢!¿ ó®¿ óß  ¿ ó…¿ óœ¿ óŒ  ¿ ó‚¿ óË¿ óÁ  ¿ ó˛¿ ò¿ ò  ¿ ò¿ ò%¿ ò$  ¿ ò91¿ ò?¿ ò>  ¿ òp¿ òv¿ òu  ¿ òÑ¿ òä¿ òâ  ¿ ò†¿ ò¶¿ ò•  ¿ ò∂¿ òº¿ òª  ¿ ò‘¿ ò⁄¿ òŸ  ¿ òÒ¿ ò˜¿ òˆ  ¿ ô¿ ô¿ ô  ¿ ô4¿ ô:¿ ô9  ¿ ôK¿ ôQ¿ ôP  ¿ ôd)¿ ô¿ ô~  ¿ ôì¿ ôô¿ ôò  ¿ ô©#¿ ôØ¿ ôÆ  ¿ ô“¿ ôÿ¿ ô◊  ¿ ôÓ¿ ôÙ¿ ôÛ  ¿ ö¿ ö¿ ö
  ¿ ö"¿ ö"¿ ö!  ¿ öD¿ öJ¿ öI  ¿ ö[!¿ öa¿ ö`  ¿ öÇ3¿ öà¿ öá  ¿ öª1¿ ö¡¿ ö¿  ¿ öÚ/¿ ö¯¿ ö˜  ¿ õ'*¿ õ-¿ õ,  ¿ õW0¿ õ]¿ õ\  ¿ õç ¿ õî¿ õì  ¿ õ≥¿ õπ¿ õ∏  ¿ õŒ¿ õ‘¿ õ”  ¿ õÊ ¿ õÏ¿ õÎ  ¿ úÄõ¿ úö¿ úô  ¿ ú≠%¿ ú≥¿ ú≤  ¿ úÿ¿ úﬁ¿ ú›  ¿ úÒ!¿ ú˜¿ úˆ  ¿ ù¿ ù¿ ù  ¿ ù0¿ ù6¿ ù5  ¿ ùIÄü¿ ù”¿ ù“  ¿ ùÓ?¿ ùÙ¿ ùÛ  ¿ û3)¿ û9¿ û8  ¿ ûb"¿ ûh¿ ûg  ¿ ûä¿ ûê¿ ûè  ¿ ûß¿ û≠¿ û¨  ¿ û…A¿ ûœ¿ ûŒ  ¿ ü¿ ü¿ ü  ÅM¿ î¿ î2¿ îN¿ îl¿ î€¿ ïs¿ ï|¿ ï}¿ ï±¿ ï≤¿ ïº¿ ñé¿ ïƒ¿ ïÂ¿ ñT¿ ñ”¿ ñ¸¿ ó¿ óU¿ óc¿ ód¿ óÅ¿ óæ¿ òS¿ òe¿ òf¿ ô"¿ ô«¿ ôÂ¿ ö9¿ öw¿ öû¿ ö†¿ ö°¿ öØ¿ ö∞¿ ö÷¿ öÿ¿ öŸ¿ öÊ¿ öÁ¿ õ¿ õ¿ õ¿ õ¿ õ¿ õ ¿ õ¿ õA¿ õK¿ õL¿ õp¿ õÅ¿ õÇ¿ ú¿ ú¿ ú¿ úÉ¿ ú¿ úJ¿ ú¬¿ ú–¿ ú—¿ ú»¿ úœ¿ ú…¿ ù¿ ù	¿ ù
¿ ùI¿ ùJ¿ ùT¿ ù«¿ ù\¿ ùç¿ ù‰¿ û¿ ûX¿ ûÁ¿ ü¿ ü¿ ü,¿ ü2¿ üQ¿ üM¿ ü3¿ üE¿ üF¿ üP¿ ük¿ ü[¿ üà¿ üx¿ üã¿ üÃ¿ üò¿ ü≥¿ üå¿ üö¿ ü©¿ ü™¿ üµ¿ üƒ¿ ü≈¿ üÊ¿ ü÷¿ †¿ üÛ¿ †¿ †G¿ †¿ †.¿ †¿ †¿ †$¿ †%¿ †0¿ †?¿ †@¿ †Q¿ †W¿ †x¿ †i¿ †a¿ †X¿ †d¿ †u¿ †l¿ †w¿ †Ç¿ †à¿ †’¿ °¿ †º¿ †¶¿ †ì¿ †§¿ †ù¿ †î¿ ††¿ †©¿ †∫¿ †≥¿ †™¿ †∂¿ †ø¿ †‘¿ †…¿ †¿¿ †Ã¿ †‡¿ °¿ °"¿ °_¿ °≠¿ °6¿ °-¿ °.¿ °9¿ °^¿ °K¿ °C¿ °:¿ °F¿ °W¿ °N¿ °Z¿ °j¿ °∑¿ °Ω¿ °€¿ ¢¿ °À¿ °æ¿ °ø¿ °◊¿ °Œ¿ °⁄¿ °›¿ ¢(¿ ¢¿ ¢E¿ ¢*¿ ¢H¿ ¢b¿ ¢S¿ ¢I¿ ¢J¿ ¢V¿ ¢W¿ ¢{¿ ¢l¿ ¢‚¿ £¿ ¢π¿ ¢ö¿ ¢à¿ ¢ù¿ ¢À¿ ¢º¿ ¢Œ¿ ¢‰¿ ¢Ú¿ ¢Û¿ £¿ £
¿ £/¿ ¶r¿ £S¿ §±¿ £0¿ £U¿ §ò¿ £¸¿ §d¿ £V¿ £˛¿ §¿ §¿ §f¿ §l¿ §z¿ §ó¿ §Ñ¿ §{¿ §Ü¿ §ë¿ §å¿ §ì¿ §≥¿ ¶q¿ •¿ •î¿ §¥¿ •¿ •¿ •%¿ •A¿ •/¿ •&¿ •1¿ •;¿ •7¿ •=¿ •ñ¿ •ú¿ •™¿ ¶p¿ •Õ¿ •…¿ •œ¿ •ı¿ •Ú¿ •˜¿ ¶#¿ ¶¿ ¶%¿ ¶M¿ ¶H¿ ¶O¿ ¶|¿ ¶Ç¿ ßD¿ ß∑¿ ß¿ ¶≠¿ ¶•¿ ¶ç¿ ¶®¿ ¶’¿ ¶Ω¿ ¶ÿ¿ ¶ﬁ¿ ¶ı¿ ¶ˆ¿ ¶˛¿ ¶ˇ¿ ß=¿ ß¿ ß(¿ ß)¿ ß@¿ ßO¿ ßÕ¿ ß¡¿ ßœ¿ ßÔ¿ ß‚¿ ®	¿ ß¸¿ ®¿ ®¿ ®O¿ ®,¿ ®¿ ®.¿ ®E¿ ®=¿ ®G¿ ®i¿ ®Y¿ ®ì¿ ©`¿ ®¿ ®v¿ ®Ç¿ ®©¿ ©O¿ ®ï¿ ®®¿ ®ñ¿ ®º¿ ®◊¿ ®ÿ¿ ®˛¿ ©¿ ©¿ ©¿ ©¿ ©"¿ ©5¿ ©#¿ ©6¿ ©7¿ ©<¿ ©=¿ ©b¿ ©Ö¿ ©z¿ ©í¿ ©á¿ ©ï¿ ©ñK¿ ©£L¿ ©Â¿ ©Â#/// Controls the text being edited. ¿ ©ÙP¿ ™;¿ ™;4/// Controls whether this widget has keyboard focus. ¿ ™IÅ¿ ´U¿ ´UÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ ´lÅ∆¿ ≠'¿ ≠'Åõ/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false.
/// {@endtemplate} ¿ ≠7V¿ ≠{¿ ≠{'/// {@macro dart.ui.textHeightBehavior} ¿ ≠í^¿ ≠‚¿ ≠‚8/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ ≠ıÅ3¿ Ø ¿ Ø Å/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false.
/// {@endtemplate} ¿ Ø-Åj¿ ∞é¿ ∞éÅA/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ ∞úÅe¿ ±Û¿ ±ÛÅ5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ ≤Åq¿ ≥c¿ ≥cÅ?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ ≥|ÅO¿ ¥¡¿ ¥¡Å'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ ¥–Ä¨¿ µq¿ µqÄã/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true.
/// {@endtemplate} ¿ µÅl¿ µﬁ¿ µﬁD/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ µÚl¿ ∂O¿ ∂OD/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ ∂ce¿ ∂∑¿ ∂∑F/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ∂ÕH¿ ∑¿ ∑0/// The text style to use for the editable text. ¿ ∑Äµ¿ ∑¡¿ ∑¡ÄÉ/// Controls the undo state of the current editable text.
///
/// If null, this widget will create its own [UndoHistoryController]. ¿ ΩΩ¿ Ωœ¿ Ωœ  ¿ ΩﬂÄ≈¿ æõ¿ æõÄ°/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start].
/// {@endtemplate} ¿ æ©Ç‚¿ ¡~¿ ¡~Ç°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ ¡êÇ¿ √ç¿ √çÅ«/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none].
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ √§Åi¿ ≈¿ ≈ÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ ≈Ç¯¿ «˚¿ «˚ÅÈ/// {@template flutter.widgets.editableText.textScaleFactor}
/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate}¿ «¿ «¿ «¿ «È¿ «%¿ «D¿ «±¿ »S¿ »X¿ »X4/// {@macro flutter.painting.textPainter.textScaler} ¿ »gH¿ »§¿ »§./// The color to use when painting the cursor. ¿ »¥ÅÚ¿  ã¿  ãÅµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿  ´Åg¿ À˝¿ À˝Å3/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Typically this would be set to [CupertinoColors.inactiveGray].
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿ Ãà¬¿ ‘—¿ ‘—àD/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// const TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// const TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// const TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// const TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ‘ﬁáá¿ ‹]¿ ‹]á/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// const TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ‹jÉ¿ ﬂj¿ ﬂjÇ /// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// const Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ ﬂvÅÓ¿ ·[¿ ·[Å\/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false.
/// {@endtemplate} ¿ ·iÅ§¿ ‚ˇ¿ ‚ˇÅx/// The color to use when painting the selection.
///
/// If this property is null, this widget gets the selection color from the
/// [DefaultSelectionStyle].
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [TextSelectionThemeData.selectionColor]. ¿ „É·¿ Ê‚¿ Ê‚Éé/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles.
///
/// Historically, this field also controlled the toolbar. This is now handled
/// by [contextMenuBuilder] instead. However, for backwards compatibility, when
/// [selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [contextMenuBuilder] is ignored and the
/// [TextSelectionControls.buildToolbar] method is used instead.
/// {@endtemplate}
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform]. ¿ Ê¯Å¿ Ë¿ ËÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ Ëe¿ Ëm¿ Ëm</// The type of action button to use with the soft keyboard. ¿ ËÅâŒ¿ ÚF¿ ÚFâP/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That
/// default behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications.
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes. ¿ ÚTÉ•¿ ıË¿ ıËÉ[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ ı˛Éñ¿ ˘â¿ ˘âÉF/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
///
/// ## Testing
/// The following is the recommended way to trigger [onSubmitted] in a test:
///
/// ```dart
/// await tester.testTextInput.receiveAction(TextInputAction.done);
/// ```
///
/// Sending a `LogicalKeyboardKey.enter` via `tester.sendKeyEvent` will not
/// trigger [onSubmitted]. This is because on a real device, the engine
/// translates the enter key to a done action, but `tester.sendKeyEvent` sends
/// the key to the framework only.
/// {@endtemplate} ¿ ˘ôÑ¿ ˝ú¿ ˝úÉø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ ˝¥ÄÈ¿ ˛ã¿ ˛ãÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ˛¢s¿ ˛˛¿ ˛˛E/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ ˇÅ‡¿ Û¿ ÛÅµ/// {@template flutter.widgets.editableText.groupId}
/// The group identifier for the [TextFieldTapRegion] of this text field.
///
/// Text fields with the same group identifier share the same tap region.
/// Defaults to the type of [EditableText].
///
/// See also:
///
///  * [TextFieldTapRegion], to give a [groupId] to a widget that is to be
///    included in a [EditableText]'s tap region that has [groupId] set.
/// {@endtemplate} ¿ ˇà¬¿	µ¿	µàH/// {@template flutter.widgets.editableText.onTapOutside}
/// Called for each tap down that occurs outside of the [TextFieldTapRegion]
/// group when the text field is focused.
///
/// If this is null, [EditableTextTapOutsideIntent] will be invoked. In the
/// default implementation, [FocusNode.unfocus] will be called on the
/// [focusNode] for this text field when a [PointerDownEvent] is received on
/// another part of the UI. However, it will not unfocus as a result of mobile
/// application touch events (which does not include mouse clicks), to conform
/// with the platform conventions. To change this behavior, a callback may be
/// set here or [EditableTextTapOutsideIntent] may be overridden.
///
/// When adding additional controls to a text field (for example, a spinner, a
/// button that copies the selected text, or modifies formatting), it is
/// helpful if tapping on that control doesn't unfocus the text field. In
/// order for an external widget to be considered as part of the text field
/// for the purposes of tapping "outside" of the field, wrap the control in a
/// [TextFieldTapRegion].
///
/// The [PointerDownEvent] passed to the function is the event that caused the
/// notification. It is possible that the event may occur outside of the
/// immediate bounding box defined by the text field, although it will be
/// within the bounding box of a [TextFieldTapRegion] member.
/// {@endtemplate}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined.
///  * [onTapUpOutside] which is called for each tap up.
///  * [EditableTextTapOutsideIntent] for the intent that is invoked if
///  this is null. ¿	∆Ç∂¿n¿nÇp/// {@template flutter.widgets.editableText.onTapUpOutside}
/// Called for each tap up that occurs outside of the [TextFieldTapRegion]
/// group when the text field is focused.
///
/// The [PointerUpEvent] passed to the function is the event that caused the
/// notification. It is possible that the event may occur outside of the
/// immediate bounding box defined by the text field, although it will be
/// within the bounding box of a [TextFieldTapRegion] member.
/// {@endtemplate}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined.
///  * [onTapOutside], which is called for each tap down. ¿ÅÇ‹¿N¿NÇê/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the user changes the text
/// this widget contains. When this parameter changes, the new formatters will
/// not be applied until the next time the user inserts or deletes text.
/// Similar to the [onChanged] callback, formatters don't run when the text is
/// changed programmatically via [controller].
///
/// See also:
///
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes.
/// {@endtemplate} ¿bÅÿ¿/¿/Åß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿?Ñ?¿h¿hÉÒ/// Whether the caller will provide gesture handling (true), or if the
/// [EditableText] is expected to handle basic gestures (false).
///
/// When this is false, the [EditableText] (or more specifically, the
/// [RenderEditable]) enables some rudimentary gestures (tap to position the
/// cursor, long-press to select all, and some scrolling behavior).
///
/// These behaviors are sufficient for debugging purposes but are inadequate
/// for user-facing applications. To enable platform-specific behaviors, use a
/// [TextSelectionGestureDetectorBuilder] to wrap the [EditableText], and set
/// [rendererIgnoresPointer] to true.
///
/// When [rendererIgnoresPointer] is true true, the [RenderEditable] created
/// by this widget will not handle pointer events.
///
/// This property is false by default.
///
/// See also:
///
///  * [RenderEditable.ignorePointer], which implements this feature.
///  * [TextSelectionGestureDetectorBuilder], which implements platform-specific
///    gestures and behaviors. ¿ÉÇ ¿x¿xÅ—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿àÄÁ¿c¿cÄ¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿tÄ‘¿<¿<ÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿MÅa¿ô¿ôÅ2/// {@template flutter.widgets.editableText.cursorOpacityAnimates}
/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms.
/// {@endtemplate} ¿≥W¿˛¿˛:/// {@macro flutter.rendering.RenderEditable.cursorOffset} ¿d¿_¿_B/// {@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿xÄª¿¿Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿8Ä∏¿›¿›Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ıÄÆ¿ë¿ëÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿®Çö¿ 5¿ 5Çc/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures the padding for the edges surrounding a [Scrollable] when the
/// text field scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example
/// scrolled partially off the screen or overlapped by the keyboard), then it
/// will attempt to make itself visible by scrolling a surrounding
/// [Scrollable], if one is present. This value controls how far from the
/// edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿ GÇ|¿"©¿"©Ç:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿"»Å°¿$I¿$IÅd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿$d¿$ne¿$¬¿$¬9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿$ÿÅ0¿%¯¿%¯Ä˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿&Å„¿'„¿'„Å™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿'ıÅq¿)W¿)WÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate}¿(–¿(—¿(€¿)H¿(·¿)¿)kÉg¿,∫¿,∫É/// {@template flutter.widgets.editableText.stylusHandwritingEnabled}
/// Whether this input supports stylus handwriting, where the user can write
/// directly on top of a field.
///
/// Currently only the following devices are supported:
///
///  * iPads running iOS 14 and above using an Apple Pencil.
///  * Android devices running API 34 and above and using an active stylus.
/// {@endtemplate}
///
/// On Android, Scribe gestures are detected outside of [EditableText],
/// typically by [TextSelectionGestureDetectorBuilder]. This is handled
/// automatically in [TextField].
///
/// See also:
///
///   * [ScribbleClient], which can be mixed into an arbitrary widget to
///     provide iOS Scribble functionality.
///   * [Scribe], which can be used to interact with Android Scribe directly. ¿-˚èÍ¿=ÿ¿=ÿè0/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// Specifying [InputDecoration.hintText] may also help autofill services
/// (like Samsung Pass) determine the expected content type of an input field,
/// although this is typically not required when autofillHints are present.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿=ÍÅ¿>‡¿>‡Ä◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿>Ûv¿?]¿?]X/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿?nÇÓ¿BO¿BOÇ∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿BaÇ¸¿EO¿EOÇπ/// {@template flutter.widgets.editableText.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
/// {@endtemplate}
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿Eb}¿E¬¿E¬R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿E‰ÖÅ¿KH¿KHÖ/// {@template flutter.widgets.editableText.contentInsertionConfiguration}
/// Configuration of handler for media content inserted via the system input
/// method.
///
/// Defaults to null in which case media content insertion will be disabled,
/// and the system will display a message informing the user that the text field
/// does not support inserting media content.
///
/// Set [ContentInsertionConfiguration.onContentInserted] to provide a handler.
/// Additionally, set [ContentInsertionConfiguration.allowedMimeTypes]
/// to limit the allowable mime types for inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// If [contentInsertionConfiguration] is not provided, by default
/// an empty list of mime types will be sent to the Flutter Engine.
/// A handler function must be provided in order to customize the allowable
/// mime types for inserted content.
///
/// If rich content is inserted without a handler, the system will display
/// a message informing the user that the current text input does not support
/// inserting rich content.
/// {@endtemplate} ¿Kjä™¿V¿Vä/// {@template flutter.widgets.EditableText.contextMenuBuilder}
/// Builds the text selection toolbar when requested by the user.
///
/// The context menu is built when [EditableTextState.showToolbar] is called,
/// typically by one of the callbacks installed by the widget created by
/// [TextSelectionGestureDetectorBuilder.buildGestureDetector]. The widget
/// returned by [contextMenuBuilder] is passed to a [ContextMenuController].
///
/// If no callback is provided, no context menu will be shown.
///
/// The [EditableTextContextMenuBuilder] signature used by the
/// [contextMenuBuilder] callback has two parameters, the [BuildContext] of
/// the [EditableText] and the [EditableTextState] of the [EditableText].
///
/// The [EditableTextState] has two properties that are especially useful when
/// building the widgets for the context menu:
///
/// * [EditableTextState.contextMenuAnchors] specifies the desired anchor
///   position for the context menu.
///
/// * [EditableTextState.contextMenuButtonItems] represents the buttons that
///   should typically be built for this widget (e.g. cut, copy, paste).
///
/// The [TextSelectionToolbarLayoutDelegate] class may be particularly useful
/// in honoring the preferred anchor positions.
///
/// For backwards compatibility, when [EditableText.selectionControls] is set
/// to an object that does not mix in [TextSelectionHandleControls],
/// [contextMenuBuilder] is ignored and the
/// [TextSelectionControls.buildToolbar] method is used instead.
///
/// {@tool dartpad}
/// This example shows how to customize the menu, in this case by keeping the
/// default buttons for the platform but modifying their appearance.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to show a custom button only when an email address
/// is currently selected.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.1.dart **
/// {@end-tool}
///
/// See also:
///   * [AdaptiveTextSelectionToolbar], which builds the default text selection
///     toolbar for the current platform, but allows customization of the
///     buttons.
///   * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///     button Widgets for the current platform given
///     [ContextMenuButtonItem]s.
///   * [BrowserContextMenu], which allows the browser's context menu on web
///     to be disabled and Flutter-rendered context menus to appear.
/// {@endtemplate} ¿VÇß¿X©¿X©ÇX/// {@template flutter.widgets.EditableText.spellCheckConfiguration}
/// Configuration that details how spell check should be performed.
///
/// Specifies the [SpellCheckService] used to spell check text input and the
/// [TextStyle] used to style text with misspelled words.
///
/// If the [SpellCheckService] is left null, spell check is disabled by
/// default unless the [DefaultSpellCheckService] is supported, in which case
/// it is used. It is currently supported only on Android and iOS.
///
/// If this configuration is left null, then spell check is disabled by default.
/// {@endtemplate} ¿X≈Ä«¿Yv¿YvÄá/// The configuration for the magnifier to use with selections in this text
/// field.
///
/// {@macro flutter.widgets.magnifier.intro} ¿Yëp¿Y€¿Y€5/// The default value for [stylusHandwritingEnabled].¿Y˝¿ ∑‘ÖÂ¿ Ω
¿ Ω
Ñˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿,◊Å ¿-»¿-»Ä€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿Z\¿Z¿Z    ¿Zfå¡¿^¿^ÉZ/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for an editable field.
///
/// For example, [EditableText] uses this to generate the default buttons for
/// its context menu.
///
/// See also:
///
/// * [EditableTextState.contextMenuButtonItems], which gives the
///   [ContextMenuButtonItem]s for a specific EditableText.
/// * [SelectableRegion.getSelectableButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the button
///   Widgets for the current platform given [ContextMenuButtonItem]s. 	¿^#/¿^D¿^C  ¿^X#¿^v¿^u  ¿^Å"¿^ü¿^û  ¿^©$¿^«¿^∆  ¿^”(¿^Ò¿^  ¿_%¿_¿_  ¿_,(¿_J¿_I  ¿_Z$¿_x¿_w  ¿_Ñ,¿_¢¿_°   ¿gtù≥¿gâ¿gâ  ¿g¢(¿gæ¿gΩ  ¿g–¿gﬂ¿gﬁ   ¿Ö+C¿ÖI¿ÖI   ¿Ö+¿Ö,¿ÖrèJ¿ÖÉ¿ÖÉ  ¿Öó&¿Ö¥¿Ö≥  ¿Ör¿Ös ¿î¿¿∫¿îÁ¿îÁ /// State for an [EditableText].  8¿ï¸¿ñ¿ñ  ¿ñ–9¿ñÂ¿ñÂ  ¿ó`¿ó#¿ó# ¿ó?¿óZ¿ó[¿ók¿ól¿órO¿óå¿óå ¿ó®¿óµ¿ó∫¿ó∂¿óª¿ó¿¿óº¿ó≈*¿ó’¿ó’ ¿ó‰¿óÌ¿óÓ¿óÙÅ˛¿òA¿òA,/// Detects whether the clipboard can paste.	¿ô≠¿ô◊¿òY¿ôØ¿ô ¿ôÀ¿ôŸ¿ô¿ôÒ¿ô˜Å	¿ö∂¿ö∂Äì/// Detects whether the Live Text input is enabled.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.¿ö⁄¿ö·¿ö”¿ö‹¿ö„¿ö˛¿öˇ¿õ)¿õ¿õ  ¿õ~'¿õî¿õî  ¿õ©<¿õ ¿õ   ¿õÈO¿ú¿ú  ¿ú<3¿úA¿úA ¿új¿ú¿,¿ú–¿ú– ¿ú·¿úÍ¿úÎ¿ú+¿ù¿ù  ¿ù°/¿ù±¿ù± ¿ù≈¿ùŒ¿ùœ¿ù‘3¿ù‰¿ù‰ ¿ù¸¿û¿û¿û1¿û¿û ¿û1¿û:¿û;¿ûA¿ûF¿ûF ¿ûV¿û`)¿ût¿ût  ¿ü/5¿üL¿üL  ¿üh¿üw¿üw  ¿¢ÅN¿£A¿£AÅ/// The most up-to-date spell check results for text input.
///
/// These results will be updated via calls to spell check through a
/// [SpellCheckService] and used by this widget to build the [TextSpan] tree
/// for text input and menus for replacement suggestions of misspelled words. ¿£ÙÄ°¿§d¿§dT/// The text processing service used to retrieve the native text processing actions.¿§z¿§ì¿§î¿§öÄí¿•¿•F/// The list of native text processing actions provided by the engine.¿•*¿•+¿•¿•)¿•¿®@L¿®V¿®V ¿®q¿®y¿®ã¿®Ü¿®z¿®à¿®ë3¿®¶¿®¶  ¿®…¿®÷¿®÷  ¿©Ï5¿™¿™  ¿™%¿™*¿™* ¿™9¿q¿v¿v ¿à¿# Ç¿%¿%Å∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿9¿9"¿9"  ¿9ñ¿9§¿9§  ¿:¿:¿:  ¿:Y¿:a¿:a  ¿Z®¿Z¨¿Z¨ ¿Zæ¿s§(¿s©¿s© ¿s«¿{‘'¿{Ÿ¿{Ÿ ¿{ˆ¿ÅÅ¿Å¿Å ¿ÅF¿Åc¿Åq¿År¿Å}¿Åã¿Åå¿Åì¿Åù¿Å´¿Å¨¿Åª¿Å…¿Å ¿Å◊¿ÅÂ¿ÅÊ¿ÅÛ¿Ç¿Ç¿Ç¿ç*¿ç¿ç ¿ç7¿©ßK¿©Ω¿©Ω ¿©◊¿©ﬂ¿©Ò¿©Ï¿©‡¿©Ó¿©ˆ>¿™	¿™	 ¿™ ¿™&¿™'¿™9(¿™>¿™> ¿™\¿∂¸ ¿∑¿∑  ¿“$¿“#¿“# ¿“B¿“G¿“L¿“L  ¿Í¢$¿Íµ¿Íµ  ¿˝ËÅ,¿˛ª¿˛ªÄ∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.¿ˇ¿ˇ¿˛Ì¿˛“¿˛ﬁ¿˛ﬂ¿˛Ó¿˛Ô¿˛ˇ¿ˇ ¿ˇ¿≈¿…¿… ¿‡¿·¿V¿[¿[  ¿ ˇ"¿!
¿!
  ¿;/Äô¿;\¿;\ 	¿;¿;ç¿;ß¿;é¿;®¿;«¿;±¿;©¿;≥¿>H|¿>m¿>m 	¿>Ç¿>ê¿>¢¿>ë¿>£¿>√¿>±¿>©¿>≥¿O	Äâ¿O2¿O2 	¿OQ¿O_¿Ou¿O`¿Ov¿Oë¿O¿Ow¿OÅ¿OóÄ√¿OÈ¿OÈ ¿P¿P4¿PS¿P5¿PT¿PY¿PU¿R©ë≈¿RŒ¿RŒ ÅW¿RÔ¿dm¿RŸ¿RÓ¿R⁄¿R‡¿RÊ¿RÌ¿RÁ¿S¿Rı¿S¿S+¿S>¿S7¿S,¿S9¿SV¿SE¿SX¿SÖ¿Sp¿Sá¿Sπ¿S£¿Sª¿S—¿S“¿Sﬁ¿Sﬂ¿SÛ¿SÊ¿Sı¿T¿T¿T¿T¿T2¿T¿T¿T¿T]¿TH¿T_¿To¿Tÿ¿Tw¿Tà¿Tû¿Tâ¿Tü¿T—¿T†¿T¶¿T∫¿T˝¿Tﬂ¿Tˇ¿U¿U°¿U¿U(¿UG¿U)¿UH¿Uö¿UR¿U`¿U{¿Uø¿U®¿U¡¿U—¿V0¿UŸ¿UÍ¿V¿UÎ¿V¿V)¿V¿V
¿V¿Vu¿VU¿Vw¿Vá¿WQ¿Vè¿V©¿V ¿V™¿VÀ¿WJ¿V’¿V„¿Vˇ¿W;¿W ¿W=¿Ws¿WX¿Wu¿WÖ¿W‡¿Wç¿Wõ¿W∑¿Wú¿W∏¿WŸ¿W¡¿Wπ¿W√¿X¿WÁ¿X¿X ¿XÔ¿X(¿XB¿Xj¿XC¿Xk¿XË¿Xu¿XÉ¿Xû¿X⁄¿Xø¿X‹¿Y"¿Xˆ¿Y$¿Y4¿Z	¿Y<¿YV¿YÉ¿YW¿YÑ¿Z¿Yé¿Yú¿Y∏¿YÙ¿YŸ¿Yˆ¿Z0¿Z¿Z2¿ZB¿Zˇ¿ZJ¿Zd¿ZÖ¿Ze¿ZÜ¿Z¯¿Zê¿Zû¿Z≤¿ZÍ¿Zœ¿ZÏ¿[3¿[¿[5¿[E¿[d¿[F¿[ò¿[k¿[ö¿[™¿[…¿[´¿\¿[–¿\¿\¿]¿\%¿\?¿\{¿\@¿\|¿\˙¿\Ü¿\î¿\∞¿\Ï¿\—¿\Ó¿]/¿]¿]1¿]A¿^¿]I¿]c¿]ã¿]d¿]å¿^	¿]ñ¿]§¿]ø¿]˚¿]‡¿]˝¿^M¿^¿^O¿^_¿_=¿^g¿^Å¿^∏¿^Ç¿^π¿_6¿^√¿^—¿^Ï¿_(¿_¿_*¿_b¿_D¿_d¿_t¿_’¿_|¿_ä¿_©¿_ã¿_™¿_Œ¿_≥¿_´¿_µ¿_Ë¿_‹¿_Í¿_¯¿`¿_˘¿`¿`¿`¿`¿`¿`X¿`8¿`Z¿`j¿a?¿`r¿`å¿`≠¿`ç¿`Æ¿a8¿`∏¿`∆¿`⁄¿a¿`˜¿a¿a*¿a"¿a,¿am¿aF¿ao¿a¿b¿aá¿a°¿a…¿a¢¿a ¿bx¿a‘¿a‚¿a˝¿b5¿b¿b7¿bM¿bE¿bO¿bj¿b]¿bl¿b¨¿bô¿bÆ¿bæ¿b’¿bø¿bœ¿b‘¿b–¿bÛ¿b‹¿bı¿c¿c ¿c¿c¿c¿c¿c6¿c'¿c8¿cH¿c≈¿cP¿c^¿cn¿c_¿co¿cæ¿cÅ¿cy¿cÉ¿cµ¿cÊ¿cÕ¿cË¿c¯¿d¿c˘¿d6¿d¿d8¿dH¿dh¿dI¿df¿dg*¿ñÄπ¿ñ+¿ñ+    ¿õ2H¿õ;¿õ;    ¿útH¿ú}¿ú}    ¿ù~¿ù4¿ù4    ¿ûçM¿û¨¿û¨   ¿ûç¿ûé¿ûﬁM¿ûÒ¿ûÒ    ¿üÇÅó¿†Â¿†ÂÅ#/// Configuration that determines how spell check will be performed.
///
/// If possible, this configuration will contain a default for the
/// [SpellCheckService] if it is not otherwise specified.
///
/// See also:
///  * [DefaultSpellCheckService], the spell check service used by default.  ¿†¥¿†µ¿°Ä„¿°¿¿°¿Äë/// Whether or not spell check is enabled.
///
/// Spell check is enabled when a [SpellCheckConfiguration] has been specified
/// for the widget.   ¿£WÄô¿£`¿£`    ¿•1ÇÉ¿ßy¿ßyÇ$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿®ÎÄ˝¿®Ù¿®Ù    ¿™C@¿™X¿™X   ¿™C¿™D¿™áÄ·¿™ë¿™ë    ¿´lÅ!¿´Å¿´Å   ¿´l¿´m¿¨ëÄ˚¿¨¶¿¨¶   ¿¨ë¿¨í¿≠êÅ¿≠•¿≠•   ¿≠ê¿≠ë¿ÆòÉü¿Æ≠¿Æ≠   ¿Æò¿Æô¿≤;Å!¿≤P¿≤P   ¿≤;¿≤<¿≥`Å%¿≥u¿≥u   ¿≥`¿≥a¿¥âÅÊ¿¥û¿¥û   ¿¥â¿¥ä¿∂sÄ„¿∂à¿∂à   ¿∂s¿∂t¿∏~Å¿∏ì¿∏ì    ¿¡ê]¿¡ô¿¡ô    ¿ÓUÑ¿Ôú¿ÔúÅ/// {@template flutter.widgets.EditableText.getAnchors}
/// Returns the anchor points for the default context menu.
/// {@endtemplate}
///
/// See also:
///
///  * [contextMenuButtonItems], which provides the [ContextMenuButtonItem]s
///    for the default context menu buttons.   ¿Ú`à¿ˆ¿ˆÉg/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for [EditableText].
///
/// See also:
///
/// * [EditableText.getEditableButtonItems], which performs a similar role,
///   but for any editable field, not just specifically EditableText.
/// * [SelectableRegionState.contextMenuButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [contextMenuAnchors], which provides the anchor points for the default
///   context menu.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///   button Widgets for the current platform given [ContextMenuButtonItem]s.   ¿˙ÇÑ¯¿˙¢¿˙¢    ¿%0C¿%Q¿%Q   ¿%0¿%1¿;_V¿;j¿;j    ¿_è7¿_§¿_§    ¿_…M¿_Õ¿_Õ  ¿_‘¿_Ê¿_Â   ¿`0¿`#¿`#    ¿`M.¿`V¿`V    ¿jÄŒ¿jÜ¿jÜZ/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿ŒﬂÄ¥¿ŒË¿ŒË    ¿œóÄ·¿–6¿–6|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿–¿–¿–|Å¿—[¿—[Ä∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿—9¿—:¿—éÄç¿—ı¿—ı5/// The current status of the text selection handles.  ¿—∆¿—«¿˝çW¿˝ü¿˝ü    ¿ˇ<¿ˇ:¿ˇ:   ¿ˇ¿ˇ¿ˇYG¿ˇd¿ˇd    ¿>¿+¿+   ¿¿¿gÜ¿é¿é   ¿g¿hi¿∑ZÄä¿∑_¿∑_    ¿∑ËÄí¿∑Ì¿∑Ì    ¿πèÑÖ¿πÕ¿πÕ*/// Copy current selection to [Clipboard]. ¿π€¿πÚ¿πÒ  ¿πº¿πΩ¿æÉt¿æU¿æU)/// Cut current selection to [Clipboard]. ¿æb¿æy¿æx  ¿æD¿æE¿¡ÒÅ£¿¬-¿¬- /// Paste text from [Clipboard]. ¿¬7¿¬N¿¬M  ¿¬¿¬¿√òÉ”¿√ù¿√ù  ¿√®¿√ø¿√æ  ¿√≈¿√Õ¿√Ã   ¿«oÑ|¿«§¿«§!/// Select the entire text value. ¿«Æ¿«≈¿«ƒ  ¿«ì¿«î¿ÀÔÇ¿Ã–¿Ã–Ä«/// Look up the current selection,
/// as in the "Look Up" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// Throws an error if the selection is empty or collapsed. ¿Ã‡¿Ã˜¿Ãˆ   ¿ŒÇo¿œ'¿œ'Ä˛/// Launch a web search on the current selection,
/// as in the "Search Web" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿œ=¿œT¿œS   ¿–ÄÇv¿—¨¿—¨Å/// Launch the share interface for the current selection,
/// as in the "Share..." edit menu button on iOS.
///
/// Currently this is only implemented for iOS and Android.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿—ª¿—“¿——   ¿“˙Å¿“ˇ¿“ˇ  ¿”¿”*¿”)   ¿‘Ö\¿’_¿’_Å9/// Finds specified [SuggestionSpan] that matches the provided index using
/// binary search.
///
/// See also:
///
///  * [SpellCheckSuggestionsToolbar], the Material style spell check
///    suggestions toolbar that uses this method to render the correct
///    suggestions in the toolbar for a misspelled word. ¿’¿’Ñ¿’É   ¿Ÿeás¿⁄I¿⁄IÄº/// Infers the [SpellCheckConfiguration] used to perform spell check.
///
/// If spell check is enabled, this will try to infer a value for
/// the [SpellCheckService] if left unspecified. ¿⁄l&¿⁄Ü¿⁄Ö   ¿‡‹ÖÜ¿·Õ¿·ÕH/// Returns the [ContextMenuButtonItem]s for the given [ToolbarOptions]. ¿·Î¿·¸¿·˚  ¿·'¿·(¿·2¿·¨¿·8¿·u¿ÊfáÎ¿ÁÉ¿ÁÉÄ€/// Gets the line heights at the start and end of the selection for the given
/// [EditableTextState].
///
/// See also:
///
/// * [TextSelectionToolbarAnchors.getSelectionRect], which depends on this
///   information.   ¿ˇïÇK¿ˇ≥¿ˇ≥   ¿ˇï¿ˇñ¿ˇ¢¿ˇ£¿‰Å¿g¿gq/// Query the engine to initialize the list of text processing actions to show
/// in the text selection toolbar.   ¿ëä‘¿Ø¿Ø   ¿ë¿í¿û¿ü¿ié”¿á¿á  ¿ó¿•¿§  ¿i¿j¿v¿w¿@Å¿E¿E    ¿[Ñõ¿y¿y   ¿[¿\¿h¿i¿%wå¿%à¿%à  ¿%õ¿%≠¿%¨  ¿%w¿%x¿1êÅp¿1ï¿1ï  ¿1Ø¿1¡¿1¿   ¿3Ñ1¿3¿3  ¿3#¿34¿33  ¿3¿3¿79Ää¿7J¿7J  ¿7`¿7h¿7g  ¿7o¿7Ö¿7Ñ  ¿79¿7:¿7«Å¿7ÿ¿7ÿ  ¿7Ê¿7ˇ¿7˛  ¿7«¿7»¿;πã"¿; ¿;   ¿;ﬂ¿;˜¿;ˆ  ¿;π¿;∫¿FﬂàÒ¿F‰¿F‰    ¿O‘ä–¿P¿P  ¿P¿P(¿P'  ¿P0¿P?¿P>  ¿O‘¿O’¿O€¿O˝¿O‹¿ZƒÅà¿\¿\ÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿\PÅ÷¿]Q¿]QÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿^*Åa¿^/¿^/    ¿báõ¿bé¿bé  ¿b¶	¿b¨¿b´   ¿kLÜE¿kQ¿kQ    ¿qïÅ¿qö¿qö    ¿rûÅ¿r£¿r£    ¿s–ÄΩ¿s’¿s’    ¿u™É≤¿uØ¿uØ    ¿y`ÄŒ¿yq¿yq  ¿yá¿yö¿yô  ¿y•¿y∏¿y∑  ¿y`¿ya¿z2Ä˙¿zC¿zC   ¿z2¿z3¿|bÄÉ¿|g¿|g    ¿|ÈÄâ¿|Ó¿|Ó    ¿}vÇî¿¿Åà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿ÄÅ¿Ä¿Ä    ¿ÇÅ¿Ç!¿Ç!  ¿ÇC!¿ÇR¿ÇQ   ¿É+Éó¿É0¿É0  ¿ÉY!¿Éh¿Ég   ¿Ü∆Éx¿ÜÀ¿ÜÀ  ¿ÜÏ¿á ¿Üˇ   ¿äBÇÃ¿äG¿äG    ¿ç@ã˚¿çE¿çE  ¿ç`¿çt¿çs   ¿ô?Çõ¿ôD¿ôD  ¿ôY¿ô_¿ô^   ¿õﬁÑ¿õÛ¿õÛ    ¿üÊâx¿†¿†  ¿†0¿†?¿†>  ¿†I¿†a¿†`  ¿üÊ¿üÁ¿üÌ¿†¿üÓ¿™fåí¿™k¿™k  ¿™á¿™ñ¿™ï   ¿∑!Çƒ¿∑2¿∑2   ¿∑!¿∑"¿πÈÑ¿πˆ¿πˆ  ¿∫	¿∫¿∫   ¿ΩãÙ¿æ"¿æ"  ¿æ:¿æL¿æK  ¿æV¿æn¿æm  ¿æz¿æÄ¿æ  ¿Ω¿ΩÒ¿Ω˜¿æ¿Ω¯¿æë¿…ËÉV¿…Ì¿…Ì  ¿ ¿  ¿   ¿ 1¿ @¿ ?  ¿ Q¿ i¿ h   ¿ÕBÅô¿ÕG¿ÕG    ¿“hÇ¡¿“m¿“m    ¿’-ÉÛ¿’2¿’2    ¿Ÿ$Åú¿Ÿ)¿Ÿ)  ¿Ÿ;¿ŸA¿Ÿ@  ¿ŸQ¿⁄ƒÄÆ¿⁄…¿⁄…    ¿€vÉÿ¿€{¿€{    ¿ﬂRÉ0¿ﬂW¿ﬂW    ¿‚ÜÉŸ¿‚ï¿‚ï    ¿ÊcÅâ¿Êh¿Êh  ¿Ê{¿ÊÇ¿ÊÅ   ¿ËLÄ⁄¿ËQ¿ËQ    ¿È*Åt¿È/¿È/  ¿ÈT¿È_¿È^   ¿ÍÀãd¿Í–¿Í–  ¿ÍÁ¿ÍÌ¿ÍÏ  ¿ÍÙ¿˜tÇ¿˜y¿˜y    ¿¸Åá¿¸¿¸    ¿ˇ§É”¿ˇµ¿ˇµ  ¿ˇ–¿ˇ‚¿ˇ·  ¿ˇË¿  ¿ˇˇ  ¿ˇ§¿ˇ•¿{Å?¿å¿å  ¿ö¿®¿ß  ¿{¿|¿æÖ¢¿±¿±ÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿†¿°¿
dÅ±¿
u¿
u  ¿
Ç¿
à¿
á  ¿
d¿
e¿
ï¿Å8¿K¿K*/// Toggles the visibility of the toolbar. ¿Z¿`¿_  ¿m¿UÖ¿œ¿œp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace.   ¿qÇ~¿’¿’ÅN/// Shows the magnifier at the position given by `positionToShow`,
/// if there is no magnifier visible.
///
/// Updates the magnifier to the position given by `positionToShow`,
/// if there is a magnifier visible.
///
/// Does nothing if a magnifier couldn't be shown, such as when the selection
/// overlay does not currently exist. ¿„¿Î¿Í   ¿ÛÄ·¿$¿$)/// Hides the magnifier if it is visible.   ¿ÁÅ$¿¯¿¯  ¿	¿¿  ¿Á¿Ë¿Ä¬¿ ¿    ¿¿¿’Å;¿Ê¿Ê  ¿ˆ¿˛¿˝  ¿’¿÷¿ ÄO¿ ë¿ ë  ¿ ö¿ ¨¿ ´  ¿ Ä¿ Å¿!&Ä§¿!7¿!7  ¿!T	¿!Y¿!X  ¿!_¿!d¿!c  ¿!&¿!'¿!ŒÅ√¿!‹¿!‹  ¿!Ì¿"¿"   ¿#ïÅΩ¿#£¿#£  ¿#≥¿#À¿#    ¿%VÇ¿%d¿%d  ¿%v¿%é¿%ç   ¿(Çõ¿(*¿(*  ¿(G¿(U¿(T  ¿(`¿(f¿(e  ¿(r¿(Ä¿(   ¿,vÜj¿,É¿,É  ¿,ó¿,•¿,§  ¿,¨¿,≤¿,±  ¿,∫¿,»¿,«   ¿37ÄÅ¿3D¿3D    ¿3ªÄÜ¿3»¿3»    ¿4Dk¿4Q¿4Q    ¿4≤D¿4ø¿4ø    ¿4˘B¿5¿5    ¿5?Äù¿5I¿5I ¿5Z¿5Z¿5Z¿5l¿5w¿5v   ¿5‡ÖK¿6ˇ¿6ˇÅ/// Transpose the characters immediately before and after the current
/// collapsed selection.
///
/// When the cursor is at the end of the text, transposes the last two
/// characters, if they exist.
///
/// When the cursor is at the start of the text, does nothing. ¿7 ¿7/¿7.   ¿;ÕÇw¿;“¿;“  ¿;ﬂ¿;Ú¿;Ò   ¿?9ÄÎ¿?>¿?>  ¿?X%¿?x¿?w   ¿@(Ñ¿@à¿@àV/// Handles [ScrollIntent] by scrolling the [Scrollable] inside of
/// [EditableText]. ¿@ê¿@û¿@ù   ¿DCáÔ¿D≥¿D≥f/// Extend the selection down by page if the `forward` parameter is true, or
/// up by page otherwise. ¿D "¿DÁ¿DÊ   ¿L6Çœ¿L;¿L;  ¿LL¿Lc¿Lb   ¿P_Ä–¿Pg¿Pg  ¿P}¿På¿Pã   ¿Q3År¿QŸ¿QŸÄö/// The default behavior used if [EditableText.onTapOutside] is null.
///
/// The `event` argument is the [PointerDownEvent] that caused the notification. ¿QÓ¿Q¸¿Q˚  ¿R¿R¿R   ¿ds•‹¿dì¿dì  ¿dô¿dß¿d¶  ¿ds¿dt¿dÄ¿dÅ¿äSå%¿ã'¿ã'Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿ñ|ñí¿ñÇ¿ñÇ  ¿ñµÖ¿ñµ ¿ñµ¿ñæ  '¿ñ≈	¿ñÃ¿ñÀ  ¿ñ‘¿ñ„¿ñ‚  ¿ñÚ¿ó¿ó   ¿ó"¿ó¿ó  ¿ó3 ¿óB¿óA  ¿óY¿ó_¿ó^  ¿óo¿óu¿ót  ¿óè¿óû¿óù  ¿ó≠¿óº¿óª  ¿ó ¿óŸ¿óÿ  ¿óÊ¿óÏ¿óÎ  ¿ò¿ò¿ò  ¿ò%¿ò4¿ò3  ¿òA¿òP¿òO  ¿ò]¿òc¿òb  ¿òp¿ò¿ò~  ¿òã¿òë¿òê  ¿ò†¿ò¶¿ò•  ¿òπ¿ò»¿ò«  ¿ò◊¿òÊ¿òÂ  ¿òÙ¿ô¿ô  ¿ô¿ô¿ô  ¿ô& ¿ô5¿ô4  ¿ôL¿ô[¿ôZ  ¿ôk¿ôz¿ôy  ¿ôÖ#¿ôã¿ôä  ¿ôÆ¿ôΩ¿ôº  ¿ôÕ¿ô”¿ô“  ¿ô‰¿ôÍ¿ôÈ  ¿ô˚¿ö
¿ö	  ¿ö"¿ö*¿ö)  ¿öC3¿öI¿öH  ¿ö|1¿öÇ¿öÅ  ¿ö≥&¿öπ¿ö∏  ¿öﬂ#¿öÓ¿öÌ  ¿õ¿õ¿õ  ¿õ,¿õ2¿õ1  ¿õF¿õL¿õK  ¿õ`¿õo¿õn  ¿ô£¿ö_¿öa¿öb¿öp¿öq¿öó¿öô¿öö¿öß¿ö®¿ö’¿õÉ¿õà¿õÀ¿õë¿õâ¿õì¿õù¿õû¿õ≥¿õ ¿õ¥¿õ¿&¿õ—¿õ‚¿õ‚  ¿õ¿ú¿ú  ¿ú¿ú¿ú  ¿ú,$¿ú<¿ú<  ¿úT"¿úd¿úd  ¿úz"¿úá¿úá  ¿ú†$¿ú∫¿ú∫  ¿ú»¿ú”¿ú”  ¿ú‡¿úÎ¿úÎ  ¿ú˜¿ù¿ù  ¿ù¿ù¿ù  ¿ù%¿ù0¿ù0  ¿ù<¿ùG¿ùG  ¿ùR¿ùd¿ùd  ¿ùr¿ù¿ù  ¿ùë¿ù¢¿ù¢  ¿ù∞¿ù¿¿ù¿  ¿ùÕ!¿ù·¿ù·  ¿ùÚ¿û ¿û   ¿û
¿û¿û  ¿û-¿û8¿û8  ¿ûG,¿ûa¿ûa  ¿ûw#¿ûå¿ûå  ¿ûû¿û≥¿û≥  ¿ûΩ!¿û»¿û»  ¿û‚¿ûÔ¿ûÔ  ¿û˛¿ü¿ü  ¿ü¿ü*¿ü*  ¿ü:¿üG¿üG  ¿üW¿üb¿üb  ¿üz,¿üí¿üí  ¿ü™*¿ü¡¿ü¡  ¿üÿ%¿ü„¿ü„  ¿†1¿†¿†  ¿†6¿†C¿†C  ¿†W ¿†h¿†h  ¿†{¿†à¿†à  ¿†õ¿†¶¿†¶   ¿†∑Ü ¿†“¿†“  ¿†Â¿†Û¿†Ú  ¿†∑¿†∏¿¶ªÜQ¿¶Ã¿¶Ã  ¿¶ﬂ¿¶Ì¿¶Ï  ¿¶ı¿ß¿ß  ¿¶ª¿¶º ¿≠Ö¿≠!¿≠!  ¿≠7Å/¿≠= ¿≠=¿≠N  	¿≠U¿≠d¿≠c  ¿≠s¿≠Ç¿≠Å  ¿≠ê¿≠ü¿≠û  ¿≠±¿≠¿¿≠ø  ¿≠œ ¿≠ﬁ¿≠›  ¿≠ı¿Æ¿Æ  ¿Æ¿Æ¿Æ  ¿Æ.¿Æ=¿Æ<  ¿ÆM¿Æ\¿Æ[   	¿Æj¿Æz¿Æz  ¿Æá!¿Æõ¿Æõ  ¿Æ¨¿ÆΩ¿ÆΩ  ¿ÆÀ,¿ÆÂ¿ÆÂ  ¿Æ˚¿Ø	¿Ø	  ¿Ø¿Ø$¿Ø$  ¿Ø3¿Ø=¿Ø=  ¿ØL¿ØW¿ØW  ¿Ø_¿Øp¿Øp   ¿ØÇû¿Øê¿Øê  ¿Øò¿Ø´¿Ø™   ¿≠¿≠¿≤!Å’¿≤'¿≤'  ¿≤UÄ∏¿≤[ ¿≤[¿≤m  ¿≤t¿≤É¿≤Ç  ¿≤ç¿≤ú¿≤õ  ¿≤™¿≤π¿≤∏  ¿≤…"¿≤ÿ¿≤◊  ¿≤Ò¿≥ ¿≤ˇ   ¿≥¿≥¿≥  ¿≥'¿≥7¿≥7  ¿≥D¿≥T¿≥T  ¿≥c'¿≥v¿≥v  ¿≥é¿≥ô¿≥ô   ¿≥•O¿≥…¿≥…   ¿≥•¿≥¶ ¿≥¯â!¿≥˛¿≥˛  ¿¥VW¿¥V ¿¥V¿¥m   
¿¥Ö¿¥r¿¥á¿¥†¿¥û¿¥à¿¥°¿¥¢¿¥™¿¥´¿∑ô%¿∑§¿∑§ ¿∑Ω¿∑¬¿∑œ¿∑œ  ¿∑ u¿∑4¿∑4    ¿∑Ê?¿∑˝¿∑˝   ¿∑Ê¿∑Á¿ª\Åj¿ªq¿ªq   ¿ª\¿ª]¿¥±Äõ¿¥¬¿¥¬   ¿¥±¿¥≤¿µPÅW¿µa¿µa  ¿µq¿µÖ¿µÑ  ¿µP¿µQ¿∂´q¿∂º¿∂º   ¿∂´¿∂¨¿∏)Äÿ¿∏:¿∏:  ¿∏J¿∏R¿∏Q  ¿∏)¿∏*¿πÇS¿π¿π  ¿π'	¿π-¿π,  ¿π¿π¿º M¿º›¿º›  ¿º„¿ºÒ¿º  ¿º ¿ºÀ ¿ΩÇÆ¿Ω!¿Ω!  ¿ΩMG¿ΩS ¿ΩS¿Ωg  ¿Ωi¿Ωy¿Ωx  ¿Ω¿Ωé¿Ωç   ¿Ωòl¿æ ¿æ Z/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿æ	Åæ¿æ¿æ  ¿æ%¿æ:¿æ9  ¿æH,¿æT¿æS  ¿æz'¿æò¿æó  ¿æ	¿æ
¿æ`¿æj¿æk ¿øÀàf¿√l¿√lÉ§/// A text boundary that uses code points as logical boundaries.
///
/// A code point represents a single character. This may be smaller than what is
/// represented by a user-perceived character, or grapheme. For example, a
/// single grapheme (in this case a Unicode extended grapheme cluster) like
/// "üë®‚Äçüë©‚Äçüë¶" consists of five code points: the man emoji, a zero
/// width joiner, the woman emoji, another zero width joiner, and the boy emoji.
/// The [String] has a length of eight because each emoji consists of two code
/// units.
///
/// Code units are the units by which Dart's String class is measured, which is
/// encoded in UTF-16.
///
/// See also:
///
///  * [String.runes], which deals with code points like this class.
///  * [Characters], which deals with graphemes.
///  * [CharacterBoundary], which is a [TextBoundary] like this class, but whose
///    boundaries are graphemes instead of code points. ¿√ò%¿√û ¿√û¿√∞  ¿√±
¿√∑¿√∂   ¿√¡¿√Œ¿√Œ   ¿ƒ)Å ¿ƒ.¿ƒ.  ¿ƒC¿ƒH¿ƒG   ¿≈-Ås¿≈>¿≈>  ¿≈W¿≈\¿≈[  ¿≈-¿≈.¿∆§Åã¿∆µ¿∆µ  ¿∆œ¿∆‘¿∆”  ¿∆§¿∆• ¿»Ñäæ¿»ä¿»ä ¿»ú&¿»ú¿»ú¿»·M¿»· ¿»·¿»Ú  ¿»Û
¿»˘¿»¯  ¿»ˇ¿…¿…  ¿…¿…¿…   ¿…2¿…J¿…J  ¿…S-¿…q¿…q  ¿…Ñ+¿…ù¿…ù  ¿“ﬂa¿“Ù¿“Ù   ¿“ﬂ¿“‡¿…¥Çã¿…π¿…π  ¿…”¿…Ê¿…Â   ¿ÃCÜò¿ÃW¿ÃW  ¿Ã^¿Ãa¿Ã`  ¿Ãi¿Ãx¿Ãw  ¿ÃC¿ÃD ¿”Dè¿”J¿”J ¿”e(¿”e¿”e¿”∞Ä”¿”∞ ¿”∞¿”   ¿”–
¿”÷¿”’  ¿”‡¿”Ê¿”Â  ¿”˙¿‘ ¿”ˇ  ¿‘)¿‘'¿‘&  ¿‘G¿‘M¿‘L  ¿‘b¿‘h¿‘g  ¿‘W¿‘w¿‘á¿‘ü¿‘ü  ¿‘®&¿‘≥¿‘≥  ¿‘“¿‘›¿‘›  ¿‘È¿‘Ù¿‘Ù  ¿’-¿’#¿’#  ¿’6*¿’O¿’O  ¿’e'¿’v¿’v ¿’ä¿‚G¿‚¿‚   ¿‚¿‚¿’ÛÅÇ¿’¯¿’¯  ¿÷¿÷¿÷   ¿◊ŸÅH¿◊ﬁ¿◊ﬁ  ¿◊ˆ¿ÿ¿ÿ   ¿Ÿ%à›¿Ÿ9¿Ÿ9  ¿Ÿ@¿ŸC¿ŸB  ¿ŸK¿ŸZ¿ŸY  ¿Ÿ%¿Ÿ& ¿‚Qä]¿‚W¿‚W ¿‚|(¿‚|¿‚|¿‚«1¿‚« ¿‚«¿‚Î  ¿‚Ï
¿‚Ú¿‚Ò   ¿‚¸¿„¿„  ¿„.¿„8¿„8  ¿„P¿„_¿„_  ¿ÏeG¿Ïz¿Ïz   ¿Ïe¿Ïf¿„qÇ†¿„v¿„v    ¿ÊÜL¿Ê&¿Ê&  ¿Ê-¿Ê0¿Ê/  ¿Ê8¿ÊG¿ÊF  ¿Ê¿Ê ¿Ï∞Å¸¿Ï∂¿Ï∂  ¿Ïˆ¿Ïˆ ¿Ïˆ¿Ì  ¿Ì
¿Ì¿Ì   ¿Ì¿Ì/¿Ì/  ¿ÓdF¿Óy¿Óy   ¿Ód¿Óe¿Ì9Å'¿ÌM¿ÌM  ¿ÌT¿Ìi¿Ìh  ¿Ìq¿ÌÄ¿Ì  ¿Ì9¿Ì: ¿ÓÆÅÁ¿Ó¥¿Ó¥  ¿Ó¸!¿Ó¸ ¿Ó¸¿Ô  ¿Ô
¿Ô¿Ô   ¿Ô!¿Ô9¿Ô9  ¿%n¿:¿:   ¿%¿&¿ÔCÄﬁ¿ÔT¿ÔT  ¿Ô[¿Ôt¿Ôs  ¿Ô|¿Ôã¿Ôä  ¿ÔC¿ÔD ¿óÅ¶¿Òq¿ÒqÄ”/// A [ClipboardStatusNotifier] whose [value] is hardcoded to
/// [ClipboardStatus.pasteable].
///
/// Useful to avoid showing a permission dialog on web, which happens when
/// [Clipboard.hasStrings] is called.  ¿Ò±=¿ÒÕ¿ÒÕ ¿Ò±¿Ò≤¿Ò’¿Ò‰¿ÒÂ ¿ÒÛH¿Ú¿Ú   ¿ÒÛ¿ÒÙ ¿Ú?Ñ¯¿ÚE¿ÚE  ¿Úõ ¿Úõ ¿Úõ¿Ú∏      ¿ÚøÑv¿Ú–¿Ú–  ¿Ú◊#¿Úı¿ÚÙ  ¿Ú˝¿Û¿Û  ¿Úø¿Ú¿        âñÄ·äät/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  ä@äOäN  äYäqäp   äyÄ©äŒäŒL/// Signature for the callback that reports the app private command results.  ä¯ã äˇ  ããã   ã$Å\ååÄ„/// Signature for a widget builder that builds a context menu for the given
/// [EditableTextState].
///
/// See also:
///
///  * [SelectableRegionContextMenuBuilder], which performs the same role for
///    [SelectableRegion].  åEåSåR  å[#ånåm   ç
Uçç   ç=    çK    çQ      é"Dé1é1 éKéSéeé`éTébé€0éÂéÂ è
èÅHèªèªÄô/// The default mime types to be used when allowedMimeTypes is not provided.
///
/// The default value supports inserting images of any supported format.èÁêUèﬂèÊè‡èÎè˙ê	êê(ê7êG 	  ÄÆ  package:flutter/cupertino.dart  Äﬂ  package:flutter/material.dart  Å  app.dart  Å.  context_menu_controller.dart  Å]  	form.dart  Åy  restoration.dart  Åú  restoration_properties.dart  Å   selectable_region.dart  ÅÛ  +text_selection_toolbar_layout_delegate.dart ôj <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅTÅpÅìÅ¡ÅÍÇ(Ç1Ç2ÇGÇcÇäÇãÇﬁÉÉ0ÉYÉÇÉ™É´É¬ÉËÑ Ñ$Ñ9ÑPÑiÑëÑ¶ÑÕÑ˚ÖÖ3ÖRÖkÖàÖ°ÖºÖ·ÜÜ&ÜIÜuÜìÜ≤ÜÃÜÓáá3áNáhá|á†áæáÏàà'à;àVàWà~àáà®à«à‡à˘ââ*âAâBâZâxâïâñâÊää.äxäyä∆ã#ã$ãpãâãçãõãüãÌåå1åÅåÇåœç
ç`çaç®ç˜é"éhéié¥é€èèè[è_è®èÈè¯êêê&ê5êEêUêXêYêúëë0ëFëGëSëçë–ë‘ë’ë·í<íqí™íÎìììììPìïìñì≈ìÊìÁîî î?îXîmîåî™î‘îÏîÚîˆî˜ïï=ïPïùï£ï≈ï…ïÀïÃï˘ï˝ñ<ñãñ⁄ó(ó5ó9óÖó∆ó òòhò¨ò∞ò˛ôGôóôÂö.özö≈õõIõMõõõÂõ˛úúPúöúûú≤ú˛ùIùmùqùÕù›ù·ùÔùÛûDûkûµûÁüïü€†-†3†Ä†é†î†⁄°*°{° ¢¢/¢5¢É¢°¢ß¢Ω££X£y££›£Ô§§j§k§≈§À••/•j•x• ¶¶k¶ï¶û¶Ã¶Õ¶˚ßßßkßßß≠ß¯®J®ì®À®—©©m©∫™
™N™k™á™ú™ÿ™˙´´´´´;´G´å´›¨/¨W¨^¨z¨~¨¨≥¨π≠
≠J≠e≠à≠û≠ø≠∆ÆÆnÆæØ
ØeØfØãØºØ¬Ø√ØË∞7∞v∞ã∞ü∞ª∞˚±R±ë±ö±°±•±¶±ÿ±ﬁ≤.≤L≤~≤≤–≥≥k≥©≥Ø≥Ï¥3¥Ä¥ß¥≠¥ˇµµ<µäµÕµ”µˆ∂R∂†∂§∂•∂≈∂À∑∑H∑N∑ü∑Ì∏>∏|∏ç∏‡∏‰∏Âπππkπ∂πƒπ ∫∫i∫∫∫¯ªªJªNªOªíª’º2º6º8º9ºgºkºπΩΩΩΩrΩ≈Ω—Ωﬁææ<æ>æUæéæîæ◊æÊøøHøLøeø|øíø™ø∆øÃøÕ¿ @¿ @D¿ @E¿ @s¿ @y¿ @í¿ @•¿ @¶¿ @”¿ @Ÿ¿ A+¿ A1¿ AJ¿ A\¿ A]¿ Aå¿ Aí¿ AÊ¿ AÏ¿ B¿ B¿ B¿ BN¿ BT¿ Bm¿ BÖ¿ Bá¿ Bà¿ B÷¿ B⁄¿ C)¿ Cv¿ Cô¿ Cù¿ C´¿ CØ¿ C‚¿ D¿ DT¿ DZ¿ D©¿ Dº¿ D¬¿ D˛¿ EG¿ Ei¿ Eé¿ EÕ¿ E˘¿ E˙¿ FM¿ Fs¿ Fy¿ FÀ¿ F—¿ FÁ¿ FÌ¿ G:¿ GM¿ GS¿ Gª¿ GÕ¿ G”¿ G„¿ GÈ¿ H3¿ Ht¿ Hu¿ H∆¿ I¿ I<¿ IB¿ Ií¿ IΩ¿ I√¿ J¿ J^¿ Jt¿ Jz¿ J§¿ J™¿ J¿¿ K¿ K¿ K|¿ Ké¿ Kî¿ K§¿ K™¿ KÙ¿ L	¿ L0¿ L2¿ L3¿ Lu¿ Lá¿ L±¿ L‹¿ M$¿ M>¿ MZ¿ M|¿ Mú¿ Mæ¿ M€¿ M¯¿ N¿ N:¿ N\¿ Nw¿ N|¿ N}¿ Næ¿ N”¿ NÈ¿ NÎ¿ NÏ¿ O#¿ OÜ¿ O…¿ OÓ¿ P!¿ P3¿ Pp¿ P≠¿ P«¿ P”¿ P›¿ PÚ¿ Q0¿ Q1¿ QM¿ QN¿ Qr¿ Qs¿ Q¿ Qû¿ Qü¿ Q´¿ Qﬁ¿ Qﬂ¿ R+¿ RI¿ RJ¿ RV¿ Rp¿ Rö¿ Rõ¿ RÍ¿ S4¿ SX¿ Sm¿ SÖ¿ Sª¿ T¿ T'¿ T>¿ Tc¿ Tp¿ Tò¿ T±¿ T∑¿ T∏¿ U¿ UO¿ Ux¿ U¨¿ UÊ¿ V¿ V¿ V¿ V3¿ V9¿ V:¿ V`¿ Vë¿ Vï¿ Vó¿ Vò¿ V∂¿ V∫¿ W
¿ WR¿ W`¿ Wd¿ WÆ¿ W˘¿ X3¿ X7¿ XR¿ XV¿ X¶¿ X˜¿ YA¿ YE¿ Yä¿ Yé¿ Yﬁ¿ Z)¿ Z-¿ Zp¿ Zt¿ Zâ¿ Zç¿ Zÿ¿ ['¿ [F¿ [J¿ [ò¿ [ﬂ¿ \*¿ \x¿ \≈¿ ]¿ ]^¿ ]≠¿ ]”¿ ]◊¿ ^¿ ^¿ ^#¿ ^t¿ ^ê¿ ^î¿ ^‡¿ _-¿ _X¿ _\¿ _ù¿ _°¿ _Ó¿ `0¿ `4¿ `}¿ `Ã¿ a¿ a¿ a#¿ aq¿ a¡¿ aÂ¿ aÈ¿ b#¿ b'¿ bs¿ b¿¿ c¿ cU¿ cù¿ cÈ¿ c˜¿ c˚¿ dK¿ dí¿ d·¿ e¿ e¿ eN¿ eR¿ f?¿ fÍ¿ gï¿ hp¿ if¿ ij¿ i¡¿ i≈¿ jØ¿ kô¿ lö¿ mô¿ nﬁ¿ o›¿ q¿ r3¿ rˇ¿ s¿ s0¿ s4¿ t¿ u¿ u∆¿ vu¿ wº¿ xe¿ y,¿ yÛ¿ z†¿ z›¿ z·¿ z˜¿ z˚¿ {b¿ {…¿ |d¿ }/¿ }›¿ ~C¿ ~˙¿ ~˛¿ ¿ "¿ r¿ ø¿ Ä¿ Ä]¿ Ä≠¿ Ä¡¿ Ä≈¿ Å¿ Å@¿ ÅD¿ Åî¿ Å‚¿ Ç/¿ Çz¿ Ç ¿ ÇÚ¿ Çˆ¿ ÉC¿ Éå¿ É“¿ Ñ ¿ Ño¿ Ñø¿ Ñ˝¿ Ö¿ ÖQ¿ Ö°¿ ÖÔ¿ Ü>¿ Üb¿ Üu¿ Üy¿ Üò¿ Üú¿ ÜÎ¿ á8¿ ác¿ ág¿ á∑¿ à¿ àT¿ à¿ àÉ¿ à¬¿ àÌ¿ àÒ¿ â@¿ âã¿ âè¿ â÷¿ ä#¿ äV¿ äÄ¿ äì¿ äó¿ ä∑¿ äª¿ ã
¿ ãP¿ ã†¿ ãÔ¿ å¿ å#¿ å^¿ åë¿ åï¿ å–¿ å‘¿ ç¿ ç_¿ ç¿ çÉ¿ ç…¿ é¿ éa¿ é´¿ éˆ¿ è>¿ èB¿ èN¿ èp¿ èê¿ è›¿ èÂ¿ èÎ¿ èÛ¿ è˜¿ ê
¿ ê¿ ê¿ ê ¿ êo¿ ê≠¿ êŸ¿ ë¿ ë	¿ ëW¿ ëß¿ ëÁ¿ ëÌ¿ í<¿ íç¿ í ¿ ì¿ ì¿ ìj¿ ìû¿ ìØ¿ ìæ¿ ì‹¿ ì˘¿ î¿ î7¿ îU¿ îr¿ îò¿ îæ¿ î·¿ î˙¿ ï¿ ï5¿ ï^¿ ïÑ¿ ïú¿ ï≠¿ ïæ¿ ïﬂ¿ ñN¿ ñä¿ ñê¿ ñ™¿ ñø¿ ñ÷¿ ñÈ¿ ó¿ ó¿ ó;¿ ól¿ óà¿ óû¿ ó≈¿ óﬁ¿ ó˙¿ ò¿ ò5¿ òl¿ òÄ¿ òú¿ ò≤¿ ò–¿ òÌ¿ ô¿ ô0¿ ôG¿ ô`¿ ôè¿ ô•¿ ôŒ¿ ôÍ¿ ö¿ ö¿ ö@¿ öW¿ ö~¿ ö∑¿ öÓ¿ õ#¿ õS¿ õâ¿ õØ¿ õ ¿ õ‚¿ ú¿ ú¿ úD¿ ú¿ úÖ¿ ú©¿ ú‘¿ úÌ¿ ù¿ ù,¿ ùE¿ ùV¿ ùá¿ ù√¿ ù…¿ ùÍ¿ û/¿ û^¿ ûÜ¿ û£¿ û≈¿ ü¿ ü%¿ üT¿ üm¿ üœ¿ üË¿ †J¿ †{¿ †ä¿ †◊¿ °¿ °¿ °$¿ °a¿ °¶¿ °∞¿ ¢¿ ¢e¿ ¢}¿ ¢”¿ ¢˘¿ £¿ £<¿ £_¿ £º¿ £·¿ §¿ §I¿ §ö¿ §Ω¿ §Ù¿ •C¿ •y¿ •¨¿ •’¿ •˝¿ ¶+¿ ¶U¿ ¶u¿ ¶Ñ¿ ¶∞¿ ß¿ ßF¿ ß∞¿ ß∫¿ ß€¿ ßÒ¿ ®R¿ ®k¿ ®Ñ¿ ®´¿ ®Ì¿ ©@¿ ©Q¿ ©s¿ ©†¿ ©°¿ ©«¿ ©Ò¿ ©Ú¿ ™)¿ ™F¿ ™G¿ ™â¿ ™À¿ ™—¿ ™¯¿ ™˛¿ ´1¿ ´F¿ ´i¿ ´j¿ ´•¿ ´Ë¿ ´Ó¿ ¨7¿ ¨É¿ ¨”¿ ¨Ê¿ ¨Ï¿ ≠¿ ≠¿ ≠4¿ ≠5¿ ≠_¿ ≠è¿ ≠ê¿ ≠À¿ ≠Ú¿ ≠Û¿ Æ+¿ ÆR¿ ÆX¿ Æî¿ Æﬂ¿ ÆÂ¿ Æ˛¿ Ø¿ Ø*¿ Ø+¿ Øy¿ Ø¿ ØÕ¿ Ø˛¿ ∞¿ ∞¿ ∞"¿ ∞2¿ ∞8¿ ∞Å¿ ∞ô¿ ∞ö¿ ∞¬¿ ∞»¿ ±¿ ±g¿ ±¥¿ ±‹¿ ≤¿ ≤¿ ≤-¿ ≤3¿ ≤¿ ≤œ¿ ≤ˆ¿ ≤¸¿ ≥¿ ≥¿ ≥V¿ ≥y¿ ≥z¿ ≥¥¿ ≥“¿ ≥ÿ¿ ¥*¿ ¥?¿ ¥E¿ ¥U¿ ¥[¿ ¥¥¿ ¥Õ¿ ¥Œ¿ µ	¿ µ1¿ µ7¿ µO¿ µd¿ µ~¿ µ¿ µ∆¿ µÔ¿ µ¿ ∂7¿ ∂`¿ ∂a¿ ∂™¿ ∂ ¿ ∂À¿ ∂˛¿ ∑¿ ∑¿ ∑T¿ ∑Z¿ ∑¢¿ ∑—¿ ∑“¿ ∏¿ ∏@¿ ∏F¿ ∏ç¿ ∏–¿ π¿ π_¿ π™¿ π∞¿ π¸¿ ∫E¿ ∫ë¿ ∫†¿ ∫¶¿ ∫Ò¿ ª4¿ ª:¿ ª£¿ ª˜¿ º¿ º¿ ºg¿ º∑¿ º˘¿ Ω¿ Ω6¿ Ω|¿ ΩÇ¿ Ω∂¿ Ω∫¿ Ωª¿ Ω‹¿ Ω›¿ æ¿ æI¿ æO¿ æt¿ æâ¿ æ¶¿ æß¿ æ‰¿ ø
¿ ø¿ øU¿ ø|¿ øÇ¿ ø–¿ ¿¿ ¿k¿ ¿¥¿ ¡¿ ¡¿ ¡¿ ¡R¿ ¡g¿ ¡ç¿ ¡é¿ ¡–¿ ¬¿ ¬1¿ ¬7¿ ¬Å¿ ¬∂¿ ¬º¿ ¬È¿ ¬Ô¿ ¬ˇ¿ √¿ √W¿ √]¿ √r¿ √°¿ √¢¿ √‚¿ ƒ¿ ƒ ¿ ƒg¿ ƒπ¿ ƒø¿ ƒ˜¿ ≈¿ ≈¿ ≈O¿ ≈ï¿ ≈±¿ ≈∑¿ ≈Ô¿ ≈ı¿ ∆F¿ ∆e¿ ∆k¿ ∆º¿ ∆˝¿ «¿ «!¿ «@¿ «≠¿ «Á¿ «Î¿ »¿ »¿ »D¿ »d¿ »e¿ »ñ¿ »±¿ »≤¿ »¿ »ˆ¿ …7¿ …á¿ …‡¿ …Ó¿ …Ù¿  1¿  7¿  |¿  ®¿  ©¿  ˙¿ À%¿ À+¿ Àp¿ Àv¿ ÀÜ¿ Àå¿ À€¿ ÀÔ¿ Ã¿ Ã¿ ÃM¿ Ãõ¿ Ã°¿ ÃÒ¿ Õ$¿ Õ*¿ Õt¿ Õê¿ Õñ¿ Õ‰¿ Œ+¿ Œ|¿ Œ§¿ Œ™¿ Œ˚¿ œL¿ œù¿ œŸ¿ œﬂ¿ –.¿ –{¿ –´¿ –±¿ –˝¿ —¿ —#¿ —-¿ —3¿ —Ç¿ —“¿ “¿ “!¿ “G¿ “Q¿ “W¿ “¢¿ “„¿ “Ò¿ ”¿ ”¿ ”$¿ ”s¿ ”†¿ ”Æ¿ ”ﬁ¿ ”Ë¿ ”Ó¿ ”˛¿ ‘¿ ‘I¿ ‘^¿ ‘Ø¿ ‘ƒ¿ ‘€¿ ‘‹¿ ’¿ ’d¿ ’j¿ ’∫¿ ’Ì¿ ’Û¿ ÷E¿ ÷ó¿ ÷ù¿ ÷Û¿ ÷˘¿ ◊J¿ ◊ï¿ ◊ß¿ ◊≠¿ ◊˛¿ ÿM¿ ÿm¿ ÿs¿ ÿÕ¿ Ÿ¿ Ÿ8¿ Ÿ>¿ Ÿâ¿ Ÿ≠¿ Ÿª¿ Ÿÿ¿ Ÿ‚¿ ŸË¿ ⁄6¿ ⁄á¿ ⁄†¿ ⁄Æ¿ ⁄›¿ ⁄Á¿ ⁄Ì¿ €¿ €¿ €¿ €!¿ €n¿ €π¿ €’¿ €Í¿ ‹;¿ ‹P¿ ‹g¿ ‹h¿ ‹ü¿ ‹‰¿ ‹Í¿ ›1¿ ›m¿ ›s¿ ›ø¿ ›„¿ ›È¿ ﬁ¿ ﬁ¿ ﬁY¿ ﬁ†¿ ﬁ¶¿ ﬁŸ¿ ﬁÁ¿ ﬁ˝¿ ﬂ6¿ ﬂ>¿ ﬂH¿ ﬂ]¿ ﬂs¿ ﬂt¿ ﬂ≠¿ ﬂ˙¿ ‡	¿ ‡¿ ‡_¿ ‡Ø¿ ‡µ¿ ‡Œ¿ ‡„¿ ·6¿ ·N¿ ·f¿ ·g¿ ·õ¿ ·°¿ ·Ô¿ ‚¿ ‚¿ ‚U¿ ‚•¿ ‚¿ „¿ „¿ „Q¿ „í¿ „ò¿ „Ë¿ ‰:¿ ‰}¿ ‰ ¿ Â¿ Â"¿ Â(¿ Â8¿ Â>¿ Âè¿ Â€¿ ÂÓ¿ Ê>¿ Êç¿ Ê√¿ Êı¿ Êˆ¿ Á2¿ Áj¿ Áp¿ Á∞¿ Á€¿ Á¿ Ë¿ Ë¿ ËT¿ Ë~¿ Ë¿ Ë∏¿ Ë˘¿ È/¿ È5¿ Èz¿ È¡¿ Í¿ Í(¿ Í.¿ Ís¿ Í∏¿ Í„¿ ÍÈ¿ Î9¿ Îâ¿ Îÿ¿ Îﬁ¿ ÎÙ¿ ÏB¿ Ïâ¿ Ïè¿ ÏÓ¿ Ì ¿ Ì¿ Ì¿ ÌQ¿ Ìä¿ Ì≠¿ Ì¸¿ ÓH¿ Óì¿ Ó¡¿ Ó«¿ Ô
¿ ÔO¿ Ôó¿ ÔÁ¿ 6¿ ]¿ r¿ x¿ à¿ é¿ Œ¿ Ò¿ ÒW¿ Òó¿ ÒÂ¿ Ú(¿ ÚQ¿ ÚR¿ Úì¿ ÚÊ¿ Û¿ Û¿ ÛX¿ ÛÄ¿ ÛÜ¿ Û’¿ Ù%¿ ÙA¿ ÙG¿ Ùó¿ ÙÊ¿ ı1¿ ıe¿ ık¿ ıΩ¿ ı“¿ ı˚¿ ı¸¿ ˆ7¿ ˆá¿ ˆî¿ ˆö¿ ˆ‰¿ ˜2¿ ˜x¿ ˜~¿ ˜è¿ ˜ﬁ¿ ˜‰¿ ˜Ú¿ ¯8¿ ¯B¿ ¯H¿ ¯ñ¿ ¯‡¿ ˘1¿ ˘V¿ ˘k¿ ˘ñ¿ ˘ó¿ ˘⁄¿ ˙!¿ ˙'¿ ˙r¿ ˙Ç¿ ˙à¿ ˙◊¿ ˚¿ ˚¿ ˚$¿ ˚ÿ¿ ¸(¿ ¸X¿ ¸Ê¿ ˝6¿ ˝d¿ ˝y¿ ˝±¿ ˝≤¿ ˝Ù¿ ˛C¿ ˛T¿ ˛i¿ ˛ü¿ ˛†¿ ˛Ë¿ ˇ¿ ˇ¿ ˇO¿ ˇõ¿ ˇ°¿ ˇÌ¿ ¿ !¿ 1¿ 7¿ Ñ¿ œ¿ ‰¿ ¸¿ ˝¿9¿à¿¥¿∫¿¿P¿ü¿¿A¿ë¿’¿€¿,¿w¿√¿¿a¿}¿É¿‘¿¿k¿´¿¿¿∆¿‹¿(¿x¿µ¿ª¿¿6¿<¿ï¿ß¿≠¿Ω¿√¿	 ¿	;¿	Ö¿	ö¿	√¿	ƒ¿
¿
O¿
{¿
Å¿
–¿¿g¿ß¿º¿¬¿“¿ÿ¿¿Q¿~¿¿æ¿¯¿˛¿L¿ù¿Ë¿9¿j¿p¿Ä¿Ü¿‘¿¿,¿_¿`¿¨¿∫¿¿¿¿¿_¿Ø¿˛¿¿<¿=¿Ü¿…¿œ¿¿f¿¨¿≤¿¿R¿¢¿ ¿–¿¿T¿Z¿É¿â¿ô¿ü¿Á¿:¿[¿Ä¿Å¿º¿‡¿Ê¿˝¿¿K¿ò¿‰¿4¿T¿i¿Ö¿Ü¿¬¿Â¿Î¿>¿S¿q¿r¿Æ¿Â¿Î¿¿,¿J¿K¿ê¿›¿˝¿¿S¿w¿å¿∞¿±¿Ó¿¿¿R¿u¿v¿¿¿∆¿¿5¿6¿Ä¿Ü¿ƒ¿Ú¿Û¿¿¿R¿X¿~¿•¿¶¿„¿2¿V¿\¿≠¿˝¿B¿é¿ﬂ¿Â¿ ¿ "¿ D¿ E¿ è¿ ”¿ È¿ Ô¿!4¿!r¿!±¿!∑¿!˙¿"@¿"i¿"o¿"á¿"ú¿"≈¿"∆¿#¿#b¿#z¿#Ä¿#–¿#Ù¿#˙¿$;¿$k¿$l¿$®¿$’¿$÷¿%¿%_¿%e¿%†¿%¶¿%…¿%ﬁ¿&
¿&¿&H¿&é¿&î¿&ﬁ¿&‰¿'¿'¿'¿'j¿'µ¿'Ã¿'Ú¿'Û¿(2¿(v¿(|¿(õ¿(°¿(π¿(Œ¿(›¿)¿)F¿)J¿)h¿)i¿)±¿* ¿*"¿*(¿*b¿*h¿*ß¿*ı¿+
¿+¿+Z¿+§¿+»¿+Œ¿+ﬁ¿+‰¿,/¿,]¿,≠¿,‘¿,’¿-¿-A¿-G¿-¿-®¿-Ω¿-¯¿-˘¿.6¿.à¿.ö¿.†¿.Ô¿/>¿/Å¿/œ¿0 ¿0¿0T¿0}¿0É¿0§¿0™¿0Õ¿0”¿1 ¿1T¿1Z¿1x¿1˙¿2L¿2°¿2˜¿3G¿3Ñ¿3ä¿3≠¿3≥¿4¿4T¿4†¿4¡¿4«¿5¿5¿5b¿5¨¿5≤¿5ˇ¿6O¿6õ¿6È¿77¿7á¿7ç¿7€¿8(¿8v¿8∆¿9¿9(¿9.¿9y¿9»¿:¿:¿:a¿:≤¿; ¿;¿;R¿;m¿;s¿;¡¿<¿<]¿<´¿<Ò¿=_¿=e¿=z¿=æ¿=Á¿=Ë¿>7¿>=¿>Ñ¿>»¿>¿>Ò¿?'¿?-¿?P¿?k¿?l¿?Æ¿?ƒ¿? ¿@¿@Z¿@`¿@´¿@˜¿@˝¿AE¿Aä¿Aƒ¿A ¿A⁄¿A‡¿B-¿B?¿B^¿B_¿Bù¿BË¿BÓ¿C;¿C¿CÖ¿C ¿D¿D]¿Du¿Dä¿Dê¿D⁄¿E)¿E7¿E_¿E`¿Eµ¿E·¿E‚¿F/¿F~¿Få¿Fí¿F·¿G4¿Gd¿Gj¿Gº¿H¿HC¿HI¿H_¿He¿H≤¿H≈¿HÀ¿I3¿IE¿IK¿Iê¿I÷¿J$¿JK¿JQ¿Jû¿JÓ¿K¿K!¿Kg¿Kh¿K™¿KÓ¿KÙ¿LD¿Lè¿L‹¿M+¿M1¿Mr¿Mx¿Mπ¿N¿NS¿NY¿N™¿N€¿N·¿O-¿OT¿OZ¿O©¿OÙ¿O˙¿PJ¿P|¿PÇ¿P“¿Q¿QG¿Qä¿Qê¿Q¶¿Qˆ¿R=¿RC¿Rß¿Rπ¿Rø¿R’¿S%¿SB¿SH¿S¨¿Sæ¿Sƒ¿S‘¿T&¿Tr¿TÖ¿T”¿U¿U/¿U~¿U≈¿U⁄¿V¿V¿V^¿V§¿V™¿V˘¿W5¿W;¿WÖ¿W’¿X¿X ¿Xs¿Xà¿X¬¿X√¿Y¿Y¿Y$¿YS¿Yé¿Yè¿Y«¿Z¿Z¿Zc¿Zd¿Z∞¿ZÔ¿Zı¿[E¿[]¿[c¿[s¿[y¿[Ω¿[˚¿\I¿\ã¿\‹¿]¿]E¿]ò¿]·¿^¿^T¿^}¿^•¿^œ¿^˝¿_(¿_V¿_Ä¿_≤¿_π¿`¿`¿`<¿`Ö¿`‘¿a!¿a1¿a2¿ay¿a÷¿a◊¿b¿bs¿bè¿bÂ¿c¿cZ¿cì¿cÎ¿d¿dl¿dä¿d‰¿e¿ee¿eü¿e˜¿f¿f¿f¿f3¿fV¿fr¿fë¿f∑¿fÏ¿f˜¿g ¿g¿g¿g$¿g(¿g)¿gr¿gû¿gÃ¿gË¿gÔ¿h)¿ht¿hz¿h{¿h±¿h≤¿i¿iV¿i®¿i¸¿j¿jT¿j•¿j‹¿jÔ¿k¿k7¿kZ¿k∞¿kÎ¿lG¿lÉ¿læ¿m¿mO¿mâ¿m ¿n¿nT¿n•¿n¯¿o,¿o¿o“¿p¿pH¿pô¿p÷¿q/¿qg¿q°¿q„¿r>¿rí¿r—¿s¿sT¿sa¿sb¿s∞¿s÷¿s˜¿t¿t(¿tM¿tp¿tï¿t¶¿tÆ¿t¥¿tµ¿tŒ¿tÙ¿t˙¿t˚¿uM¿uã¿u—¿v¿vF¿v¿v∫¿vÙ¿w+¿w`¿w¶¿wÎ¿x2¿xx¿x∂¿xÛ¿y1¿yi¿y•¿yÁ¿z¿zV¿zä¿zŒ¿z˛¿{1¿{^¿{ê¿{¬¿{˝¿|4¿|h¿|ñ¿| ¿|˛¿}3¿}h¿}ö¿}œ¿~	¿~;¿~j¿~™¿~Ú¿=¿s¿π¿ˇ¿ÄE¿Äã¿Ä–¿Å¿ÅZ¿Åò¿Å“¿Ç¿ÇY¿Çô¿Ç‹¿É¿É`¿É•¿ÉÁ¿Ñ>¿Ñ{¿Ñß¿ÑŸ¿Ñ‡¿Ñ·¿Ö$¿Ö(¿Ö)¿Ö5¿Öo¿Öp¿Ö|¿Ö¡¿ÖÏ¿ÜF¿Üí¿ÜÚ¿áL¿á´¿áø¿á‰¿áˇ¿à¿àp¿ày¿àÄ¿àî¿àπ¿à‘¿àÌ¿âE¿âN¿âU¿âi¿â∆¿âÕ¿â¯¿äQ¿ä∂¿ã¿ãp¿ã∏¿å¿å[¿å∑¿åÀ¿ç'¿ç.¿çB¿ço¿çã¿ç•¿ç¡¿ç ¿ç—¿çÂ¿éC¿éJ¿é^¿éø¿é∆¿é⁄¿è	¿è'¿èC¿è_¿èh¿èo¿èÉ¿è‹¿è„¿è˜¿ê¿ê<¿ê^¿êï¿êû¿ê•¿êπ¿ê⁄¿ë¿ë*¿ëF¿ëO¿ëV¿ëj¿ëã¿ë±¿ë’¿ëÒ¿ë˙¿í¿í¿íG¿ía¿íy¿íï¿íû¿í•¿íπ¿íÌ¿ì¿ì1¿ìM¿ìV¿ì]¿ìq¿ìö¿ìº¿î	¿î¿îQ¿ît¿î©¿î≤¿îπ¿îΩ¿îø¿î¿¿î·¿ï¿ï¿ïS¿ïs¿ï£¿ï¬¿ï⁄¿ï˙¿ñ¿ñK¿ñ†¿ñ…¿ñÕ¿ñŒ¿ó¿óo¿óp¿ó√¿óÒ¿óÚ¿ò!¿òS¿ò`¿òµ¿ô
¿ô[¿ô£¿ôÕ¿ôÙ¿ôı¿ö+¿ö1¿öA¿öë¿öÕ¿õ¿õ¿õ0¿õ{¿õ|¿õß¿õÁ¿ú:¿úq¿úr¿úΩ¿úæ¿úÓ¿ù¿ùI¿ùû¿ùü¿ù“¿û	¿û>¿û?¿û]¿û^¿ûã¿ûó¿û€¿û‹¿ü,¿ü-¿üf¿ü¿üÄ¿ü«¿üÕ¿†¿†N¿†T¿†d¿†≤¿†«¿°¿°¿°H¿°N¿°ü¿°µ¿¢¿¢¿¢@¿¢F¿¢ç¿¢‹¿£,¿£T¿£U¿£~¿£ô¿£º¿£Ò¿£Ú¿§I¿§ó¿§ò¿§·¿•.¿•/¿•~¿•å¿•í¿•‡¿¶-¿¶3¿¶~¿¶»¿¶Œ¿¶Ì¿ß¿ß4¿ßn¿ßµ¿ß∂¿®¿®>¿®é¿®è¿®∆¿®«¿®Ë¿®È¿©¿©_¿©k¿©é¿©≥¿©π¿©Â¿©È¿©Í¿™#¿™@¿™A¿™M¿™Ñ¿™Ö¿™†¿™Œ¿™ˆ¿´!¿´(¿´e¿´i¿´j¿´v¿´é¿´“¿¨%¿¨+¿¨ä¿¨é¿¨è¿¨õ¿¨¥¿¨¯¿≠8¿≠>¿≠â¿≠ç¿≠é¿≠ö¿≠¥¿≠¯¿Æ6¿Æ<¿Æë¿Æï¿Æñ¿Æ¢¿Æ¿¿Ø¿Ø4¿Øk¿Øò¿Øû¿Øü¿Ø¯¿∞¿∞¿∞¿∞8¿∞Y¿∞o¿∞é¿∞È¿±¿±/¿±P¿±s¿±¶¿±›¿≤.¿≤4¿≤8¿≤9¿≤E¿≤`¿≤ó¿≤´¿≤±¿≤”¿≥¿≥Y¿≥]¿≥^¿≥j¿≥à¿≥ø¿≥”¿≥Ÿ¿≥⁄¿≥¸¿¥/¿¥Ç¿¥Ü¿¥á¿¥ì¿¥≠¿¥“¿¥ı¿µ¿µ:¿µq¿µ»¿µÈ¿∂¿∂-¿∂P¿∂f¿∂l¿∂p¿∂q¿∂}¿∂ü¿∂Ë¿∑¿∑#¿∑S¿∑W¿∑X¿∑}¿∑è¿∑Ÿ¿∑·¿∑Â¿∑Ê¿∏¿∏!¿∏o¿∏w¿∏{¿∏|¿∏ª¿π¿π+¿πa¿πg¿πà¿πå¿πç¿π∫¿π∆¿π˙¿∫:¿∫q¿∫¿∫Ö¿∫¥¿∫¸¿ª.¿ªf¿ªÄ¿ªÅ¿ª®¿ª…¿ªÏ¿º¿º4¿ºE¿ºj¿ºè¿º’¿º˚¿Ω¿ΩD¿Ωû¿Ω≠¿Ωÿ¿ΩÂ¿ΩÌ¿ΩÛ¿æ¿æ¿æ¿æB¿æN¿æÅ¿æ≤¿æ¿¿æ∆¿ø¿ø5¿øV¿ød¿øj¿ø≤¿øˇ¿¿1¿¿{¿¿∂¿¿Õ¿¡	¿¡¿¡P¿¡e¿¡k¿¡â¿¡ç¿¡é¿¡ß¿¡Í¿¡Ó¿¡Ô¿¬¿¬¿¬\¿¬t¿¬Ç¿¬à¿¬∏¿¬Û¿√B¿√Z¿√h¿√n¿√ë¿√ï¿√ñ¿√‘¿√Ï¿√˙¿ƒ ¿ƒ¿ƒN¿ƒe¿ƒ•¿≈ ¿≈R¿≈ò¿≈ü¿≈†¿≈¸¿∆.¿∆x¿∆≥¿∆ ¿«¿«¿«M¿«b¿«h¿«l¿«m¿«ë¿«ù¿«Õ¿«˛¿»H¿»_¿»m¿»s¿»ì¿»¥¿…¿…¿…'¿….¿…/¿…a¿…à¿…≠¿…Œ¿…Û¿ ¿ '¿ J¿ o¿ à¿ ê¿ ∑¿ ‹¿À¿À$¿ÀI¿ÀÖ¿À®¿À…¿À⁄¿À‚¿ÀË¿ÀÏ¿ÀÌ¿Ã¿ÃE¿ÃK¿Ã}¿ÃÉ¿Ã¡¿Õ¿Õ&¿Õ'¿Õ}¿Õ´¿Õπ¿Õø¿Œ¿Œ
¿Œ¿Œ?¿Œu¿Œ{¿Œ≠¿Œ≥¿ŒÔ¿œ¿œb¿œÉ¿œ°¿œØ¿œµ¿œ∂¿–¿–'¿–s¿–y¿–}¿–~¿–∫¿–Ó¿–Ù¿—2¿—8¿—t¿—ù¿—‡¿“¿“¿“-¿“3¿“4¿“ä¿“•¿“Ì¿“Û¿“˜¿“¯¿”2¿”S¿”a¿”g¿”Ü¿”´¿”±¿”„¿”¯¿”˛¿‘¿‘¿‘P¿‘e¿‘k¿‘{¿‘Å¿‘…¿’¿’M¿’í¿’π¿÷¿÷R¿÷Å¿÷î¿÷ö¿÷õ¿÷¿◊¿◊8¿◊N¿◊O¿◊u¿◊Æ¿◊¯¿ÿ>¿ÿ?¿ÿç¿ÿ∑¿ÿÎ¿Ÿ¿Ÿ¿Ÿ?¿ŸG¿ŸM¿Ÿ^¿Ÿb¿Ÿc¿Ÿ´¿Ÿ±¿Ÿı¿⁄(¿⁄h¿⁄î¿⁄ö¿⁄Ì¿€¿€z¿€©¿€Œ¿‹!¿‹n¿‹ª¿›¿›9¿›K¿›ù¿›¡¿›‚¿ﬁ	¿ﬁZ¿ﬁ§¿ﬁ¿ﬂ@¿ﬂy¿ﬂä¿ﬂ≥¿ﬂ‹¿ﬂÎ¿ﬂ¯¿‡¿‡¿‡#¿‡Z¿‡`¿‡a¿‡Ñ¿‡Œ¿‡’¿‡Ÿ¿‡⁄¿·%¿·4¿·q¿·™¿·Æ¿‚¿‚O¿‚Å¿‚î¿‚ö¿‚æ¿‚Í¿„	¿„#¿„\¿„i¿„î¿„ü¿„Õ¿„Ï¿‰¿‰@¿‰M¿‰y¿‰Ñ¿‰¥¿‰”¿‰Ì¿Â#¿Â0¿Â]¿Âh¿Â†¿Âø¿ÂŸ¿Ê¿Ê¿ÊM¿ÊX¿Ê_¿Êc¿Êd¿Ê¥¿Êœ¿Ê’¿ÊÂ¿ÊÎ¿Á9¿ÁN¿Áó¿Á◊¿Áÿ¿Ë¿Ëg¿Ë∑¿Ëˇ¿ÈN¿Èñ¿Èø¿ÈÒ¿Í!¿ÍT¿Í£¿Í≤¿Í¿Î,¿Î5¿Î;¿Î<¿ÎÅ¿Îÿ¿Ï&¿ÏÉ¿Ïä¿Ïﬂ¿Ì+¿ÌÉ¿Ìä¿Ìó¿ÌÒ¿ÓG¿ÓN¿ÓR¿ÓS¿Óç¿ÓÀ¿Ó‡¿ÓÊ¿Óˆ¿Ó¸¿ÔK¿Ôz¿Ô±¿Ô¿¿_¿h¿n¿o¿Œ¿È¿Ò)¿Òâ¿Òø¿Ò‡¿Ú
¿Ú0¿ÚR¿ÚY¿Ú]¿Ú^¿Ú™¿ÚÊ¿ÚÏ¿Ú¸¿Û¿ÛP¿Ûò¿ÛÈ¿Ù+¿Ùz¿Ùê¿Ù·¿ı¿ıJ¿ıñ¿ıÊ¿ˆ!¿ˆN¿ˆ}¿ˆ±¿˜¿˜h¿˜√¿¯&¿¯â¿¯¢¿¯√¿˘¿˘0¿˘ê¿˘≠¿˘“¿˙!¿˙=¿˙I¿˙{¿˙¿˙Ä¿˙≈¿˚¿˚T¿˚°¿˚ª¿˚¡¿˚¬¿¸¿¸¿¸:¿¸Y¿¸y¿¸Œ¿¸˘¿˝R¿˝m¿˝ã¿˝¨¿˝Ω¿˛¿˛`¿˛ö¿˛‰¿˛˚¿ˇ¿ˇ*¿ˇ8¿ˇE¿ˇP¿ˇY¿ˇ_¿ˇw¿ˇ{¿ˇ|¿ˇí¿ˇì¿ˇ†¿ˇ¨¿ˇ¡¿ˇÿ¿ ¿ Z¿ ô¿ –¿	¿g¿æ¿›¿·¿‚¿3¿X¿â¿™¿¯¿¸¿˝¿M¿o¿é¿è¿ú¿®¿…¿Ï¿Ì¿˙¿!¿p¿å¿ç¿ﬁ¿¿G¿w¿∏¿æ¿ø¿Ì¿	¿D¿u¿ï¿”¿›¿¿¿¿X¿í¿¡¿Î¿¿)¿f¿Ç¿ä¿ê¿ë¿µ¿‘¿		¿	+¿	à¿	ê¿	ñ¿	ó¿	Œ¿
	¿
¿
¿
¿
i¿
∞¿
‘¿
˙¿¿¿9¿_¿ò¿¥¿º¿˘¿¿¿¿¿Q¿ù¿‰¿4¿d¿π¿
¿\¿b¿f¿g¿t¿Ä¿±¿◊¿¿S¿î¿ø¿≈¿∆¿Î¿1¿x¿À¿¿d¿Æ¿ˆ¿¿O¿É¿…¿Ï¿¿&¿I¿w¿É¿è¿ó¿Á¿¿¿[¿\¿ô¿ˆ¿7¿=¿>¿q¿∞¿È¿¿¿	¿2¿Y¿ã¿ﬂ¿¿a¿Å¿ª¿¡¿¬¿Î¿¿{¿É¿â¿ä¿©¿‚¿?¿G¿M¿N¿y¿ ¿È¿¯¿!¿r¿ê¿±¿Ÿ¿¿'¿P¿y¿†¿´¿≥¿π¿∫¿Ô¿¿¿8¿x¿ì¿‘¿¿3¿9¿=¿>¿l¿†¿œ¿$¿N¿T¿X¿Y¿f¿r¿Ö¿Ø¿‚¿$¿S¿~¿£¿≈¿·¿˙¿ /¿ `¿ Ç¿ †¿ ⁄¿!¿!U¿!z¿!π¿!ÿ¿"¿"&¿"f¿"ê¿"•¿"Û¿"˜¿"¯¿#¿#¿#i¿#o¿#ª¿#ˇ¿$P¿$s¿$y¿$ƒ¿$˜¿%-¿%.¿%:¿%t¿%u¿%Å¿%µ¿&¿&R¿&õ¿&ú¿&Í¿'¿'4¿'B¿'H¿'I¿'u¿'ì¿'Â¿'Ó¿'Ù¿'ı¿(¿(a¿({¿(∂¿(º¿(Í¿(Î¿)¿)R¿)å¿)Œ¿)‹¿)‚¿)„¿*/¿*X¿*{¿*∫¿*Í¿+¿+e¿+ó¿+¶¿+÷¿+ﬁ¿,¿,"¿,I¿,ò¿,ﬁ¿-8¿-T¿-\¿-Ç¿-É¿-™¿-À¿-Î¿.7¿.n¿.o¿.“¿/,¿/m¿/s¿/t¿/´¿/˚¿0*¿0E¿0K¿0L¿0õ¿0È¿16¿1T¿1â¿1ç¿1é¿1…¿2¿2<¿2É¿2æ¿2˝¿3¿3¿3¿3=¿3S¿3w¿3¬¿4
¿4¿4;¿4t¿4~¿4ü¿4æ¿4ﬂ¿5¿5'¿5H¿5¿5™¿5‘¿5ı¿6¿68¿6`¿6´¿6Ù¿7,¿72¿76¿77¿7C¿7å¿7¿¿7ƒ¿7≈¿7—¿8	¿8¿8w¿8~¿8…¿8Õ¿8Œ¿9¿95¿96¿9á¿9î¿9∑¿9∏¿:¿: ¿:!¿:W¿:u¿:v¿:«¿;¿;]¿;∂¿;∑¿;√¿;ˇ¿<G¿<x¿<ì¿<Ω¿<¯¿=*¿=R¿=\¿=ì¿=ƒ¿=˜¿>H¿>j¿>ï¿>ñ¿>Ω¿>Ì¿?¿?\¿?á¿?¨¿?ˆ¿@¿@+¿@Y¿@ì¿@Õ¿@⁄¿A8¿AB¿AC¿Aq¿A√¿A˘¿B)¿B4¿Be¿B≈¿B¿C:¿Cù¿Cû¿D¿DA¿Dñ¿D°¿E¿E)¿EL¿Ei¿E°¿EË¿F¿FT¿Fe¿Fï¿Fª¿F»¿F“¿Fÿ¿F‹¿F›¿G¿G$¿Gà¿Gø¿GÁ¿H¿H#¿H?¿HH¿Hë¿H€¿I&¿Ip¿Iê¿Ië¿I·¿J0¿J¿JŒ¿K¿K¿K_¿K•¿KÌ¿L/¿Lb¿L·¿M¿M<¿Mh¿Ms¿M{¿Mõ¿Mª¿M‹¿M˝¿N
¿NP¿N∞¿O¿O¿O9¿Oa¿O¿Oõ¿Oæ¿O«¿OÕ¿O—¿O“¿Oˇ¿PP¿Põ¿P«¿P”¿P¯¿Q¿Q=¿Q\¿Q~¿Qò¿Q∏¿R¿R¿R&¿R.¿R;¿Ry¿R…¿S
¿S4¿SO¿Si¿Sé¿S∫¿Sﬂ¿T¿T)¿TN¿T}¿T¢¿T»¿Tˆ¿U¿UF¿Uk¿Uï¿Uæ¿UÏ¿Uˆ¿U˛¿V¿V¿VG¿Vf¿Vt¿Vz¿V{¿Væ¿V»¿VË¿W	¿W)¿WF¿Wf¿W~¿Wú¿WÍ¿Wı¿W˛¿X¿X¿XS¿X§¿XÒ¿Y¿YZ¿Ya¿Y≤¿Z¿ZP¿Z^¿Zw¿Zõ¿Z°¿Z•¿Z¶¿Z¡¿Z¬¿[¿[S¿[Y¿[®¿[˘¿\¿\/¿\I¿\M¿\N¿\û¿\Î¿\Ò¿]>¿]J¿]b¿]|¿]à¿]§¿]Û¿]˙¿^#¿^'¿^(¿^U¿^å¿^ö¿^†¿^–¿_
¿_¿_¿_U¿_à¿_å¿_ç¿_«¿_Ó¿`¿`¿`¿`K¿`|¿`}¿` ¿a¿ah¿a|¿aÅ¿aÕ¿b¿bl¿b}¿b≥¿bÒ¿c<¿cB¿cC¿cv¿cô¿c∂¿c∑¿c–¿cÈ¿d¿dF¿d~¿dÕ¿e¿eb¿eâ¿eñ¿e‰¿f5¿fk¿fú¿fπ¿f‘¿g¿g(¿g)¿gB¿gw¿g∏¿h¿h>¿hD¿hE¿hì¿h¶¿h”¿i¿i8¿ij¿iq¿ir¿i∫¿j¿j¿j¿jl¿j{¿jò¿jÌ¿jÓ¿k¿kJ¿kj¿kì¿k°¿kß¿k«¿k˘¿k˙¿lI¿lé¿l§¿l≠¿l˙¿mG¿mò¿mπ¿m÷¿n¿ns¿nÃ¿nÌ¿o¿o6¿oJ¿os¿oò¿o¡¿oÍ¿p¿p¿pA¿pS¿po¿pæ¿pÈ¿q¿q"¿qW¿qd¿qà¿qé¿qí¿qì¿qº¿q€¿r ¿r#¿rR¿rr¿rë¿ró¿rõ¿rú¿rÀ¿s¿s)¿sF¿sm¿só¿sù¿s°¿s¢¿sŒ¿sÙ¿t¿t)¿t/¿tW¿tä¿té¿tè¿t⁄¿tﬂ¿u,¿uy¿u®¿uŒ¿u˜¿v8¿vF¿vL¿vo¿vê¿vΩ¿væ¿w!¿wO¿wï¿wÊ¿x¿x¿x#¿x2¿xD¿xk¿xé¿xµ¿x‹¿y¿y	¿y*¿yY¿y]¿y^¿yj¿y≈¿yÒ¿z¿z%¿z+¿z/¿z0¿z<¿zX¿zw¿zØ¿z“¿{¿{#¿{)¿{-¿{.¿{r¿{æ¿{“¿{˝¿{˛¿|K¿|`¿|~¿|•¿|‚¿|Ê¿|Á¿}¿}/¿}o¿}s¿}t¿}≠¿}≥¿~¿~O¿~ù¿~Ï¿¿&¿;¿Y¿f¿Ç¿ô¿Ä¿Ä¿Ä¿Ä¿Ä@¿Äe¿Ä|¿Äß¿Ä∂¿Ä‹¿Ä˛¿Å¿Å¿Å¿Å¿Å_¿Åô¿Å∑¿Å”¿ÅÔ¿Ç¿Ç¿Ç¿Çh¿Çï¿Çﬁ¿É$¿É(¿É)¿É~¿É•¿Éπ¿Éø¿ÉÎ¿ÑD¿Ñõ¿Ñ∫¿ÑÛ¿Ö;¿Öj¿Ö~¿ÖÑ¿Ö©¿Öÿ¿Ü¿ÜY¿Ün¿Üv¿Üß¿Ü≠¿Üø¿Ü√¿Üƒ¿á¿áW¿áµ¿á√¿á…¿áÂ¿à6¿àÖ¿àî¿àÏ¿â¿âH¿âÑ¿â¬¿ä¿ä5¿ä;¿ä?¿ä@¿ä`¿äò¿ä ¿äÓ¿ãQ¿ãw¿ã¡¿ãÍ¿å¿åC¿åJ¿åd¿åï¿å≈¿å‰¿ç¿ç¿ç¿ç¿ç>¿çÉ¿ç•¿ç≥¿çπ¿ç„¿é¿é¿é#¿ée¿éÇ¿éâ¿é◊¿è$¿ès¿èß¿è⁄¿ê¿ê¿ê%¿êI¿êp¿ê°¿ê€¿ê˙¿ë
¿ë¿ët¿ëó¿ëÿ¿í%¿íD¿íz¿íœ¿ì(¿ìP¿ìà¿ìª¿ìÀ¿ì”¿î¿î\¿îä¿î∏¿î»¿î–¿î—¿î¸¿ï¿ï¿ï@¿ïÑ¿ï≥¿ïÀ¿ï›¿ïÁ¿ñ¿ñO¿ñå¿ñ≈¿ó¿ó4¿ón¿óy¿óÆ¿ó˚¿ó¸¿ò&¿òU¿ò©¿ò¬¿òÚ¿ò¸¿ô2¿ô8¿ô<¿ô=¿ôq¿ôœ¿ôı¿öB¿öz¿öì¿öú¿öœ¿öˇ¿õR¿õh¿õp¿õ¿¿õ∆¿õ◊¿õ€¿õ‹¿ú¿úi¿ú±¿úŸ¿úÒ¿ù¿ù&¿ùQ¿ùÑ¿ù≥¿ù◊¿û
¿û)¿û\¿ûõ¿ûµ¿ûÙ¿ü	¿ü2¿ül¿ü}¿ü∫¿ü¡¿ü¬¿üﬂ¿ü„¿ü‰¿†¿†i¿†∏¿°¿°)¿°_¿°ß¿°µ¿°ª¿°º¿°È¿°Í¿¢.¿¢r¿¢∂¿¢Ù¿£"¿£7¿£H¿£t¿£õ¿£»¿£Ù¿§¿§E¿§o¿§ä¿§µ¿§ª¿•¿•0¿•P¿•]¿•Ñ¿•ª¿• ¿•ı¿•˝¿¶D¿¶l¿¶r¿¶ø¿¶Ê¿ß¿ß(¿ßa¿ßÇ¿ß¢¿ßø¿ßﬂ¿ß˜¿®¿®i¿®t¿®}¿®É¿®Ñ¿®‘¿©¿©:¿©U¿©[¿©_¿©`¿©•¿©Ù¿™6¿™7¿™c¿™d¿™ß¿™Œ¿™‹¿™‚¿´
¿´L¿´w¿´ƒ¿¨¿¨<¿¨ä¿¨Æ¿¨È¿≠¿≠$¿≠,¿≠-¿≠q¿≠r¿≠¿¿≠˙¿Æ4¿Æn¿Æí¿ÆÊ¿ØG¿Øú¿Ø…¿Øﬂ¿ØÍ¿∞,¿∞â¿∞ë¿∞í¿∞Ó¿∞Ô¿±S¿±°¿±¢¿±¡¿≤¿≤&¿≤P¿≤_¿≤º¿≥¿≥W¿≥}¿≥£¿≥œ¿≥‡¿≥˘¿¥5¿¥f¿¥ô¿¥£¿¥´¿¥¨¿¥«¿¥Ï¿µ¿µ8¿µ_¿µj¿µè¿µ«¿µÙ¿∂¿∂&¿∂5¿∂l¿∂ø¿∂«¿∂ı¿∂˘¿∂˙¿∑¿∑¿∑+¿∑G¿∑[¿∑i¿∑o¿∑°¿∑€¿∏¿∏M¿∏É¿∏æ¿π¿πg¿π°¿π©¿πØ¿π‚¿πÊ¿πÁ¿∫$¿∫.¿∫í¿∫ì¿∫°¿∫…¿ª¿ª(¿ª)¿ªã¿ª—¿ª“¿ªÛ¿ºP¿º`¿ºh¿ºi¿º©¿º÷¿º˜¿Ω¿Ω4¿ΩT¿Ωl¿Ωä¿Ωœ¿Ω⁄¿Ω„¿ΩÈ¿ΩÌ¿ΩÓ¿æ¿æ6¿æR¿æv¿æò¿æü¿æÕ¿ø¿øf¿øØ¿ø∞¿øÿ¿¿,¿¿}¿¿å¿¿€¿¡+¿¡z¿¡ ¿¬¿¬¿¬ ¿¬\¿¬q¿¬º¿¬¸¿√¿√ ¿√!¿√x¿√¢¿√¨¿√œ¿√Ò¿ƒ¿ƒ2¿ƒL¿ƒl¿ƒ∂¿ƒ√¿ƒŒ¿ƒ÷¿ƒ‹¿ƒ›¿≈$¿≈%¿≈r¿≈≥¿≈…¿≈›¿∆.¿∆y¿∆Ã¿∆‹¿∆¯¿«¿«M¿«ä¿«¬¿»¿»¿»D¿»l¿»x¿»•¿»»¿»Í¿…	¿…+¿…E¿…e¿…ß¿…¥¿…ø¿…«¿…Õ¿…·¿…Â¿…Ê¿ ¿ -¿ M¿ o¿ u¿ ö¿ π¿ ⁄¿À9¿Àg¿Àq¿Àí¿Àµ¿Àÿ¿À˚¿Ã.¿Ãr¿Ã†¿ÃÔ¿Õ¿Õ+¿Õ5¿Õ;¿Õ?¿Õ@¿Õ^¿Õå¿Õ¥¿Õﬂ¿ÕÊ¿Œ9¿Œ_¿Œ|¿Œÿ¿Œ‹¿Œ›¿Œˇ¿œ¿œ8¿œS¿œl¿œî¿œï¿œ‚¿–¿–+¿–y¿–z¿–»¿—¿—7¿—L¿—ã¿—å¿—ƒ¿—Ÿ¿“¿“¿“E¿“e¿“f¿“É¿“è¿“ª¿”¿”¿”)¿”7¿”=¿”Y¿”g¿”m¿”â¿”∏¿”È¿”˜¿”˝¿‘%¿‘I¿‘{¿‘£¿‘∞¿‘˝¿’¿’ ¿’&¿’*¿’+¿’D¿’p¿’ï¿’ﬁ¿÷¿÷"¿÷Q¿÷j¿÷r¿÷x¿÷y¿÷°¿÷ø¿◊¿◊%¿◊A¿◊X¿◊Ñ¿◊∏¿◊‚¿◊Î¿◊¯¿ÿ;¿ÿä¿ÿ•¿ÿ±¿ÿπ¿Ÿ¿Ÿ¿Ÿ!¿Ÿ"¿ŸZ¿Ÿü¿ŸÈ¿⁄@¿⁄\¿⁄u¿⁄è¿⁄∑¿⁄Ω¿⁄¡¿⁄¬¿⁄Ì¿€¿€'¿€N¿€i¿€o¿€s¿€t¿€ö¿€Ã¿‹ ¿‹r¿‹ó¿‹È¿›-¿›s¿›¥¿›∫¿›„¿ﬁ
¿ﬁ:¿ﬁä¿ﬁ´¿ﬁΩ¿ﬁÙ¿ﬁ¸¿ﬂK¿ﬂO¿ﬂP¿ﬂo¿ﬂö¿ﬂ¡¿ﬂÒ¿‡¿‡T¿‡Ö¿‡∆¿‡‰¿·¿·%¿·t¿·ö¿·”¿·€¿·Ë¿‚¿‚0¿‚X¿‚b¿‚h¿‚¿‚É¿‚Ñ¿‚∑¿‚’¿„¿„h¿„æ¿„≈¿„Ê¿‰	¿‰*¿‰C¿‰j¿‰Å¿‰õ¿‰∂¿‰˝¿Â'¿Ây¿Â•¿Â˘¿Ê@¿ÊF¿Ê\¿Ê`¿Êa¿Êä¿Ê…¿Á¿Á5¿Áq¿Á¿ÁÖ¿Áö¿Á ¿ÁÈ¿ÁÌ¿ÁÓ¿Ë¿ËJ¿Ëm¿Ëò¿Ë€¿È#¿È'¿È(¿Èk¿Èã¿Èô¿Èü¿Èº¿È‡¿Í ¿Í4¿Í_¿Íî¿Íõ¿Íü¿Í†¿Í»¿Í…¿Í˛¿ÎS¿Îa¿Îg¿Îh¿Îƒ¿Î˜¿Ï¿Ï¿Ï¿ÏD¿Ï¶¿Ï‹¿Ì.¿Ìf¿Ìm¿Ìn¿Ì´¿Ì…¿ÌÏ¿Ó¿Ó8¿Óõ¿Ó∏¿Óﬁ¿Ô¿Ô(¿Ô/¿Ô0¿ÔX¿Ôf¿Ôå¿Ôﬁ¿¿(¿.¿S¿T¿ç¿®¿ı¿Ò¿ÒX¿Òù¿Ò≈¿Ú¿ÚY¿Ú¶¿ÚØ¿Ú∞¿ÚÔ¿Û¿ÛE¿Ûî¿Ûœ¿Û¸¿Ù¿Ù¿Ù`¿Ùç¿Ù∫¿ÙÁ¿ı7¿ıL¿ı∞¿ıΩ¿ı«¿ıœ¿ıÚ¿ı¯¿ˆ,¿ˆ0¿ˆ1¿ˆ|¿ˆÅ¿ˆ–¿˜¿˜H¿˜M¿˜r¿˜ö¿˜—¿˜Ê¿¯9¿¯¿¯†¿¯Ï¿˘E¿˘K¿˘Ü¿˘ä¿˘ã¿˘“¿˘◊¿˙$¿˙q¿˙∞¿˙µ¿˚¿˚P¿˚†¿˚“¿˚◊¿¸ ¿¸$¿¸c¿¸ñ¿¸§¿¸™¿¸˛¿˝S¿˝Ü¿˝ä¿˝ã¿˝Â¿˝Ê¿˛¿˛¿˛l¿˛ü¿˛Ã¿ˇ¿ˇ¿ˇ#¿ˇV¿ˇW¿ˇ°¿ˇ¢¿ˇÆ¿ ¿ L¿ ö¿ ª¿¿'¿^¿d¿e¿µ¿¿M¿r¿ö¿∏¿·¿¿"¿0¿6¿7¿t¿x¿y¿Ö¿≥¿˝¿I¿J¿}¿∑¿ª¿º¿¿¿Z¿û¿™¿¡¿¿b¿≤¿˝¿>¿`¿t¿z¿{¿†¿¥¿∫¿È¿˝¿¿'¿E¿k¿∫¿¿	¿	N¿	£¿	Ù¿
F¿
L¿
]¿
a¿
b¿
n¿
û¿
‰¿¿%¿P¿q¿∞¿‰¿¿¿¿¿D¿v¿Ÿ¿¿&¿3¿H¿N¿R¿S¿°¿»¿Ù¿@¿é¿ª¿Ù¿¿4¿O¿t¿õ¿˜¿B¿ë¿•¿´¿¨¿∏¿¿D¿à¿ù¿§¿•¿ˆ¿Q¿Y¿j¿n¿o¿¥¿‹¿‚¿)¿P¿V¿¶¿Œ¿¸¿!¿/¿5¿6¿g¿°¿Æ¿Ê¿Ï¿¿Ò¿¿6¿[¿i¿o¿p¿°¿À¿—¿’¿÷¿"¿-¿2¿}¿√¿‰¿Â¿Ò¿¿A¿O¿U¿V¿Ü¿î¿ö¿õ¿≠¿ ¿¿¿¿¿:¿~¿å¿í¿ì¿•¿∆¿Œ¿“¿”¿ﬂ¿¿N¿O¿i¿´¿œ¿ˇ¿¿¿¿¿¿S¿T¿d¿e¿q¿ß¿˛¿6¿T¿y¿•¿—¿¿¿I¿J¿q¿î¿´¿—¿Ú¿¿@¿o¿û¿—¿¿$¿H¿Ç¿™¿—¿¿;¿o¿∫¿“¿ 	¿ *¿ r¿ y¿ }¿ ~¿ ä¿ –¿ —¿ ˝¿!#¿!$¿!0¿!j¿!|¿!ø¿!«¿!À¿!Ã¿"¿"6¿"O¿"î¿"≤¿#¿#¿#<¿#t¿#~¿#é¿#í¿#ì¿#÷¿#¸¿$¿$Z¿$w¿$ ¿$Ÿ¿$˛¿%5¿%?¿%O¿%S¿%T¿%ô¿%ø¿%ÿ¿&¿&<¿&ñ¿&◊¿&Ê¿'¿'A¿'K¿'[¿'_¿'`¿'≤¿'˛¿(¿(C¿(\¿(n¿(ç¿(ì¿(≥¿(Õ¿(›¿)7¿)ê¿)Ë¿*<¿*â¿*µ¿*π¿*∫¿+¿+;¿+@¿+ç¿+‹¿,*¿,t¿,◊¿,˜¿-¿-1¿-S¿-Ä¿-¶¿-÷¿-‡¿.0¿.m¿.ª¿.Â¿/K¿/Å¿/•¿/ ¿/–¿0¿0P¿0ú¿0Ì¿14¿1~¿1«¿1⁄¿1Ú¿2O¿2z¿2Ñ¿2›¿2·¿2‚¿34¿35¿3\¿3π¿3ﬂ¿4B¿4a¿4∞¿4˜¿5<¿5=¿5á¿5Ÿ¿5›¿5ﬁ¿6&¿6A¿6G¿6ê¿6±¿6∑¿6¯¿78¿7f¿7è¿7ª¿7…¿7œ¿7–¿7ı¿8+¿8g¿8Ω¿8Œ¿8Ì¿8˙¿9¿9!¿99¿9?¿9v¿9w¿9ó¿9Ø¿9Ω¿9‰¿:¿:G¿:l¿:ò¿:Á¿:Ú¿:˚¿;!¿;(¿;,¿;-¿;y¿; ¿;À¿;˚¿<)¿<x¿<ó¿<µ¿<º¿<Ù¿<ı¿=@¿=ç¿=‹¿=˜¿>¿>;¿>A¿>E¿>F¿>•¿>¡¿>∆¿>«¿?¿?7¿?Å¿?õ¿?⁄¿?Á¿@¿@!¿@%¿@&¿@k¿@Å¿@ß¿@⁄¿@Ë¿@Ó¿@Ô¿A/¿AO¿Aâ¿Aó¿Aù¿Aû¿AÔ¿B3¿BÅ¿Bè¿Bï¿Bñ¿BÍ¿C=¿Ci¿Cå¿C¨¿CÃ¿C”¿C˝¿D¿D¿D<¿D@¿DA¿Dê¿D¨¿D¿E¿E¿E$¿E%¿EL¿E¶¿E˙¿F=¿FK¿F_¿F™¿F“¿F€¿F‚¿G"¿G<¿G}¿Gç¿Gï¿G¿HC¿Hi¿H£¿H‹¿I@¿Ií¿Iü¿Iœ¿Iﬂ¿IÁ¿JB¿Jh¿Jù¿JÀ¿K/¿KÅ¿Ká¿Kà¿K±¿K—¿L¿L(¿L/¿L3¿L4¿Ll¿Lx¿L«¿MT¿M[¿Mg¿M¥¿NA¿NH¿NI¿Nx¿Nò¿NÁ¿N˚¿O¿O¿O¿OK¿Oî¿Oï¿OÁ¿P
¿P\¿P]¿Pï¿PÕ¿PÁ¿P˙¿Q ¿Q,¿Q0¿Q1¿Qy¿Q¿Q“¿R¿R2¿RA¿Rõ¿R¢¿R¶¿Rß¿RÒ¿SA¿Sl¿Sü¿S‚¿T5¿T6¿TD¿Tq¿T‘¿T€¿U¿UJ¿UX¿Us¿Uî¿Uù¿U§¿U”¿V,¿V3¿V4¿VQ¿Vâ¿VÕ¿V€¿V˜¿W¿WD¿WM¿WT¿Wá¿W‹¿W„¿X"¿Xm¿X{¿Xñ¿X∑¿X‚¿XÎ¿XÚ¿Y6¿YÜ¿Yî¿Y∞¿Y—¿Y¸¿Z¿Z¿ZD¿Zà¿Zñ¿Z™¿Z«¿ZÚ¿Z˚¿[¿[g¿[Ã¿\¿\~¿\å¿\®¿\…¿\Ù¿\˝¿]¿]C¿]é¿]ú¿]∑¿]ÿ¿^¿^¿^¿^a¿^ª¿^…¿^‰¿_¿_0¿_9¿_@¿_v¿_—¿_ÿ¿`¿`¿`4¿`l¿`∞¿`æ¿`“¿`Ô¿a¿a2¿a;¿aB¿aÅ¿aÃ¿a⁄¿aı¿b¿b=¿bU¿br¿b{¿bÇ¿bÉ¿bï¿bÿ¿c#¿cJ¿cq¿c∏¿c¡¿c»¿c…¿d¿dk¿dp¿dq¿d~¿dä¿d±¿dﬂ¿e¿e ¿ef¿e»¿e˛¿fP¿fà¿fè¿fê¿f±¿fﬁ¿g¿g¿g3¿gK¿gw¿gû¿g≈¿g·¿g˝¿h,¿há¿h•¿h⁄¿i¿i<¿iÉ¿iπ¿iÂ¿j¿jv¿jã¿jÓ¿k%¿kI¿k_¿k`¿kå¿kØ¿k≈¿k∆¿k˚¿l*¿l[¿lé¿lø¿lÚ¿mB¿mê¿m∏¿m“¿n¿nd¿nƒ¿nÂ¿o¿o¿o¿oX¿oö¿oØ¿oÔ¿pE¿pù¿pÙ¿q/¿qz¿qø¿q‡¿qı¿r$¿rY¿ry¿r™¿r◊¿s¿sb¿s¨¿sÓ¿t ¿tF¿t_¿tà¿tµ¿tÈ¿uI¿uÄ¿u∑¿u¸¿v9¿vî¿vÏ¿w+¿wS¿wà¿wº¿w„¿x8¿xë¿xÕ¿y¿y0¿yr¿y≤¿yˆ¿z/¿zj¿zÆ¿zÎ¿{&¿{`¿{¶¿{…¿|¿|?¿|v¿|«¿}¿}U¿}à¿}«¿~ ¿~k¿~¨¿~Î¿$¿c¿¢¿ﬂ¿Ä"¿ÄV¿Äµ¿Å¿Å^¿Å£¿ÅË¿Ç)¿Çl¿Çß¿Çﬂ¿É$¿Éx¿É√¿Ñ¿Ñ[¿Ñè¿ÑÍ¿Ö/¿Öv¿ÖΩ¿Ü¿Üj¿Üø¿á¿át¿áµ¿á˛¿àL¿à•¿àÏ¿â¿â4¿âU¿ât¿âë¿â¨¿â≈¿â‹¿âÒ¿ä¿ä¿ä$¿ä1¿ä<¿äE¿äL¿äP¿äQ¿äÖ¿äã¿ä–¿ã¿ã9¿ãW¿ãx¿ãÆ¿ã¯¿å<¿å\¿å|¿åò¿å°¿å»¿ç¿çO¿çp¿ç ¿é ¿éO¿éY¿éa¿éì¿éô¿éÏ¿è<¿èç¿èß¿ê¿êq¿êã¿ê´¿ê◊¿ë¿ë¿ë'¿ë6¿ëP¿ë®¿ë≥¿ëª¿ë“¿ëÈ¿í	¿íR¿ím¿í≥¿íæ¿í«¿íÕ¿ì¿ì1¿ìÑ¿ì÷¿î$¿î¿îÄ¿îﬁ¿îﬂ¿ï¿ï$¿ïG¿ïW¿ïé¿ï™¿ï≥¿ïπ¿ï∫¿ïÒ¿ñ¿ñ5¿ñJ¿ñn¿ñu¿ñy¿ñ{¿ñ|¿ñ≥¿ñ¡¿ñ–¿ñÓ¿ó¿ó/¿óU¿ók¿óã¿ó©¿ó∆¿ó‚¿óˇ¿ò!¿ò=¿òY¿òl¿òá¿òú¿òµ¿ò”¿ò¿ô¿ô"¿ôH¿ôg¿ôÅ¿ô™¿ô…¿ô‡¿ô˜¿ö¿ö?¿öx¿öØ¿ö€¿õ¿õ(¿õB¿õ\¿õ|¿õŒ¿õœ¿õÓ¿ú¿ú*¿úR¿úx¿úû¿ú∆¿úﬁ¿úı¿ù¿ù#¿ù:¿ùP¿ùp¿ùè¿ùÆ¿ùÀ¿ù¿û¿û+¿ûE¿ûu¿ûú¿ûª¿û‡¿û¸¿ü¿ü8¿üU¿üx¿ü®¿ü÷¿üˇ¿†4¿†U¿†y¿†ô¿†¥¿†µ¿†¡¿†˝¿°¿°0¿°P¿°Ç¿°∞¿°‰¿¢¿¢¿¢8¿¢R¿¢l¿¢Ü¿¢û¿¢º¿¢‚¿£ ¿£¿£@¿£~¿£†¿£∂¿£„¿§¿§1¿§_¿§Ö¿§•¿§«¿§È¿•¿•=¿•o¿•ü¿•›¿¶¿¶;¿¶c¿¶ã¿¶≠¿¶¥¿¶∏¿¶π¿¶≈¿ß¿ß%¿ß?¿ßa¿ßï¿ß≈¿ß˚¿®¿®9¿®U¿®q¿®ç¿®©¿®√¿®„¿©¿©+¿©I¿©o¿©Ø¿©”¿©Î¿™¿™J¿™r¿™¢¿™ƒ¿™Ê¿´
¿´.¿´R¿´Ü¿´∏¿´¯¿¨.¿¨Z¿¨é¿¨∏¿¨‹¿≠	¿≠¿≠¿≠¿≠¿≠5¿≠Q¿≠o¿≠å¿≠≠¿≠À¿≠Ò¿Æ¿Æ*¿ÆI¿Æa¿Æg¿Æh¿ÆÖ¿Æ™¿Æ…¿Æ˘¿Ø¿Ø1¿ØJ¿Ø]¿Ø|¿Ø}¿Ø≥¿Ø’¿Ø˛¿∞¿∞!¿∞I¿∞y¿∞£¿∞·¿±)¿±K¿±w¿±£¿±ø¿≤¿≤¿≤ ¿≤!¿≤S¿≤p¿≤â¿≤¶¿≤≈¿≤Ì¿≥¿≥¿≥¿≥%¿≥B¿≥a¿≥å¿≥¢¿≥£¿≥Ø¿≥ı¿≥˜¿≥¯¿¥T¿¥Æ¿¥Ø¿¥ª¿¥–¿¥Á¿µ¿µC¿µI¿µM¿µN¿µZ¿µë¿µ∑¿µÁ¿∂)¿∂/¿∂0¿∂`¿∂û¿∂§¿∂®¿∂©¿∂µ¿∂»¿∑¿∑¿∑¿∑¿∑F¿∑ñ¿∑ó¿∑¿¿∑„¿∑‰¿∑¿∏&¿∏'¿∏3¿∏[¿∏Ä¿∏€¿∏˛¿π¿π¿π¿π4¿π^¿πã¿πü¿π•¿πŒ¿π‚¿πË¿∫¿∫(¿∫.¿∫n¿∫†¿ª¿ªU¿ªY¿ªZ¿ªf¿ªz¿ªø¿ªÛ¿º¿º¿ºI¿ºo¿ºÄ¿ºº¿º√¿º«¿º»¿º‘¿º˚¿Ω¿Ω¿Ω¿Ω¿ΩK¿Ωï¿Ωñ¿ΩÛ¿æ¿æ¿æ¿æ!¿æD¿æv¿æ£¿æ™¿æÃ¿æı¿ø	¿øO¿øU¿øï¿ø©¿øæ¿øƒ¿ø»¿ø ¿øÀ¿¿¿¿¿¿a¿¿¨¿¿¯¿¡;¿¡å¿¡€¿¡Ê¿¡Í¿¬:¿¬Q¿¬U¿¬c¿¬g¿¬¨¿¬›¿√.¿√f¿√ñ¿√æ¿√ø¿√’¿√÷¿ƒ'¿ƒS¿ƒú¿ƒÊ¿≈&¿≈*¿≈+¿≈7¿≈g¿≈ê¿≈£¿≈©¿≈¬¿≈“¿≈ÿ¿≈¸¿∆¿∆¿∆:¿∆Q¿∆W¿∆X¿∆ù¿∆°¿∆¢¿∆Æ¿∆ﬂ¿«¿«'¿«-¿«E¿«U¿«[¿«É¿«û¿«§¿«¡¿«ÿ¿«ﬁ¿«ﬂ¿»,¿»0¿»2¿»3¿»Ñ¿»ﬂ¿…/¿…0¿…Q¿…Ç¿…±¿…≤¿…Ô¿ G¿ U¿ [¿ °¿ ¿À¿À-¿À4¿À^¿À´¿ÀÔ¿Ã¿Ã6¿Ã<¿Ã@¿ÃA¿ÃM¿ÃÉ¿Ãø¿Ã›¿Ã¿Ãˆ¿Õ¿Õ]¿Õ°¿Õ√¿Œ¿Œ6¿Œõ¿ŒÍ¿ŒÛ¿œ8¿œN¿œZ¿œi¿œë¿œö¿œŒ¿–¿–¿–¿–t¿–u¿–®¿–∫¿–”¿—$¿—O¿—®¿—ƒ¿—À¿“¿“"¿“,¿“A¿“g¿“n¿“†¿“ÿ¿“‹¿“›¿“È¿”A¿”C¿”D¿”è¿”Æ¿”Ã¿”‹¿”ˆ¿‘¿‘C¿‘^¿‘~¿‘Ñ¿‘Ö¿‘¶¿‘–¿‘Á¿’¿’4¿’b¿’c¿’é¿’è¿’Ÿ¿’Ò¿÷'¿÷R¿÷î¿÷ª¿÷¬¿÷‡¿◊¿◊r¿◊v¿◊w¿◊Ω¿◊◊¿ÿ¿ÿ<¿ÿÄ¿ÿá¿ÿß¿ÿƒ¿Ÿ¿Ÿ"¿Ÿ#¿Ÿ/¿Ÿe¿Ÿ°¿Ÿ¿¿Ÿ¡¿⁄ ¿⁄w¿⁄î¿⁄¶¿⁄≈¿⁄›¿€:¿€d¿€o¿€x¿€~¿€¿€´¿€˙¿‹1¿‹S¿‹ê¿‹∆¿›¿›d¿›l¿›r¿›s¿›ï¿›©¿›¡¿›˝¿ﬁ;¿ﬁq¿ﬁ£¿ﬁπ¿ﬁ“¿ﬁŸ¿ﬂ ¿ﬂU¿ﬂâ¿ﬂ†¿ﬂÙ¿‡!¿‡"¿‡H¿‡m¿‡ß¿‡Ï¿‡˚¿·¿·x¿·ì¿·£¿·¯¿·ˇ¿‚¿‚¿‚¿‚N¿‚P¿‚Q¿‚¶¿‚≈¿‚˘¿‚˙¿„¿„¿„N¿„n¿„o¿„£¿„⁄¿„˙¿‰&¿‰4¿‰:¿‰f¿‰¥¿‰ÿ¿‰¸¿Â$¿Âf¿Â™¿Â…¿ÂÏ¿Ê¿Ê¿Ê¿Ê¿Ê¿ÊR¿Ê~¿Ê¿Êﬁ¿Á.¿ÁR¿Á`¿Áf¿Ág¿Áô¿Áº¿Áÿ¿Áﬁ¿Áﬂ¿Ë¿Ë/¿Ëê¿Ëë¿Ë≠¿ËÌ¿È¿Èd¿Èr¿Èè¿È≥¿È‹¿Èˇ¿Í¿Í3¿ÍP¿ÍÜ¿Í≥¿Í⁄¿ÍÙ¿Î(¿Î[¿Î\¿Îp¿ÎÄ¿Î“¿ÎŸ¿Ï¿Ï4¿ÏX¿Ï^¿Ïb¿Ïc¿Ïo¿Ï≠¿ÏØ¿Ï∞¿ÏÙ¿Ì¿Ì¿Ì6¿Ì7¿ÌC¿Ìã¿Ì¶¿Ì∂¿Ì”¿ÌÈ¿Ó7¿ÓM¿ÓV¿Ó]¿Óa¿Ób¿Ón¿Ó´¿Ó≠¿ÓÆ¿Ó˙¿Ô¿Ô¿Ô@¿ÔA¿ÔM¿Ôñ¿Ô∫¿Ô‚¿ÔÔ¿¿¿"¿#¿/¿î¿ñ¿ó¿’¿ˆ¿˙¿ÒE¿Òk¿ÒØ¿Òª¿Ò¿ÒÒ¿Ò˝¿Ú¿Ú8¿Ú<¿Ú>¿Ú?¿Úô¿Úº¿ÚΩ¿Ú…¿Û¿Û`¿ÛÖ¿Û®¿Û«¿ÛÍ¿Ù:¿Ùä¿Ù∫¿ÙÂ¿Ùˇ¿ı)¿ı7¿ıb¿ıé¿ı¬¿ıÔ¿ˆ¿ˆE¿ˆô¿ˆ£¿ˆƒ¿ˆÂ¿˜¿˜,¿˜2¿˜6¿˜8    _kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_WebClipboardStatusNotifier_EditableTextTapOutsideAction0>flutter.widgets.contentInsertionConfiguration.allowedMimeTypesÇ∂Used when a user inserts image-based content through the device keyboard,
currently only used on Android.

The passed list of strings will determine which MIME types are allowed to
be inserted via the device keyboard.

The default mime types are given by [kDefaultContentInsertionMimeTypes].
These are all the mime types that are able to be handled and inserted
from keyboards.

This field cannot be an empty list.

{@tool dartpad}
This example shows how to limit image insertion to specific file types.

** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
{@end-tool}

See also:

 * <https://developer.android.com/guide/topics/text/image-keyboard>&flutter.widgets.EditableText.lifeCycleÇæ## Lifecycle

Upon completion of editing, like pressing the "done" button on the keyboard,
two actions take place:

  1st: Editing is finalized. The default behavior of this step includes
  an invocation of [onChanged]. That default behavior can be overridden.
  See [onEditingComplete] for details.

  2nd: [onSubmitted] is invoked with the user's input value.

[onSubmitted] can be used to manually move focus to another input widget
when a user finishes with the currently focused input widget.

When the widget has focus, it will prevent itself from disposing via
[AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
selection. Removing the focus will allow it to be disposed.2flutter.widgets.editableText.shortcutsAndTextInputÖ### Interactions Between [Shortcuts] and Text Input

Shortcuts prevent text input fields from receiving their keystrokes as text
input. For example, placing a [Shortcuts] widget in the widget tree above
a text input field and creating a shortcut for [LogicalKeyboardKey.keyA]
will prevent the field from receiving that key as text input. In other
words, typing key "A" into the field will trigger the shortcut and will not
insert a letter "a" into the field.

This happens because of the way that key strokes are handled in Flutter.
When a keystroke is received in Flutter's engine, it first gives the
framework the opportunity to handle it as a raw key event through
[SystemChannels.keyEvent]. This is what [Shortcuts] listens to indirectly
through its [FocusNode]. If it is not handled, then it will proceed to try
handling it as text input through [SystemChannels.textInput], which is what
[EditableTextState] listens to through [TextInputClient].

This behavior, where a shortcut prevents text input into some field, can be
overridden by using another [Shortcuts] widget lower in the widget tree and
mapping the desired key stroke(s) to [DoNothingAndStopPropagationIntent].
The key event will be reported as unhandled by the framework and will then
be sent as text input as usual..flutter.widgets.editableText.showCaretOnScreenÅõ## Keep the caret visible when focused

When focused, this widget will make attempts to keep the text area and its
caret (even when [showCursor] is `false`) visible, on these occasions:

 * When the user focuses this text field and it is not [readOnly].
 * When the user changes the selection of the text field, or changes the
   text when the text field is not [readOnly].
 * When the virtual keyboard pops up.*flutter.widgets.editableText.accessibilityÉ@## Troubleshooting Common Accessibility Issues

### Customizing User Input Accessibility Announcements

To customize user input accessibility announcements triggered by text
changes, use [SemanticsService.announce] to make the desired
accessibility announcement.

On iOS, the on-screen keyboard may announce the most recent input
incorrectly when a [TextInputFormatter] inserts a thousands separator to
a currency value text field. The following example demonstrates how to
suppress the default accessibility announcements by always announcing
the content of the text field as a US currency value (the `\$` inserts
a dollar sign, the `$newText` interpolates the `newText` variable):

```dart
onChanged: (String newText) {
  if (newText.isNotEmpty) {
    SemanticsService.announce('\$$newText', Directionality.of(context));
  }
}
```/flutter.widgets.editableText.obscuringCharacterÄçCharacter used for obscuring text if [obscureText] is true.

Must be only a single character.

Defaults to the character U+2022 BULLET (‚Ä¢).(flutter.widgets.editableText.obscureTextÅ1Whether to hide the text being edited (e.g., for passwords).

When this is set to true, all the characters in the text field are
replaced by [obscuringCharacter], and the text in the field cannot be
copied with copy or cut. If [readOnly] is also true, then the text cannot
be selected.

Defaults to false.%flutter.widgets.editableText.readOnlyÄ∞Whether the text can be changed.

When this is set to true, the text cannot be modified
by any shortcut or keyboard operation. The text is still selectable.

Defaults to false.'flutter.widgets.editableText.showCursordWhether to show cursor.

The cursor refers to the blinking caret when the [EditableText] is focused.(flutter.widgets.editableText.autocorrect4Whether to enable autocorrection.

Defaults to true.'flutter.widgets.editableText.strutStyleÉÇThe strut style used for the vertical layout.

[StrutStyle] is used to establish a predictable vertical layout.
Since fonts may vary depending on user input and due to font
fallback, [StrutStyle.forceStrutHeight] is enabled by default
to lock all lines to the height of the base [TextStyle], provided by
[style]. This ensures the typed text fits within the allotted space.

If null, the strut used will inherit values from the [style] and will
have [StrutStyle.forceStrutHeight] set to true. When no [style] is
passed, the theme's [TextStyle] will be used to generate [strutStyle]
instead.

To disable strut-based vertical alignment and allow dynamic vertical
layout based on the glyphs typed, use [StrutStyle.disabled].

Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).&flutter.widgets.editableText.textAlignLHow the text should be aligned horizontally.

Defaults to [TextAlign.start].*flutter.widgets.editableText.textDirectionÇ"The directionality of the text.

This decides how [textAlign] values like [TextAlign.start] and
[TextAlign.end] are interpreted.

This is also used to disambiguate how to render bidirectional text. For
example, if the text is an English phrase followed by a Hebrew phrase,
in a [TextDirection.ltr] context the English phrase will be on the left
and the Hebrew phrase to its right, while in a [TextDirection.rtl]
context, the English phrase will be on the right and the Hebrew phrase on
its left.

Defaults to the ambient [Directionality], if any./flutter.widgets.editableText.textCapitalizationÅHConfigures how the platform keyboard will select an uppercase or
lowercase keyboard.

Only supports text keyboards, other keyboard types will ignore this
configuration. Capitalization is locale-aware.

Defaults to [TextCapitalization.none].

See also:

 * [TextCapitalization], for a description of each capitalization behavior.,flutter.widgets.editableText.textScaleFactorÅtDeprecated. Will be removed in a future version of Flutter. Use
[textScaler] instead.

The number of font pixels for each logical pixel.

For example, if the text scale factor is 1.5, text will be 50% larger than
the specified font size.

Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
[MediaQuery], or 1.0 if there is no [MediaQuery] in scope.%flutter.widgets.editableText.maxLinesÜ‡The maximum number of lines to show at one time, wrapping if necessary.

This affects the height of the field itself and does not limit the number
of lines that can be entered into the field.

If this is 1 (the default), the text will not wrap, but will scroll
horizontally instead.

If this is null, there is no limit to the number of lines, and the text
container will start with enough vertical space for one line and
automatically grow to accommodate additional lines as they are entered, up
to the height of its constraints.

If this is not null, the value must be greater than zero, and it will lock
the input to the given number of lines and take up enough horizontal space
to accommodate that number of lines. Setting [minLines] as well allows the
input to grow and shrink between the indicated range.

The full set of behaviors possible with [minLines] and [maxLines] are as
follows. These examples apply equally to [TextField], [TextFormField],
[CupertinoTextField], and [EditableText].

Input that occupies a single line and scrolls horizontally as needed.
```dart
const TextField()
```

Input whose height grows from one line up to as many lines as needed for
the text that was entered. If a height limit is imposed by its parent, it
will scroll vertically when its height reaches that limit.
```dart
const TextField(maxLines: null)
```

The input's height is large enough for the given number of lines. If
additional lines are entered the input scrolls vertically.
```dart
const TextField(maxLines: 2)
```

Input whose height grows with content between a min and max. An infinite
max is possible with `maxLines: null`.
```dart
const TextField(minLines: 2, maxLines: 4)
```

See also:

 * [minLines], which sets the minimum number of lines visible.%flutter.widgets.editableText.minLinesÖœThe minimum number of lines to occupy when the content spans fewer lines.

This affects the height of the field itself and does not limit the number
of lines that can be entered into the field.

If this is null (default), text container starts with enough vertical space
for one line and grows to accommodate additional lines as they are entered.

This can be used in combination with [maxLines] for a varying set of behaviors.

If the value is set, it must be greater than zero. If the value is greater
than 1, [maxLines] should also be set to either null or greater than
this value.

When [maxLines] is set as well, the height will grow between the indicated
range of lines. When [maxLines] is null, it will grow as high as needed,
starting from [minLines].

A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
These apply equally to [TextField], [TextFormField], [CupertinoTextField],
and [EditableText].

Input that always occupies at least 2 lines and has an infinite max.
Expands vertically as needed.
```dart
TextField(minLines: 2)
```

Input whose height starts from 2 lines and grows up to 4 lines at which
point the height limit is reached. If additional lines are entered it will
scroll vertically.
```dart
const TextField(minLines:2, maxLines: 4)
```

Defaults to null.

See also:

 * [maxLines], which sets the maximum number of lines visible, and has
   several examples of how minLines and maxLines interact to produce
   various behaviors.$flutter.widgets.editableText.expandsÇ;Whether this widget's height will be sized to fill its parent.

If set to true and wrapped in a parent widget like [Expanded] or
[SizedBox], the input will expand to fill the parent.

[maxLines] and [minLines] must both be null when this is set to true,
otherwise an error is thrown.

Defaults to false.

See the examples in [maxLines] for the complete picture of how [maxLines],
[minLines], and [expands] interact to produce various behaviors.

Input that matches the height of its parent:
```dart
const Expanded(
  child: TextField(maxLines: null, expands: true),
)
```&flutter.widgets.editableText.autofocusÄ¯Whether this text field should focus itself if nothing else is already
focused.

If true, the keyboard will open as soon as this text field obtains focus.
Otherwise, the keyboard is only shown after the user taps the text field.

Defaults to false..flutter.widgets.editableText.selectionControlsÅíOptional delegate for building the text selection handles.

Historically, this field also controlled the toolbar. This is now handled
by [contextMenuBuilder] instead. However, for backwards compatibility, when
[selectionControls] is set to an object that does not mix in
[TextSelectionHandleControls], [contextMenuBuilder] is ignored and the
[TextSelectionControls.buildToolbar] method is used instead.)flutter.widgets.editableText.keyboardTypeÄëThe type of keyboard to use for editing the text.

Defaults to [TextInputType.text] if [maxLines] is one and
[TextInputType.multiline] otherwise.&flutter.widgets.editableText.onChangedÉ»Called when the user initiates a change to the TextField's
value: when they have inserted or deleted text.

This callback doesn't run when the TextField's text is changed
programmatically, via the TextField's [controller]. Typically it
isn't necessary to be notified of such changes, since they're
initiated by the app itself.

To be notified of all changes to the TextField's text, cursor,
and selection, one can add a listener to its [controller] with
[TextEditingController.addListener].

[onChanged] is called before [onSubmitted] when user indicates completion
of editing, such as when pressing the "done" button on the keyboard. That
default behavior can be overridden. See [onEditingComplete] for details.

{@tool dartpad}
This example shows how onChanged could be used to check the TextField's
current value each time the user inserts or deletes a character.

** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
{@end-tool}&flutter.widgets.EditableText.onChangedÇïIt's important to always use
[characters](https://pub.dev/packages/characters) when dealing with user
input text that may contain complex characters. This will ensure that
extended grapheme clusters and surrogate pairs are treated as single
characters, as they appear to the user.

For example, when finding the length of some user input, use
`string.characters.length`. Do NOT use `string.length` or even
`string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
appears to the user as a single character, and `string.characters.length`
intuitively returns 1. On the other hand, `string.length` returns 8, and
`string.runes.length` returns 5!.flutter.widgets.editableText.onEditingCompleteÇÕCalled when the user submits editable content (e.g., user presses the "done"
button on the keyboard).

The default implementation of [onEditingComplete] executes 2 different
behaviors based on the situation:

 - When a completion action is pressed, such as "done", "go", "send", or
   "search", the user's content is submitted to the [controller] and then
   focus is given up.

 - When a non-completion action is pressed, such as "next" or "previous",
   the user's content is submitted to the [controller], but focus is not
   given up because developers may want to immediately move focus to
   another input widget within [onSubmitted].

Providing [onEditingComplete] prevents the aforementioned default behavior.(flutter.widgets.editableText.onSubmittedÇ∂Called when the user indicates that they are done editing the text in the
field.

By default, [onSubmitted] is called after [onChanged] when the user
has finalized editing; or, if the default behavior has been overridden,
after [onEditingComplete]. See [onEditingComplete] for details.

## Testing
The following is the recommended way to trigger [onSubmitted] in a test:

```dart
await tester.testTextInput.receiveAction(TextInputAction.done);
```

Sending a `LogicalKeyboardKey.enter` via `tester.sendKeyEvent` will not
trigger [onSubmitted]. This is because on a real device, the engine
translates the enter key to a done action, but `tester.sendKeyEvent` sends
the key to the framework only.0flutter.widgets.editableText.onAppPrivateCommandÉ2This is used to receive a private command from the input method.

Called when the result of [TextInputClient.performPrivateCommand] is
received.

This can be used to provide domain-specific features that are only known
between certain input methods and their clients.

See also:
  * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
    which is the Android documentation for performPrivateCommand, used to
    send a command from the input method.
  * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
    which is the Android documentation for sendAppPrivateCommand, used to
    send a command to the input method./flutter.widgets.editableText.onSelectionChangedSCalled when the user changes the selection of text (including the cursor
location).$flutter.widgets.editableText.groupIdÅLThe group identifier for the [TextFieldTapRegion] of this text field.

Text fields with the same group identifier share the same tap region.
Defaults to the type of [EditableText].

See also:

 * [TextFieldTapRegion], to give a [groupId] to a widget that is to be
   included in a [EditableText]'s tap region that has [groupId] set.)flutter.widgets.editableText.onTapOutsideÑCalled for each tap down that occurs outside of the [TextFieldTapRegion]
group when the text field is focused.

If this is null, [EditableTextTapOutsideIntent] will be invoked. In the
default implementation, [FocusNode.unfocus] will be called on the
[focusNode] for this text field when a [PointerDownEvent] is received on
another part of the UI. However, it will not unfocus as a result of mobile
application touch events (which does not include mouse clicks), to conform
with the platform conventions. To change this behavior, a callback may be
set here or [EditableTextTapOutsideIntent] may be overridden.

When adding additional controls to a text field (for example, a spinner, a
button that copies the selected text, or modifies formatting), it is
helpful if tapping on that control doesn't unfocus the text field. In
order for an external widget to be considered as part of the text field
for the purposes of tapping "outside" of the field, wrap the control in a
[TextFieldTapRegion].

The [PointerDownEvent] passed to the function is the event that caused the
notification. It is possible that the event may occur outside of the
immediate bounding box defined by the text field, although it will be
within the bounding box of a [TextFieldTapRegion] member.+flutter.widgets.editableText.onTapUpOutsideÅ{Called for each tap up that occurs outside of the [TextFieldTapRegion]
group when the text field is focused.

The [PointerUpEvent] passed to the function is the event that caused the
notification. It is possible that the event may occur outside of the
immediate bounding box defined by the text field, although it will be
within the bounding box of a [TextFieldTapRegion] member.,flutter.widgets.editableText.inputFormattersÇOptional input validation and formatting overrides.

Formatters are run in the provided order when the user changes the text
this widget contains. When this parameter changes, the new formatters will
not be applied until the next time the user inserts or deletes text.
Similar to the [onChanged] callback, formatters don't run when the text is
changed programmatically via [controller].

See also:

 * [TextEditingController], which implements the [Listenable] interface
   and notifies its listeners on [TextEditingValue] changes.(flutter.widgets.editableText.cursorWidthÅcHow thick the cursor will be.

Defaults to 2.0.

The cursor will draw under the text. The cursor width will extend
to the right of the boundary between characters for left-to-right text
and to the left for right-to-left text. This corresponds to extending
downstream relative to the selected position. Negative values may be used
to reverse this behavior.)flutter.widgets.editableText.cursorHeightjHow tall the cursor will be.

If this property is null, [RenderEditable.preferredLineHeight] will be used.)flutter.widgets.editableText.cursorRadiusWHow rounded the corners of the cursor should be.

By default, the cursor has no radius.2flutter.widgets.editableText.cursorOpacityAnimatesÄ…Whether the cursor will animate from fully transparent to fully opaque
during each cursor blink.

By default, the cursor opacity will animate on iOS platforms and will not
animate on Android platforms.*flutter.widgets.editableText.scrollPaddingÅÔConfigures the padding for the edges surrounding a [Scrollable] when the
text field scrolls into view.

When this widget receives focus and is not completely visible (for example
scrolled partially off the screen or overlapped by the keyboard), then it
will attempt to make itself visible by scrolling a surrounding
[Scrollable], if one is present. This value controls how far from the
edges of a [Scrollable] the TextField will be positioned after the scroll.

Defaults to EdgeInsets.all(20.0).7flutter.widgets.editableText.enableInteractiveSelectionÅ≤Whether to enable user interface affordances for changing the
text selection.

For example, setting this to true will enable features such as
long-pressing the TextField to select text and show the
cut/copy/paste menu, and tapping to move the text caret.

When this is false, the text selection cannot be adjusted by
the user, text cannot be copied, and the user cannot paste into
the text field from the clipboard.

Defaults to true.-flutter.widgets.editableText.scrollControllerÄñThe [ScrollController] to use when vertically scrolling the input.

If null, it will instantiate a new ScrollController.

See [Scrollable.controller].*flutter.widgets.editableText.scrollPhysicsÄüThe [ScrollPhysics] to use when vertically scrolling the input.

If not specified, it will behave according to the current platform.

See [Scrollable.physics].,flutter.widgets.editableText.scribbleEnabledjWhether iOS 14 Scribble features are enabled for this widget.

Only available on iPads.

Defaults to true.5flutter.widgets.editableText.stylusHandwritingEnabledÅWhether this input supports stylus handwriting, where the user can write
directly on top of a field.

Currently only the following devices are supported:

 * iPads running iOS 14 and above using an Apple Pencil.
 * Android devices running API 34 and above and using an active stylus.-flutter.widgets.editableText.selectionEnabled{Same as [enableInteractiveSelection].

This getter exists primarily for consistency with
[RenderEditable.selectionEnabled].*flutter.widgets.editableText.autofillHintsçîA list of strings that helps the autofill service identify the type of this
text input.

When set to null, this text input will not send its autofill information
to the platform, preventing it from participating in autofills triggered
by a different [AutofillClient], even if they're in the same
[AutofillScope]. Additionally, on Android and web, setting this to null
will disable autofill for this text field.

The minimum platform SDK version that supports Autofill is API level 26
for Android, and iOS 10.0 for iOS.

Defaults to an empty list.

### Setting up iOS autofill:

To provide the best user experience and ensure your app fully supports
password autofill on iOS, follow these steps:

* Set up your iOS app's
  [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
* Some autofill hints only work with specific [keyboardType]s. For example,
  [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
  works only with [TextInputType.emailAddress]. Make sure the input field has a
  compatible [keyboardType]. Empirically, [TextInputType.name] works well
  with many autofill hints that are predefined on iOS.

### Troubleshooting Autofill

Autofill service providers rely heavily on [autofillHints]. Make sure the
entries in [autofillHints] are supported by the autofill service currently
in use (the name of the service can typically be found in your mobile
device's system settings).

#### Autofill UI refuses to show up when I tap on the text field

Check the device's system settings and make sure autofill is turned on,
and there are available credentials stored in the autofill service.

* iOS password autofill: Go to Settings -> Password, turn on "Autofill
  Passwords", and add new passwords for testing by pressing the top right
  "+" button. Use an arbitrary "website" if you don't have associated
  domains set up for your app. As long as there's at least one password
  stored, you should be able to see a key-shaped icon in the quick type
  bar on the software keyboard, when a password related field is focused.

* iOS contact information autofill: iOS seems to pull contact info from
  the Apple ID currently associated with the device. Go to Settings ->
  Apple ID (usually the first entry, or "Sign in to your iPhone" if you
  haven't set up one on the device), and fill out the relevant fields. If
  you wish to test more contact info types, try adding them in Contacts ->
  My Card.

* Android autofill: Go to Settings -> System -> Languages & input ->
  Autofill service. Enable the autofill service of your choice, and make
  sure there are available credentials associated with your app.

Specifying [InputDecoration.hintText] may also help autofill services
(like Samsung Pass) determine the expected content type of an input field,
although this is typically not required when autofillHints are present.

#### I called `TextInput.finishAutofillContext` but the autofill save
prompt isn't showing

* iOS: iOS may not show a prompt or any other visual indication when it
  saves user password. Go to Settings -> Password and check if your new
  password is saved. Neither saving password nor auto-generating strong
  password works without properly setting up associated domains in your
  app. To set up associated domains, follow the instructions in
  <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.+flutter.widgets.editableText.scrollBehaviorÅ£A [ScrollBehavior] that will be applied to this widget individually.

Defaults to null, wherein the inherited [ScrollBehavior] is copied and
modified to alter the viewport decoration, like [Scrollbar]s.

[ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
[ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
followed by [scrollBehavior], and then the inherited ancestor
[ScrollBehavior].:flutter.widgets.editableText.contentInsertionConfigurationÑAConfiguration of handler for media content inserted via the system input
method.

Defaults to null in which case media content insertion will be disabled,
and the system will display a message informing the user that the text field
does not support inserting media content.

Set [ContentInsertionConfiguration.onContentInserted] to provide a handler.
Additionally, set [ContentInsertionConfiguration.allowedMimeTypes]
to limit the allowable mime types for inserted content.

{@tool dartpad}

This example shows how to access the data for inserted content in your
`TextField`.

** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
{@end-tool}

If [contentInsertionConfiguration] is not provided, by default
an empty list of mime types will be sent to the Flutter Engine.
A handler function must be provided in order to customize the allowable
mime types for inserted content.

If rich content is inserted without a handler, the system will display
a message informing the user that the current text input does not support
inserting rich content./flutter.widgets.EditableText.contextMenuBuilderàÈBuilds the text selection toolbar when requested by the user.

The context menu is built when [EditableTextState.showToolbar] is called,
typically by one of the callbacks installed by the widget created by
[TextSelectionGestureDetectorBuilder.buildGestureDetector]. The widget
returned by [contextMenuBuilder] is passed to a [ContextMenuController].

If no callback is provided, no context menu will be shown.

The [EditableTextContextMenuBuilder] signature used by the
[contextMenuBuilder] callback has two parameters, the [BuildContext] of
the [EditableText] and the [EditableTextState] of the [EditableText].

The [EditableTextState] has two properties that are especially useful when
building the widgets for the context menu:

* [EditableTextState.contextMenuAnchors] specifies the desired anchor
  position for the context menu.

* [EditableTextState.contextMenuButtonItems] represents the buttons that
  should typically be built for this widget (e.g. cut, copy, paste).

The [TextSelectionToolbarLayoutDelegate] class may be particularly useful
in honoring the preferred anchor positions.

For backwards compatibility, when [EditableText.selectionControls] is set
to an object that does not mix in [TextSelectionHandleControls],
[contextMenuBuilder] is ignored and the
[TextSelectionControls.buildToolbar] method is used instead.

{@tool dartpad}
This example shows how to customize the menu, in this case by keeping the
default buttons for the platform but modifying their appearance.

** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.0.dart **
{@end-tool}

{@tool dartpad}
This example shows how to show a custom button only when an email address
is currently selected.

** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.1.dart **
{@end-tool}

See also:
  * [AdaptiveTextSelectionToolbar], which builds the default text selection
    toolbar for the current platform, but allows customization of the
    buttons.
  * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
    button Widgets for the current platform given
    [ContextMenuButtonItem]s.
  * [BrowserContextMenu], which allows the browser's context menu on web
    to be disabled and Flutter-rendered context menus to appear.4flutter.widgets.EditableText.spellCheckConfigurationÅ€Configuration that details how spell check should be performed.

Specifies the [SpellCheckService] used to spell check text input and the
[TextStyle] used to style text with misspelled words.

If the [SpellCheckService] is left null, spell check is disabled by
default unless the [DefaultSpellCheckService] is supported, in which case
it is used. It is currently supported only on Android and iOS.

If this configuration is left null, then spell check is disabled by default.'flutter.widgets.EditableText.getAnchors7Returns the anchor points for the default context menu. )ú